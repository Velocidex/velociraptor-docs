name: Notebooks.VQLPopularity
description: |
  Counts occurences of functions and plugins in the artifact repository.
  The goal is to highlight the top 50 ones that are useful

  It's best to use this on a clean datastore and import external artifacts
  for consideration.

  For "popular" items I chose the top 20 plugins and the top 30 functions.
  The threshold is arbitrary but the results do represent the more useful ones.
  Currently this leaves 3x as many uncategorized so it seems like a reasonable
  split: 25/75.

type: NOTEBOOK

parameters:
  - name: yaml_file
    description: Path to the vql.yaml files relative to your $HOME directory
    default: projects/velociraptor/docs/references/vql.yaml
    validating_regex: '^.+/.+$'

export: |
  LET yaml_path <= path_join(components=[expand(path="%HOME%"), yaml_file], path_type="linux")
  LET S = scope()
  LET plaintext <= read_file(filename=yaml_path)
  LET rooted = regex_replace(re='''(^)''',replace="root: \n",source=plaintext)
  LET yamled = parse_yaml(accessor="data",filename=rooted).root
  LET splitted = SELECT _value AS mapslice FROM foreach(row=yamled)
  LET parsed = SELECT parse_yaml(accessor="data", filename=serialize(format="yaml", item=mapslice)) AS item FROM splitted
  LET parsed2 = SELECT * FROM foreach(row=parsed.item)
  LET vql = SELECT *, S.metadata AS metadata, S.version AS version, S.free_form_args AS free_form_args, S.category AS category FROM parsed2

  -- We want to consider uncategorized items only and the existing popular ones (in case they are no longer popular)
  LET plugins = SELECT name FROM vql WHERE lowcase(string=type) = "plugin" AND (NOT category OR category = "popular")
  LET functions = SELECT name FROM vql WHERE lowcase(string=type) = "function" AND (NOT category OR category = "popular")

  LET definitions = SELECT name,
         serialize(item=sources+export, format="yaml") AS text
  FROM artifact_definitions(deps=FALSE, sanitize=TRUE)
  -- Exclude some artifacts that might skew the results
  WHERE NOT name =~ "Notebooks.VQLPopularity|Demo.Plugins|System.VFS"
  LET alltext <= join(array=definitions.text)

sources:
  - notebook:
    - type: vql
      template: |
        -- select plugins.name from scope()
        -- select functions.name from scope()
        -- select alltext from scope()

        LET plugin_matches = SELECT *
          FROM foreach(
            row=plugins.name,
            query={
              SELECT *
              FROM parse_records_with_regex(
                file=alltext,
                accessor="data",
                regex='''FROM(?:\s+)(?-i)(''' + _value + ''')\(''')
            })

        SELECT _value AS plugin_match FROM foreach(row=plugin_matches.g1)

        LET function_matches = SELECT *
          FROM foreach(
            row=functions.name,
            query={
              SELECT *
              FROM parse_records_with_regex(
                file=alltext,
                accessor="data",
                regex='''[^F][^R][^O][^M](?:\s+)(?-i)(''' + _value + ''')\(''')
            })

        SELECT _value AS function_match FROM foreach(row=function_matches.g1)
