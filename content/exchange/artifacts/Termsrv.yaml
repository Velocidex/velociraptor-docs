name: Windows.Detection.Termsrv
author: Matt Green - @mgreen27
description: |
    This artifact detects patched TerminalService dynamic link library - 
    termsrv.dll.
    
    Non Terminal Services Windows systems (e.g Windows 10 or 11) do not allow 
    concurrent users to RDP into the machine at the same time. Typically a notice 
    is displayed to the logged-on user requesting access and notifying of the 
    impending log off. As a defence evasion technique threat actors have been 
    known to patch termsrv.dll to evade detections.
    
reference:
  - https://www.mysysadmintips.com/windows/clients/545-multiple-rdp-remote-desktop-sessions-in-windows-10
  
type: CLIENT
parameters:
  - name: FileNameRegex
    description: Only file names that match this regular expression will be scanned.
    default: ^termsrv\.dll$
  - name: DriveLetter
    description: "Target drive. Default is a C:"
    default: "C:"
  - name: AllDrives
    type: bool
  - name: UploadHits
    type: bool
  - name: YaraRule
    type: yara
    description: Final Yara option and the default if no other options provided.
    default: |
        rule termserv_modified
        {
            meta:
                description = "Finds hex of termserv.dll patch in MZ file"
        		author = "Matt Green - @mgreen27"
        		date = "2022-11-10"
           strings:
                $patch = { B8 00 01 00 00 89 81 38 06 00 00 90 }
        
            condition:
                uint16(0) == 0x5a4d and ( $patch  )
        }
    
    
sources:
  - precondition:
      SELECT OS From info() where OS = 'windows'

    query: |
      -- first find all matching files mft
      LET files = SELECT *
        FROM Artifact.Windows.NTFS.MFT(
            MFTDrive=DriveLetter, AllDrives=AllDrives,
            FileRegex=FileNameRegex)
        WHERE NOT IsDir

      -- scan files and only report a single hit.
      LET hits = SELECT * FROM foreach(row=files,
            query={
                SELECT
                    FileName, OSPath,
                    File.Size AS Size,
                    File.ModTime AS ModTime,
                    Rule, Tags, Meta,
                    str(str=String.Data) AS HitContext,
                    String.Offset AS HitOffset
                FROM yara(rules=YaraRule, files=OSPath,number=1)
            })

      -- upload files that have hit
      LET upload_hits=SELECT *,
            upload(file=OSPath) AS Upload
        FROM hits
        GROUP BY OSPath

      -- return rows
      SELECT * FROM if(condition=UploadHits,
        then={ SELECT * FROM upload_hits},
        else={ SELECT * FROM hits})
