name: Windows.Carving.Emotet
author: "Eduardo Mattos - @eduardfir"
description: |
    This artifact yara-scans memory or unpacked DLL samples for the new 2021 Emotet
    detections, decrypts and returns the C2 list.

    You may select specific file paths or processes to be yara-scanned, or allow
    it to yara-scan all memory space.

    Currently this artifact parses encrypted configurations from the Emotet variants
    introducted in November 2021. It will not parse the configurations from earlier
    variants.

    NOTE:
    This content simply carves the configuration and does not unpack files on disk.
    That means pointing this artifact as a packed or obfuscated file will not obtain the expected results.
type: CLIENT

reference:
  - https://github.com/kevoreilly/CAPEv2/blob/3fc7e94e22b5e4a04531292c095ea6db44879e72/data/yara/CAPE/Emotet.yar
  - https://github.com/OALabs/Lab-Notes/blob/main/Emotet/Emotet.ipynb

parameters:
  - name: TargetFileGlob
    default:
  - name: PidRegex
    default: .
  - name: ProcessRegex
    default: .
  - name: DetectionYara
    default: |
        rule Emotet {
            meta:
                author = "Eduardo Mattos"
                description = "Emotet Payload - Based on kevoreilly's Emotet Payload Yara rule"
                reference = "https://github.com/kevoreilly/CAPEv2/blob/master/modules/processing/parsers/mwcp/Emotet.py"
            strings:
                $snippetD = {8D 44 [2] 50 68 [4] FF 74 [2] FF 74 [2] 8B 54 [2] 8B 4C [2] E8 [4] 8B 54 [2] 83 C4 10 89 44 [2] 8B F8 03 44 [2] B9 [4] 89 44 [2] E9 [2] FF FF}
                $snippetE = {FF 74 [2] 8D 54 [2] FF 74 [2] 68 [4] FF 74 [2] 8B 4C [2] E8 [4] 8B 54 [2] 83 C4 10 89 44 [2] 8B F8 03 44 [2] B9 [4] 89 44 [2] E9 [2] FF FF}
                $snippetF = {FF 74 [2] 8D 44 [2] BA [4] FF 74 [2] 8B 4C [2] 50 E8 [4] 8B 54 [2] 8B D8 8B 84 [5] 83 C4 0C 03 C3 89 5C [2] 8B FB 89 44}
                $snippetG = {FF 74 [2] 8B 54 [2] 8D 44 [2] 8B 4C [2] 50 E8 [4] 8B D0 83 C4 0C 8B 44 [2] 8B FA 03 C2 89 54 [2] 89 44}
                $snippetH = {FF 74 [2] 8D 84 [5] 68 [4] 50 FF 74 [2] 8B 54 [2] 8B 4C [2] E8 [4] 8B 94 [5] 83 C4 10 89 84 [5] 8B F8 03 84}
                $snippetI = {FF 74 [2] 8D 8C [5] FF 74 [2] 8B 54 [2] E8 [4] 8B 54 [2] 8B D8 8B 84 [5] 83 C4 0C 03 C3 89 5C [2] 8B FB 89 44 24 74}
                $snippetJ = {FF 74 [2] 8B 4C [2] 8D 44 [2] 50 BA [4] E8 [4] 8B 54 [2] 8B F8 59 89 44 [2] 03 44 [2] 59 89 44 [2] B9 [4] E9}
                $snippetK = {FF 74 [2] FF 74 [2] 8B 54 [2] E8 [4] 8B 54 [2] 83 C4 0C 89 44 [2] 8B F8 03 44 [2] B9 [4] 89 44 [2] E9}
                $snippetL = {FF 74 [2] 8B 54 [2] 8D 4C [2] E8 [4] 59 89 44 [2] 8B F8 03 44 [2] 59 89 44 24 68 B9 [4] E9}
                $snippetM = {FF 74 [2] 8D 84 [3] 00 00 B9 [4] 50 FF 74 [2] FF 74 [2] 8B 94 [3] 00 00 E8 [4] 83 C4 10 89 44 [2] 8B F8 B9 [4] 03 84 [3] 00 00 89 44 [2] E9}
                $snippetN = {FF 74 [2] 8D 44 [2] B9 [4] FF 74 [2] 50 FF 74 [2] 8B 54 [2] E8 [4] 8B 8C [3] 00 00 83 C4 10 03 C8 89 44 [2] 89 4C [2] 8B F8 B9 45 89 77 05 E9}
                $snippetO = {8D 44 [2] B9 [4] 50 FF 74 [2] 8B 54 [2] E8 [4] 8B D0 8B 44 [2] 59 59 03 C2 89 54 [2] 8B FA 89 44 [2] B9 [4] E9}
                $snippetP = {FF 74 [2] 8B 54 [2] 8D 44 [2] 8B 4C [2] 68 [4] 50 E8 [4] 8B D0 83 C4 0C 8B 44 [2] 8B FA 03 C2 89 54 [2] 8B 54 [2] B9 [4] 89 44 [2] E9}
                $snippetQ = {FF 74 [2] BA [4] 8D 4C [2] FF 74 [2] E8 [4] 59 89 84 [3] 00 00 8B F8 03 44 [2] 59 89 44 [2] B9 [4] 81 F9 [4] 74 28 8B 54 [2] E9}
                $snippetR = {8D 44 [2] 50 FF 74 [2] 8B 54 [2] 8B 4C [2] 68 [4] E8 [4] 8B D0 83 C4 0C 8B 44 [2] 8B FA 03 C2 89 54 [2] 8B 54 [2] B9 [4] 89 44 [2] E9}
                $snippetS = {FF 74 [2] 8D 54 [2] FF 74 [2] 8B 4C [2] E8 [4] 8B D0 83 C4 0C 8B 44 [2] 8B FA 03 C2 89 54 [2] 8B 54 [2] B9 [4] 89 44 [2] E9}
                $snippetT = {8B 54 [2] 8D 44 [2] 8B 4C [2] 68 [4] 50 E8 [4] 8B 9C [3] 00 00 8B F8 59 59 03 D8 89 44 [2] 89 5C [2] B9 [4] EB}
                $snippetU = {89 44 [2] 33 D2 8B 44 [2] F7 F1 B9 [4] 89 44 [2] 8D 44 [2] 81 74 [6] C7 44 [6] 81 44 [6] 81 74 [6] FF 74 [2] 50 FF 74 [2] FF 74 [2] 8B 54 [2] E8}
                $snippetV = {81 74 [2] ED BC 9C 00 FF 74 [2] 50 68 [4] FF 74 [2] 8B 54 [2] 8B 4C [2] E8}
            condition:
                any of them
        }
sources:
  - precondition:
      SELECT OS From info() where OS = 'windows'

    query: |
        -- find target files
        LET targetFiles = SELECT FullPath FROM glob(globs=TargetFileGlob)

        -- find velociraptor process
        LET me <= SELECT Pid
                  FROM pslist(pid=getpid())

        -- find all processes and add filters
        LET processes <= SELECT Name AS ProcessName, CommandLine, Pid
                        FROM pslist()
                        WHERE Name =~ ProcessRegex
                            AND format(format="%d", args=Pid) =~ PidRegex
                            AND NOT Pid in me.Pid
                            
        -- scan processes in scope with our DetectionYara
        LET processDetections <= SELECT * FROM foreach(row=processes,
                                query={
                                    SELECT * FROM if(condition=TargetFileGlob="",
                                        then={
                                            SELECT *, ProcessName, CommandLine, Pid, Rule AS YaraRule
                                            FROM proc_yara(pid=Pid, rules=DetectionYara)
                                        })
                                })
                                
        -- scan files in scope with our DetectionYara
        LET fileDetections = SELECT * FROM foreach(row=targetFiles,
                                query={
                                    SELECT * FROM if(condition=TargetFileGlob,
                                        then={
                                            SELECT * FROM switch(
                                                a={ -- yara detection
                                                    SELECT FullPath, Rule AS YaraRule
                                                    FROM yara(files=FullPath, rules=DetectionYara)
                                                },
                                                b={ -- yara miss
                                                    SELECT FullPath, Null AS YaraRule
                                                    FROM targetFiles
                                                })
                                        },
                                        else={ -- no yara detection run
                                            SELECT FullPath, 'N/A' AS YaraRule
                                            FROM targetFiles
                                        })
                             })
                             
        -- return the VAD region size from yara detections for later use
        LET regionDetections = SELECT *
                                FROM foreach(row=processDetections,
                                    query={
                                        SELECT YaraRule, Pid, ProcessName, CommandLine, Address as EmotetBaseOffset, Size AS VADSize
                                        FROM vad(pid=Pid)
                                        WHERE Protection =~ "xrw"
                                })

        -- get data from the whole PE
        LET peData <= SELECT * FROM if(condition=TargetFileGlob,
                                        then={ -- query files
                                            SELECT YaraRule, FullPath,
                                                read_file(filename=FullPath) AS PEData
                                            FROM fileDetections
                                        },
                                        else={ -- query processes
                                            SELECT YaraRule, Pid, ProcessName, CommandLine,
                                                read_file(filename=str(str=Pid), accessor='process', offset=EmotetBaseOffset, length=VADSize) AS PEData
                                            FROM regionDetections
                                        })

        -- return .data section info
        LET sectionInfo <= SELECT *,
                                parse_pe(file=PEData, accessor="data").Sections[2] AS DataSections
                           FROM peData

        -- read the data from .data sections
        LET sectionData <= SELECT *,
                                read_file(filename=PEData, accessor="data", offset=DataSections.FileOffset, length=DataSections.Size) AS EmotetDataSectionData
                           FROM sectionInfo

        -- parse the .data sections to extract the C2 config
        LET parsedDataSection = SELECT *,
                            parse_binary(filename=EmotetDataSectionData, accessor="data", profile='''[
                                ["EmotetC2Config", 0, [
                                        ["Key", 0, "String", {"length": 4, "term":""}],
                                        ["SizeEncoded", 4, "String", {"length": 4, "term":""}],
                                        ["C2List", 8, "String", {"length":"x=> parse_binary(accessor='data',filename=xor(string=x.SizeEncoded, key=x.Key),struct='uint32')", "term":""}]
                                    ]
                                ]
                            ]''', struct="EmotetC2Config") AS EmotetEncodedC2Conf
                          FROM sectionData

        -- format the decrypted configurations
        SELECT * FROM if(condition=TargetFileGlob,
            then= {
                SELECT YaraRule, FullPath,
                    { SELECT ip(netaddr4_be=int(int="0x" + IPAdd)) AS IPAddress, int(int="0x" + Port) AS PortNum FROM parse_records_with_regex(file=format(format="%x", args=xor(string=EmotetEncodedC2Conf.C2List, key=EmotetEncodedC2Conf.Key)), accessor="data", regex='(?P<IPAdd>........)(?P<Port>....)....')} AS C2Info
                FROM parsedDataSection
            },
            else= {
                SELECT YaraRule, Pid, ProcessName, CommandLine,
                    { SELECT ip(netaddr4_be=int(int="0x" + IPAdd)) AS IPAddress, int(int="0x" + Port) AS PortNum FROM parse_records_with_regex(file=format(format="%x", args=xor(string=EmotetEncodedC2Conf.C2List, key=EmotetEncodedC2Conf.Key)), accessor="data", regex='(?P<IPAdd>........)(?P<Port>....)....')} AS C2Info
                FROM parsedDataSection
                GROUP BY Pid
        })
