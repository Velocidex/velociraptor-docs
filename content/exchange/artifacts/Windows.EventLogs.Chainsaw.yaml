name: Windows.EventLogs.Chainsaw
description: |
    
    This artifact leverages Chainsaw to enable usage of Sigma rules (in addition to built-in rules) to faciliate detection within Windows Event Logs.
    
    From the project's description:
    
    "Chainsaw provides a powerful ‘first-response’ capability to quickly identify threats within Windows event logs. 
    It offers a generic and fast method of searching through event logs for keywords, and by identifying threats using built-in detection logic and via support for Sigma detection rules."
    
    https://github.com/countercept/chainsaw
    
author: Wes Lambert - @therealwlambert
tools:
  - name: Chainsaw
    url: https://github.com/countercept/chainsaw/releases/download/v1.0.2/chainsaw_x86_64-pc-windows-msvc.zip
parameters:
  - name: EVTXPath
    default: 'C:\Windows\System32\winevt\Logs'
sources:
  - query: |
        LET Toolzip <= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName="Chainsaw", IsExecutable=FALSE)
        LET TmpDir <= tempdir()
        LET TmpResults <= tempfile()
        LET Results = SELECT * FROM read_file(filenames=TmpResults)
        LET UnzipIt <= SELECT * FROM  unzip(filename=Toolzip.FullPath, output_directory=TmpDir)
        Let SigmaRules <= TmpDir + '/chainsaw/sigma_rules' 
        Let SigmaMapping <= TmpDir + '/chainsaw/mapping_files/sigma-mapping.yml'
        Let ExecCS <= SELECT * FROM execve(argv=[
                        TmpDir + '/chainsaw/chainsaw.exe', 
                        'hunt', EVTXPath, 
                        "--json", TmpResults,
                        "--rules", SigmaRules,
                        "--mapping", SigmaMapping], length=100000)
        
        -- we need to parse the results with regex to account for improperly formatted json.
        LET ParseResults = SELECT parse_json(data=JsonRecord) AS JsonRecord 
           FROM parse_records_with_regex(file=TmpResults, 
              regex='''(?sm)(?P<JsonRecord>(^|\n\{\n).+?\n\}\n)''')
        
        -- output final rows from extracted Record
        SELECT 
            get(member="JsonRecord.event.Event.System.TimeCreated.#attributes.SystemTime") AS EventTime,
            JsonRecord.detection as Detection,
            JsonRecord.event.Event.System.Computer AS Computer, 
            JsonRecord.event.Event.EventData.User AS User,
            JsonRecord.event.Event.System.Channel AS Channel,
            JsonRecord.event.Event.System as SystemData,
            JsonRecord.event.Event.EventData as EventData
        FROM ParseResults
