name: Windows.EventLogs.Chainsaw
description: |
    
    This artifact leverages Chainsaw to enable usage of Sigma rules (in addition to built-in rules) to faciliate detection within Windows Event Logs.
    
    From the project's description:
    
    "Chainsaw provides a powerful ‘first-response’ capability to quickly identify threats within Windows event logs. 
    It offers a generic and fast method of searching through event logs for keywords, and by identifying threats using built-in detection logic and via support for Sigma detection rules."
    
    https://github.com/countercept/chainsaw
    
author: Wes Lambert - @therealwlambert
tools:
  - name: Chainsaw
    url: https://github.com/countercept/chainsaw/releases/download/v1.0.2/chainsaw_x86_64-pc-windows-msvc.zip
parameters:
  - name: EVTXPath
    default: 'C:\Windows\System32\winevt\Logs'
  - name: Length
    description: Size (in bytes) of output that will be returned for a single row.  This value may need to be adjusted depending on the size of your event logs.
    type: int
    default: "10000000"
    
sources:
  - query: |
        LET Toolzip <= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName="Chainsaw", IsExecutable=FALSE)
        LET TmpDir <= tempdir()
        LET TmpResults <= tempfile()
        LET Results = SELECT * FROM read_file(filenames=TmpResults)
        LET UnzipIt <= SELECT * FROM  unzip(filename=Toolzip.FullPath, output_directory=TmpDir)
        Let SigmaRules <= TmpDir + '/chainsaw/sigma_rules' 
        Let SigmaMapping <= TmpDir + '/chainsaw/mapping_files/sigma-mapping.yml'
        Let ExecCS <= SELECT * FROM execve(argv=[
                        TmpDir + '/chainsaw/chainsaw.exe', 
                        'hunt', EVTXPath, 
                        "--json", TmpResults,
                        "--rules", SigmaRules,
                        "--mapping", SigmaMapping], length=Length)
        LET Data = SELECT * FROM foreach(row=Results, query={SELECT parse_json_array(data=Data) AS Content FROM scope()})
        
        SELECT * FROM foreach(row=Data, query={
            SELECT
                get(member="event.Event.System.TimeCreated.#attributes.SystemTime") AS EventTime,
                get(member="detection") AS Detection, 
                get(member="event.Event.System.Computer") AS Computer, 
                get(member="event.Event.System.Channel") AS Channel,
                get(member="event.Event.System.EventID") AS EventID, 
                get(member="event.Event.EventData.User") AS _User,
                get(member="event.Event.System") AS SystemData,
                get(member="event.Event.EventData") AS EventData
            FROM Content    
        })
