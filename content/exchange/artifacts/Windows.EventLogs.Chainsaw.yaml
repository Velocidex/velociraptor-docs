name: Windows.EventLogs.Chainsaw
description: |
    
    This artifact leverages Chainsaw to enable usage of Sigma rules (in addition to built-in logic) to faciliate detection within Windows Event Logs.
    
    From the project's description:
    
    "Chainsaw provides a powerful ‘first-response’ capability to quickly identify threats within Windows event logs. 
    It offers a generic and fast method of searching through event logs for keywords, and by identifying threats using built-in detection logic and via support for Sigma detection rules."
    
    https://github.com/countercept/chainsaw
    
author: Wes Lambert - @therealwlambert
tools:
  - name: Chainsaw
    url: https://github.com/countercept/chainsaw/releases/download/v1.0.0/chainsaw_x86_64-pc-windows-msvc.zip
parameters:
  - name: EVTXPath
    default: 'C:\Windows\System32\winevt\Logs'
sources:
  - query: |
        LET Toolzip = SELECT * FROM Artifact.Generic.Utils.FetchBinary(ToolName="Chainsaw", IsExecutable=FALSE)
        LET TmpDir <= tempdir()
        LET TmpResults <= tempfile()
        LET UnzipIt <= SELECT * FROM  unzip(filename=url(path=Toolzip[0].FullPath).String, output_directory=TmpDir)
        Let SigmaRules <= TmpDir + '/chainsaw/sigma_rules' 
        Let SigmaMapping <= TmpDir + '/chainsaw/mapping_files/sigma-mapping.yml'
        SELECT get(member="Record.event.Event.System.TimeCreated.#attributes.SystemTime") AS EventTime,
               get(member="Record.detection") AS Detection, 
               get(member="Record.event.Event.System.EventID") AS _EventID, 
               get(member="Record.event.Event.System.Computer") AS _Computer, 
               get(member="Record.event.Event.EventData.User") AS _User,
               get(member="Record.event.Event.System.Channel") AS _Channel,
               get(member="Record.event.Event.EventData") AS SystemData,  
               get(member="Record.event.Event.System") AS EventData
        FROM foreach(row={        
          SELECT * FROM execve(argv=[
              TmpDir + '/chainsaw/chainsaw.exe', 
              'hunt', EVTXPath, 
              "--json", TmpResults,
              "--rules", SigmaRules,
              "--mapping", SigmaMapping], length=100000)
        }, query={
           SELECT parse_json(data=Record) AS Record 
           FROM parse_records_with_regex(file=TmpResults, 
              regex='''(?sm)(?P<Record>(^|\n\{\n).+?\n\}\n)''')
        })
