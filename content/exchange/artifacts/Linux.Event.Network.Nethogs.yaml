name: Linux.Event.Network.Nethogs
author: 'Andreas Misje - @misje'
type: CLIENT_EVENT
description: |
  Monitor network use per process using the tool "nethogs". This artifact will
  list all processes that produces (non-local) network traffic on the client,
  leveraging the process tracker, and displays the bytes received and sent in
  bytes per second.

  Note that the tool/package "nethogs" needs to be installed before calling this
  artifact. Set the paramater InstallNethogs to true in order to automatically
  install the package and its dependencies (Debian-based systems only).

  Using techniques like stacking, rare occurances of processes contacting the
  Internet can be spotted. Notebook suggestions give you total traffic overview,
  as well as boilerplate code to plot the traffic for a selected process.

parameters:
  - name: InstallNethogs
    description: Install nethogs using apt-get
    type: bool
    default: false

  - name: ProcessCachePeriod
    description: Number of seconds to cache the process tracker data
    type: int
    default: 10

  - name: ProcessRegex
    description: |
      Only look for processes whose name / command line matches this regex
    type: regex
    default: .+

  - name: PIDRegex
    description: |
      Only look for processes whose PID matches this regex
    type: regex
    default: .+

  - name: UIDRegex
    description: |
      Only look for processes whose owner ID (UID) matches this regex
    type: regex
    default: .+

precondition:
  SELECT * FROM info() where OS = 'linux'

sources:
    - query: |
         LET Hoggers = SELECT Timestamp,
                              Process,
                              PID,
                              UID,
                              parse_float(string=Sent) AS Sent,
                              parse_float(string=Recv) AS Recv
           FROM foreach(
             row={
               SELECT *
               FROM execve(argv=['/usr/sbin/nethogs', '-t'],
                           length=10000,
                           sep='\n\nRefreshing:\n')
             },
             query={
               SELECT timestamp(epoch=now()) AS Timestamp,
                      *
               FROM parse_records_with_regex(
                 accessor='data',
                 file=Stdout,
                 regex='''^\s*(?P<Process>[^\t]+)/(?P<PID>\d+)/(?P<UID>\d+)\t(?P<Sent>[^\t]+)\t(?P<Recv>\S+)''')
               WHERE Process =~ ProcessRegex
                AND PID =~ PIDRegex
                     AND UID =~ UIDRegex
             })

         // Trick for avoiding errors when referencing non-existent variables:
         LET S = scope()

         // Memoize the process list since we will be referencing a lot:
         LET Processes <= memoize(
             name='ps',
             key='PID',
             period=ProcessCachePeriod,
             query={
               SELECT 
                      Pid AS PID,
                      Name,
                      CommandLine,
                      // CurrentDirectory is not always available:
                      S.CurrentDirectory AS CWD,
                      Username,
                      StartTime,
                      // Do not show a silly timestamp parsed from an invalid value:
                      if(
                        condition=EndTime.Unix < 0,
                        then=NULL,
                        else=EndTime) AS EndTime
               FROM process_tracker_pslist()
             })

         LET Result = SELECT *
           FROM foreach(
             row={
               SELECT *
               FROM Hoggers
             },
             query={
               SELECT *
               FROM foreach(
                 row={
                   SELECT 
                          dict(
                            Timestamp=Timestamp,
                            Process=Process,
                            PID=PID,
                            UID=UID,
                            Sent=Sent,
                            /* "left--outer-join" the process data so that output
                               from nethogs without a matching PID still gets logged:
                            */
                            Recv=Recv) + (get(
                              item=Processes,
                              field=PID) || dict(
                              Name=Process,
                              CommandLine=NULL,
                              CWD=NULL,
                              Username=NULL,
                              StartTime=NULL,
                              EndTime=NULL)) AS Contents
                   FROM scope()
                   WHERE Contents
                 },
                 column='Contents')
             })

         // Leverage the InstallDeb utility to do the actual package install:
         LET InstallDeps = SELECT *
           FROM if(
             condition=InstallNethogs,
             then={
               SELECT *
               FROM Artifact.Linux.Utils.InstallDeb(DebName='nethogs')
             })

         SELECT *
         FROM chain(a_install=InstallDeps,
                    b_result=Result)

      notebook:
        - type: vql
          name: Traffic
          template: |
            // Modify these to adjust the time frame:
            // LET StartTime <= '2024-01-01T00:00:00Z'
            // LET EndTimeTime <= '2024-01-01T00:00:00Z'
            /*
            # Network traffic

            {{ $TimeRange := Query "SELECT StartTime, EndTime FROM scope()" | Expand }}
            Network traffic (in bytes per second) between {{ Get $TimeRange "0.StartTime" }}
            and {{ Get $TimeRange "0.EndTime" }}
            */
            SELECT Timestamp,
                   PID,
                   Name,
                   CommandLine,
                   CWD,
                   Username,
                   StartTime,
                   EndTime,
                   humanize(bytes=Sent*1024) AS Sent,
                   humanize(bytes=Recv*1024) AS Recv
            FROM source(start_time=StartTime, end_time=EndTime)

        - type: vql_suggestion
          name: Total traffic
          template: |
            // Modify these to adjust the time frame:
            // LET StartTime <= '2024-01-01T00:00:00Z'
            // LET EndTimeTime <= '2024-01-01T00:00:00Z'
            /*
            # Network traffic summary

            {{ $TimeRange := Query "SELECT StartTime, EndTime FROM scope()" | Expand }}
            This is a **rough estimate** of the total bytes sent and received between
            {{ Get $TimeRange "0.StartTime" }} and {{ Get $TimeRange "0.EndTime" }}.
            Run the non-event artifact Linux.Network.Nethogs in Volume mode for
            an exact measurement.
            */
            LET Summary = SELECT 
                     PID,
                     Name,
                     CommandLine,
                     CWD,
                     Username,
                     StartTime,
                     EndTime,
                     // nethogs -t outputs a data rate every second. Adding these
                     // values give us a rough estimate of the data transferred
                     sum(
                       item=Sent * 1024) AS Sent,
                     sum(
                       item=Recv * 1024) AS Recv
              FROM source(start_time=StartTime,
                          end_time=EndTime)
              GROUP BY PID

            SELECT *,
                   humanize(
                     bytes=Sent) AS Sent,
                   humanize(
                     bytes=Recv) AS Recv,
                   humanize(
                     bytes=sum(
                       item=Recv + Sent)) AS Total
            FROM Summary

        - type: vql_suggestion
          name: Plot traffic for PID
          template: |
            // Modify these to adjust the time frame:
            // LET StartTime <= '2024-01-01T00:00:00Z'
            // LET EndTimeTime <= '2024-01-01T00:00:00Z'
            // The process whose traffic to plot (PID 0 here happens to be "Unknown traffic"
            // from nethogs):
            LET PIDTarget = '0'

            /*
            {{ $Vars := Query "SELECT PIDTarget, StartTime, EndTime FROM scope()" | Expand }}
            # Network traffic for PID {{ Get $Vars "0.PIDTarget" }}

            Network traffic (in bytes per second) between {{ Get $Vars "0.StartTime" }}
            and {{ Get $Vars "0.EndTime" }}
            */
            LET SinglePSStats = SELECT 
                                       Timestamp.Unix AS Timestamp,
                                       Sent * 1024 AS Sent,
                                       Recv * 1024 AS Recv
              FROM source(start_time=StartTime,
                          end_time=EndTime)
              WHERE PID = PIDTarget

            /*
            {{ Query "SELECT * FROM SinglePSStats" | TimeChart }}
            */

            // We do not really need this, but we need to execute some VQL
            // in order for the plot to appear:
            SELECT *
            FROM SinglePSStats