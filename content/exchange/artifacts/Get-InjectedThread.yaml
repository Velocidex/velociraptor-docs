name: Windows.Memory.InjectedThread
author: "Matt Green - @mgreen27"
description: |
   Use Get-InjetedThreads to detect process injections.
   Note: this query is complex powershell. Run it after a scriptblock hunt.

   https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2
   https://gist.github.com/mgreen27/1982aaae37a7afdd047db619bf17c8a1

tools:
 - name: Get-InjectedThread

precondition:
      SELECT OS From info() where OS = 'windows'

sources:
  - query: |
      -- Get the path to the Get-InjectedThread tool
      LET script <= SELECT FullPath
            FROM Artifact.Generic.Utils.FetchBinary(
                ToolName="Get-InjectedThread",
                IsExecutable='N'
                )

      -- Run the tool and relay back the output
      LET results <= SELECT parse_string_with_regex(
                string=Stdout,
                regex=[
                    "^\\s+ProcessName\\s+:\\s+(?P<ProcessName>[\\s|\\S]*)\\s+ProcessId\\s+:"+
                    "\\s+(?P<ProcessId>[\\s|\\d]*)\\s+Path\\s+:" +
                    "\\s+(?P<Path>[\\s|\\S]*)\\s+KernelPath" +
                    "\\s+(?P<KernelPath>[\\s|\\S]*)\\s+CommandLine\\s+:" +
                    "\\s+(?P<CommandLine>[\\s|\\S]*)\\s+PathMismatch\\s+:" +
                    "\\s+(?P<PathMismatch>[\\s|\\S]*)\\s+ThreadId\\s+:" +
                    "\\s+(?P<ThreadId>[\\s|\\d]*)\\s+ThreadStartTime\\s+:" +
                    "\\s+(?P<ThreadStartTime>[\\s|\\S]*)\\s+AllocatedMemoryProtection\\s+:" +
                    "\\s+(?P<AllocatedMemoryProtection>[\\s|\\S]*)\\s+MemoryProtection\\s+:"+
                    "\\s+(?P<MemoryProtection>[\\s|\\S]*)\\s+MemoryState\\s+:" +
                    "\\s+(?P<MemoryState>[\\s|\\S]*)\\s+MemoryType\\s+:"+
                    "\\s+(?P<MemoryType>[\\s|\\S]*)\\s+BasePriority\\s+:" +
                    "\\s+(?P<BasePriority>[\\s|\\d]*)\\s+IsUniqueThreadToken\\s+:" +
                    "\\s+(?P<IsUniqueThreadToken>.*)\\s+Integrity\\s+:"+
                    "\\s+(?P<Integrity>[\\s|\\S]*)\\s+Privilege\\s+:" +
                    "\\s+(?P<Privilege>[\\s|\\S]*)\\s+LogonId\\s+:" +
                    "\\s+(?P<LogonId>[\\s|\\d]*)\\s+SecurityIdentifier\\s+:" +
                    "\\s+(?P<SecurityIdentifier>.*)\\s+UserName\\s+:" +
                    "\\s+(?P<UserName>[\\s|\\S]*)\\s+LogonSessionStartTime\\s+:" +
                    "\\s+(?P<LogonSessionStartTime>.*)\\s+LogonType\\s+:" +
                    "\\s+(?P<LogonType>[\\s|\\S]*)\\s+AuthenticationPackage\\s+:" +
                    "\\s+(?P<AuthenticationPackage>.*)\\s+BaseAddress\\s+:" +
                    "\\s+(?P<BaseAddress>[\\s|\\d]*)\\s+Size\\s+:" +
                    "\\s+(?P<Size>[\\s|\\d]*)\\s+Bytes\\s+:" +
                    "\\s+(?P<Bytes>[\\s\\S]*)\\s+FirstBytes\\s+:" +
                    "\\s+(?P<FirstBytes>[\\s\\S]*)\\s+$"
                ]) as threads,Stdout
            FROM execve(argv=['powershell','-ExecutionPolicy','Unrestricted',script.FullPath[0]])
            WHERE Stdout

      -- Finally output the regex results
      SELECT
            threads.ProcessName AS ProcessName,
            threads.ProcessId AS ProcessId,
            threads.Path AS Path,
            threads.KernelPath AS KernelPath,
            threads.CommandLine AS CommandLine,
            threads.PathMismatch AS PathMismatch,
            threads.ThreadId AS ThreadId,
            threads.ThreadStartTime AS ThreadStartTime,
            threads.AllocatedMemoryProtection AS AllocatedMemoryProtection,
            threads.MemoryProtection AS MemoryProtection,
            threads.MemoryState AS MemoryState,
            threads.MemoryType AS MemoryType,
            threads.BasePriority AS BasePriority,
            threads.IsUniqueThreadToken AS IsUniqueThreadToken,
            threads.Integrity AS Integrity,
            threads.Privilege AS Privilege,
            threads.LogonId AS LogonId,
            threads.SecurityIdentifier AS SecurityIdentifier,
            threads.UserName AS UserName,
            threads.LogonSessionStartTime AS LogonSessionStartTime,
            threads.LogonType AS LogonType,
            threads.AuthenticationPackage AS AuthenticationPackage,
            threads.BaseAddress AS BaseAddress,
            threads.Size AS Size,
            threads.FirstBytes AS FirstBytes
      FROM results

  - name: InjectedSection
    queries:
      - |
        SELECT
            threads.ProcessName AS ProcessName,
            threads.ProcessId AS ProcessId,
            threads.BaseAddress AS BaseAddress,
            regex_replace(source=threads.Bytes,replace='',re='\\s') As Bytes
        FROM results

  - name: RawResults
    queries:
      - |
        SELECT StdOut
        FROM results
