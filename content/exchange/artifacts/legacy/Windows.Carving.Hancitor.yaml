name: Windows.Carving.Hancitor
author: "Eduardo Mattos - @eduardfir"
description: |
    This artifact yara-scans memory or unpacked DLL samples for
    Hancitor trojan detections, decrypting and returning the Build ID
    and C2 list.

    You may select specific file paths or processes to be yara-scanned,
    or simply allow it to yara-scan all running processes (default)

    NOTE:
    This content simply carves the configuration and does not unpack
    files on disk.  That means pointing this artifact as a packed or
    obfuscated file will not obtain the expected results.

type: CLIENT

reference:
  - https://github.com/Yara-Rules/rules/blob/master/malware/MALW_hancitor.yar
  - https://github.com/OALabs/Lab-Notes/blob/main/Hancitor/hancitor.ipynb
  - https://github.com/kevoreilly/CAPEv2/blob/master/modules/processing/parsers/mwcp/Hancitor.py

parameters:
  - name: TargetFileGlob
    default:
  - name: PidRegex
    default: .
  - name: ProcessRegex
    default: .
  - name: DetectionYara
    default: |
        rule win_hancitor_auto {

            meta:
                author = "Felix Bilstein - yara-signator at cocacoding dot com"
                date = "2021-06-10"
                version = "1"
                description = "Detects win.hancitor."
                info = "autogenerated rule brought to you by yara-signator - Adapted for memory detection by Eduardo Mattos"
                tool = "yara-signator v0.6.0"
                signator_config = "callsandjumps;datarefs;binvalue"
                malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.hancitor"
                malpedia_rule_date = "20210604"
                malpedia_hash = "be09d5d71e77373c0f538068be31a2ad4c69cfbd"
                malpedia_version = "20210616"
                malpedia_license = "CC BY-SA 4.0"
                malpedia_sharing = "TLP:WHITE"

            strings:
                $sequence_0 = { 6a00 6a00 6824040000 6a00 6a00 6a00 }
                    // n = 6, score = 800
                    //   6a00                 | push                0
                    //   6a00                 | push                0
                    //   6824040000           | push                0x424
                    //   6a00                 | push                0
                    //   6a00                 | push                0
                    //   6a00                 | push                0

                $sequence_1 = { 68???????? 8d85dcfaffff 50 ff15???????? }
                    // n = 4, score = 600
                    //   68????????           |
                    //   8d85dcfaffff         | lea                 eax, dword ptr [ebp - 0x524]
                    //   50                   | push                eax
                    //   ff15????????         |

                $sequence_2 = { 6800010000 6a40 68???????? e8???????? }
                    // n = 4, score = 600
                    //   6800010000           | push                0x100
                    //   6a40                 | push                0x40
                    //   68????????           |
                    //   e8????????           |

                $sequence_3 = { 750d e8???????? 83c010 a3???????? }
                    // n = 4, score = 500
                    //   750d                 | jne                 0xf
                    //   e8????????           |
                    //   83c010               | add                 eax, 0x10
                    //   a3????????           |

                $sequence_4 = { 6a20 68???????? 68???????? e8???????? 83c410 }
                    // n = 5, score = 500
                    //   6a20                 | push                0x20
                    //   68????????           |
                    //   68????????           |
                    //   e8????????           |
                    //   83c410               | add                 esp, 0x10

                $sequence_5 = { 8955fc 8b45f8 0fb74806 394dfc 7334 6b55fc28 }
                    // n = 6, score = 500
                    //   8955fc               | mov                 dword ptr [ebp - 4], edx
                    //   8b45f8               | mov                 eax, dword ptr [ebp - 8]
                    //   0fb74806             | movzx               ecx, word ptr [eax + 6]
                    //   394dfc               | cmp                 dword ptr [ebp - 4], ecx
                    //   7334                 | jae                 0x36
                    //   6b55fc28             | imul                edx, dword ptr [ebp - 4], 0x28

                $sequence_6 = { e9???????? b801000000 6bc800 8b5508 0fbe040a 8945fc 8b4dfc }
                    // n = 7, score = 500
                    //   e9????????           |
                    //   b801000000           | mov                 eax, 1
                    //   6bc800               | imul                ecx, eax, 0
                    //   8b5508               | mov                 edx, dword ptr [ebp + 8]
                    //   0fbe040a             | movsx               eax, byte ptr [edx + ecx]
                    //   8945fc               | mov                 dword ptr [ebp - 4], eax
                    //   8b4dfc               | mov                 ecx, dword ptr [ebp - 4]

                $sequence_7 = { 85c0 7504 33c0 eb0f 8b450c 50 }
                    // n = 6, score = 500
                    //   85c0                 | test                eax, eax
                    //   7504                 | jne                 6
                    //   33c0                 | xor                 eax, eax
                    //   eb0f                 | jmp                 0x11
                    //   8b450c               | mov                 eax, dword ptr [ebp + 0xc]
                    //   50                   | push                eax

                $sequence_8 = { 83c201 895508 ebaf 33c0 }
                    // n = 4, score = 500
                    //   83c201               | add                 edx, 1
                    //   895508               | mov                 dword ptr [ebp + 8], edx
                    //   ebaf                 | jmp                 0xffffffb1
                    //   33c0                 | xor                 eax, eax

                $sequence_9 = { 55 8bec 81ec58010000 6a44 }
                    // n = 4, score = 500
                    //   55                   | push                ebp
                    //   8bec                 | mov                 ebp, esp
                    //   81ec58010000         | sub                 esp, 0x158
                    //   6a44                 | push                0x44

                $sequence_10 = { 8b4d08 51 ff15???????? 8945fc 8b55fc 8955f4 837dfc00 }
                    // n = 7, score = 500
                    //   8b4d08               | mov                 ecx, dword ptr [ebp + 8]
                    //   51                   | push                ecx
                    //   ff15????????         |
                    //   8945fc               | mov                 dword ptr [ebp - 4], eax
                    //   8b55fc               | mov                 edx, dword ptr [ebp - 4]
                    //   8955f4               | mov                 dword ptr [ebp - 0xc], edx
                    //   837dfc00             | cmp                 dword ptr [ebp - 4], 0

                $sequence_11 = { eb9d 8b45f4 8b4de8 2b4804 }
                    // n = 4, score = 500
                    //   eb9d                 | jmp                 0xffffff9f
                    //   8b45f4               | mov                 eax, dword ptr [ebp - 0xc]
                    //   8b4de8               | mov                 ecx, dword ptr [ebp - 0x18]
                    //   2b4804               | sub                 ecx, dword ptr [eax + 4]

                $sequence_12 = { e8???????? 83c410 83f801 755d }
                    // n = 4, score = 400
                    //   e8????????           |
                    //   83c410               | add                 esp, 0x10
                    //   83f801               | cmp                 eax, 1
                    //   755d                 | jne                 0x5f

                $sequence_13 = { 8bec a1???????? 85c0 740c ff7508 6a00 }
                    // n = 6, score = 400
                    //   8bec                 | mov                 ebp, esp
                    //   a1????????           |
                    //   85c0                 | test                eax, eax
                    //   740c                 | je                  0xe
                    //   ff7508               | push                dword ptr [ebp + 8]
                    //   6a00                 | push                0

                $sequence_14 = { 53 56 57 8b483c 33f6 03c8 6a40 }
                    // n = 7, score = 400
                    //   53                   | push                ebx
                    //   56                   | push                esi
                    //   57                   | push                edi
                    //   8b483c               | mov                 ecx, dword ptr [eax + 0x3c]
                    //   33f6                 | xor                 esi, esi
                    //   03c8                 | add                 ecx, eax
                    //   6a40                 | push                0x40

                $sequence_15 = { 8b4dfc 85c0 7402 8908 8b5518 85d2 }
                    // n = 6, score = 400
                    //   8b4dfc               | mov                 ecx, dword ptr [ebp - 4]
                    //   85c0                 | test                eax, eax
                    //   7402                 | je                  4
                    //   8908                 | mov                 dword ptr [eax], ecx
                    //   8b5518               | mov                 edx, dword ptr [ebp + 0x18]
                    //   85d2                 | test                edx, edx

                $sequence_16 = { 55 8bec 8b4d08 6a00 6a01 51 }
                    // n = 6, score = 400
                    //   55                   | push                ebp
                    //   8bec                 | mov                 ebp, esp
                    //   8b4d08               | mov                 ecx, dword ptr [ebp + 8]
                    //   6a00                 | push                0
                    //   6a01                 | push                1
                    //   51                   | push                ecx

                $sequence_17 = { 41 83f941 72ed 881d???????? c705????????01000000 }
                    // n = 5, score = 400
                    //   41                   | inc                 ecx
                    //   83f941               | cmp                 ecx, 0x41
                    //   72ed                 | jb                  0xffffffef
                    //   881d????????         |
                    //   c705????????01000000     |

                $sequence_18 = { 57 ff15???????? 8bd8 83fbff 7509 6a00 57 }
                    // n = 7, score = 400
                    //   57                   | push                edi
                    //   ff15????????         |
                    //   8bd8                 | mov                 ebx, eax
                    //   83fbff               | cmp                 ebx, -1
                    //   7509                 | jne                 0xb
                    //   6a00                 | push                0
                    //   57                   | push                edi

                $sequence_19 = { 7502 5d c3 ff7508 6a00 50 ff15???????? }
                    // n = 7, score = 400
                    //   7502                 | jne                 4
                    //   5d                   | pop                 ebp
                    //   c3                   | ret
                    //   ff7508               | push                dword ptr [ebp + 8]
                    //   6a00                 | push                0
                    //   50                   | push                eax
                    //   ff15????????         |

                $sequence_20 = { a3???????? 8b45a0 05c8d45566 7440 }
                    // n = 4, score = 100
                    //   a3????????           |
                    //   8b45a0               | mov                 eax, dword ptr [ebp - 0x60]
                    //   05c8d45566           | add                 eax, 0x6655d4c8
                    //   7440                 | je                  0x42

                $sequence_21 = { a1???????? 83c052 8945cc 8365e400 }
                    // n = 4, score = 100
                    //   a1????????           |
                    //   83c052               | add                 eax, 0x52
                    //   8945cc               | mov                 dword ptr [ebp - 0x34], eax
                    //   8365e400             | and                 dword ptr [ebp - 0x1c], 0

                $sequence_22 = { 0345cc 8945c4 8b45cc 0345e4 }
                    // n = 4, score = 100
                    //   0345cc               | add                 eax, dword ptr [ebp - 0x34]
                    //   8945c4               | mov                 dword ptr [ebp - 0x3c], eax
                    //   8b45cc               | mov                 eax, dword ptr [ebp - 0x34]
                    //   0345e4               | add                 eax, dword ptr [ebp - 0x1c]

                $sequence_23 = { c645f301 0fb645f3 85c0 7476 a1???????? 83c044 a3???????? }
                    // n = 7, score = 100
                    //   c645f301             | mov                 byte ptr [ebp - 0xd], 1
                    //   0fb645f3             | movzx               eax, byte ptr [ebp - 0xd]
                    //   85c0                 | test                eax, eax
                    //   7476                 | je                  0x78
                    //   a1????????           |
                    //   83c044               | add                 eax, 0x44
                    //   a3????????           |

                $sequence_24 = { 0305???????? 8945cc 8b45e4 48 8945e4 894df4 }
                    // n = 6, score = 100
                    //   0305????????         |
                    //   8945cc               | mov                 dword ptr [ebp - 0x34], eax
                    //   8b45e4               | mov                 eax, dword ptr [ebp - 0x1c]
                    //   48                   | dec                 eax
                    //   8945e4               | mov                 dword ptr [ebp - 0x1c], eax
                    //   894df4               | mov                 dword ptr [ebp - 0xc], ecx

                $sequence_25 = { 40 8945b8 837db80a 0f8d7f010000 8b45c4 0345cc 8945c4 }
                    // n = 7, score = 100
                    //   40                   | inc                 eax
                    //   8945b8               | mov                 dword ptr [ebp - 0x48], eax
                    //   837db80a             | cmp                 dword ptr [ebp - 0x48], 0xa
                    //   0f8d7f010000         | jge                 0x185
                    //   8b45c4               | mov                 eax, dword ptr [ebp - 0x3c]
                    //   0345cc               | add                 eax, dword ptr [ebp - 0x34]
                    //   8945c4               | mov                 dword ptr [ebp - 0x3c], eax

                $sequence_26 = { 0f8ced000000 a1???????? a3???????? b9382baa99 8d45fc 50 6a00 }
                    // n = 7, score = 100
                    //   0f8ced000000         | jl                  0xf3
                    //   a1????????           |
                    //   a3????????           |
                    //   b9382baa99           | mov                 ecx, 0x99aa2b38
                    //   8d45fc               | lea                 eax, dword ptr [ebp - 4]
                    //   50                   | push                eax
                    //   6a00                 | push                0

                $sequence_27 = { 8b45a0 05c8d45566 0f8482000000 c645f301 }
                    // n = 4, score = 100
                    //   8b45a0               | mov                 eax, dword ptr [ebp - 0x60]
                    //   05c8d45566           | add                 eax, 0x6655d4c8
                    //   0f8482000000         | je                  0x88
                    //   c645f301             | mov                 byte ptr [ebp - 0xd], 1

            condition:
                7 of them
        }
sources:
  - precondition:
      SELECT OS From info() where OS = 'windows'

    query: |
        -- find target files
        LET targetFiles = SELECT FullPath FROM glob(globs=TargetFileGlob)

        -- find velociraptor process
        LET me <= SELECT Pid
                  FROM pslist(pid=getpid())

        -- find all processes and add filters
        LET processes <= SELECT Name AS ProcessName, CommandLine, Pid
                        FROM pslist()
                        WHERE Name =~ ProcessRegex
                            AND format(format="%d", args=Pid) =~ PidRegex
                            AND NOT Pid in me.Pid

        -- scan processes in scope with our DetectionYara
        LET processDetections <= SELECT * FROM foreach(row=processes,
                                query={
                                    SELECT * FROM if(condition=TargetFileGlob="",
                                        then={
                                            SELECT *, ProcessName, CommandLine, Pid, Rule AS YaraRule
                                            FROM proc_yara(pid=Pid, rules=DetectionYara)
                                        })
                                })

        -- scan files in scope with our DetectionYara
        LET fileDetections = SELECT * FROM foreach(row=targetFiles,
                                query={
                                    SELECT * FROM if(condition=TargetFileGlob,
                                        then={
                                            SELECT * FROM switch(
                                                a={ -- yara detection
                                                    SELECT FullPath, Rule AS YaraRule
                                                    FROM yara(files=FullPath, rules=DetectionYara)
                                                },
                                                b={ -- yara miss
                                                    SELECT FullPath, Null AS YaraRule
                                                    FROM targetFiles
                                                })
                                        },
                                        else={ -- no yara detection run
                                            SELECT FullPath, 'N/A' AS YaraRule
                                            FROM targetFiles
                                        })
                             })
        -- return the VAD region size from yara detections for later use
        LET regionDetections = SELECT *
                                FROM foreach(row=processDetections,
                                    query={
                                        SELECT YaraRule, Pid, ProcessName, CommandLine, Address as HancitorBaseOffset, Size AS VADSize
                                        FROM vad(pid=Pid)
                                        WHERE Protection =~ "xrw"
                                            AND Size > 4096 and Size < 106496
                                })

        -- get data from the whole PE
        LET peData <= SELECT * FROM if(condition=TargetFileGlob,
                                        then={ -- query files
                                            SELECT YaraRule, FullPath,
                                                read_file(filename=FullPath) AS PEData
                                            FROM fileDetections
                                        },
                                        else={ -- query processes
                                            SELECT YaraRule, Pid, ProcessName, CommandLine,
                                                read_file(filename=str(str=Pid), accessor='process', offset=HancitorBaseOffset, length=VADSize) AS PEData
                                            FROM regionDetections
                                        })

        -- return .data section info
        LET sectionInfo <= SELECT *,
                                    parse_pe(file=PEData, accessor="data").Sections[2] AS SectionData
                                FROM peData
                                WHERE NOT SectionData = null

        -- read the data from .data sections
        LET dataSectionData <= SELECT *,
                                SectionData.RVA AS HancitorDataRVA,
                                read_file(filename=PEData, accessor="data", offset=SectionData.FileOffset, length=SectionData.Size) AS HancitorDataSectionData
                           FROM sectionInfo

        -- parse the .data sections to extract the encrypted config
        LET parsedDataSection <= SELECT *,
                            parse_binary(filename=HancitorDataSectionData, accessor="data", profile='''[
                                ["HancitorData", 0, [
                                        ["KeyValue", 16, "String", {"length": 8, "term":""}],
                                        ["HancitorEncodedConfig", "x=> 24", "String", {"length": x=> 8192, "term":"", "max_length": x=> 8192}]
                                    ]
                                ]
                            ]''', struct="HancitorData") AS HancitorData
                          FROM dataSectionData

        -- format/calculate rc4 key
        LET keyConfigPairs <= SELECT *,
                                parse_string_with_regex(string=hash(path=HancitorData.KeyValue, accessor="data").SHA1, regex="(..........).+").g1 AS SubStringRC4Key,
                                HancitorData.HancitorEncodedConfig AS HancitorEncodedConfig
                              FROM parsedDataSection

        -- rc4 decrypt the configurations
        LET decryptedConfig <= SELECT *,
                                parse_string_with_regex(string=crypto_rc4(key=unhex(string=SubStringRC4Key), string=HancitorEncodedConfig), regex="(?P<BUILD>.+)\\b\\0+(?P<URLs>.+)\\b\\|\\0+") AS HancitorDecodedConfig
                             FROM keyConfigPairs

        -- format the decrypted configurations
        SELECT * FROM if(condition=TargetFileGlob,
            then= {
                SELECT YaraRule, FullPath,
                    HancitorDecodedConfig.BUILD AS HancitorBuild,
                    split(string=HancitorDecodedConfig.URLs, sep="\\|" ) AS HancitorC2
                FROM decryptedConfig
            },
            else= {
                SELECT YaraRule, Pid, ProcessName, CommandLine,
                    HancitorDecodedConfig.BUILD AS HancitorBuild,
                    split(string=HancitorDecodedConfig.URLs, sep="\\|" ) AS HancitorC2
                FROM decryptedConfig
        })
