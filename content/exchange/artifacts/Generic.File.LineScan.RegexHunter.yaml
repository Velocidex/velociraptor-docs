name: Generic.File.LineScan.RegexHunter
author: Kaizar Lehri
description: |
  A versatile artifact that scans the contents of text files line by line and reports 
  any line that matches a user-supplied regular expression.
  This artifact is designed for flexible content inspection across any operating system—
  Linux, Windows. It can be used to detect indicators of compromise, identify 
  suspicious commands in configuration files, or validate specific text patterns.

  The user can supply one or more glob paths and a custom regex pattern. 
  Matching lines are returned with their file names, and—if enabled—the corresponding 
  files can be uploaded for further analysis.

  Includes:
  - **WhitelistPathRegex** → exclude specific file paths from scanning.
  - **WhitelistLineRegex** → ignore specific line matches even if they match the main detection regex.

type: CLIENT

parameters:
  - name: PathGlobs
    type: csv
    description: "List of glob paths to search."
    default: |
      Glob
      /etc/crontab
      /etc/cron.d/*
      /etc/cron.daily/*
      /etc/cron.hourly/*
      /etc/cron.weekly/*
      /etc/cron.monthly/*
      /var/spool/cron/*
      /var/spool/cron/crontabs/*

  - name: SuspiciousRegex
    type: regex
    description: "Regex pattern to detect potentially suspicious commands or payloads."
    default: "(curl|wget|bash|/tmp/|/var/tmp/|/dev/shm|base64|eval|python|perl|crontab -e|@reboot)"

  - name: WhitelistPathRegex
    type: regex
    description: |
      Regex pattern to exclude entire files based on path.
      Files whose OSPath matches this regex will not be scanned.
    default: "/etc/cron.daily/apt-compat"

  - name: WhitelistLineRegex
    type: regex
    description: |
      Optional regex pattern to exclude specific lines (known benign content).
      If empty, line-level whitelisting is skipped.
    default: ""

  - name: UploadMatches
    type: bool
    description: "If true, upload files that contain regex matches."
    default: false

sources:
  - query: |
      -- Step 1: Gather all candidate files
      LET found_files = SELECT OSPath, Name, Size
      FROM glob(globs=PathGlobs.Glob, nosymlink=true)
      WHERE NOT IsDir AND NOT IsLink

      -- Step 2: Skip files whose paths match WhitelistPathRegex
      LET filtered_files = SELECT OSPath, Name, Size
      FROM found_files
      WHERE NOT OSPath =~ WhitelistPathRegex

      -- Step 3: Scan each remaining file line-by-line for suspicious matches,
      -- applying optional line-level whitelist in a single pass
      LET regex_hits = SELECT *
      FROM foreach(
        row={ SELECT OSPath FROM filtered_files },
        query={
          SELECT
            OSPath AS FileName,
            Line AS LineMatch
          FROM parse_lines(filename=OSPath)
          WHERE Line =~ SuspiciousRegex
            AND if(
              condition=WhitelistLineRegex,
              then=NOT (Line =~ WhitelistLineRegex),
              else=true
            )
        }
      )

      -- Step 4: Optionally upload matching files
      LET upload_hits = SELECT
        FileName,
        LineMatch,
        upload(file=FileName, name=FileName) AS UploadedFile
      FROM regex_hits

      -- Step 5: Return results with or without upload
      SELECT *
      FROM if(
        condition=UploadMatches,
        then=upload_hits,
        else=regex_hits
      )
