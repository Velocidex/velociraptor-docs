name: Windows.Detection.Honeyfiles
author: Zane Gittins & Matt Green (@mgreen27).
description: |
    ## Description
    This artifact deploys honeyfiles according to the Honeyfiles CSV parameter. It then monitors access to these files using the NT Kernel Logger etw provider.  The process tracker must be enabled, we use this to enrich etw events.

    ## Parameters
    * PathGlob - Where to generate the honeyfile, supports single * globs.
    * Enabled - Only generate the honeyfile if this is set to 'Y'
    * HexString - The starting magic bytes of the honeyfile. 
    * MinSize,MaxSize - The size of the honeyfile will be a random value between MinSize and MaxSize.
   
# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT
type: CLIENT_EVENT

parameters:
  - name: Honeyfiles
    description: The honeyfiles to generate and monitor.
    type: csv
    default: |
        TargetPath,Enabled,MagicBytes,MinSize,MaxSize
        "%USERPROFILE%\Documents\KeePass\KeePass.kdbx",Y,03D9A29A67FB4BB5,10249,20899
        "%USERPROFILE%\AppData\Local\KeePass\KeePass.config.xml",Y,3C3F786D6C,512,1024
        "%USERPROFILE%\AppData\Local\LastPass\lastpass.conf",Y,3C3F786D6C,512,1024
        "%USERPROFILE%\AppData\Roaming\LastPass\loginState.xml",Y,3C3F786D6C,512,1024
        "%USERPROFILE%\AppData\Roaming\WinSCP\WinSCP.ini",Y,5B436F6E66696775726174696F6E5D,512,1024
        "%USERPROFILE%\.aws\credentials",Y,5B64656661756C745D,512,2048
        "%USERPROFILE%\.aws\config",Y,5B64656661756C745D,512,2048
        "%USERPROFILE%\.ssh\my_id_rsa",Y,2D2D2D2D2D424547494E205253412050524956415445204B45592D2D2D2D2D,1024,4096
        "%USERPROFILE%\.gcloud\credentials.db",Y,5343514C697465,512,2048
        "%USERPROFILE%\.azure\azureProfile.json",Y,7B0D0A,512,2048
  - name: ProcessExceptionsRegex
    description: Except these processes from detections when they access honeyfiles.
    type: string
    default: "SearchProtocolHost.exe"
  - name: HoneyUserRegex
    description: User name regex that will be used to host honeyfiles.
    type: string
    default: "."
sources:
  - precondition:
      SELECT OS From info() where OS = 'windows'

    query: |
       // Capture start time + 30 second offset to avoid reading events from setting up the honeyfiles.
       LET StartTime <= timestamp(
           epoch=(now() + 30))
       LET WatchFiles <= to_dict(
           item={
             SELECT 
                    TargetPath AS _key,
                    IsHoneyFile AS _value
             FROM Artifact.Windows.Detetion.Honeyfiles.Manage(
               Honeyfiles=Honeyfiles,
               DeployHoneyFiles=True,
               HoneyUserRegex=HoneyUserRegex)
           })
       SELECT *
       FROM delay(
         query={
           SELECT 
                  timestamp(
                    string=System.TimeStamp) AS Timestamp,
                  get(
                    item=WatchFiles,
                    field=EventData.FileName) AS IsHoneyFile,
                  EventData.FileName AS FileName,
                  process_tracker_get(
                    id=System.ProcessID).Data AS ProcInfo,
                  join(
                    array=process_tracker_callchain(
                      id=System.ProcessID).Data.Name,
                    sep="->") AS CallChain,
                  EventData.IoFlags AS IoFlags
           FROM watch_etw(guid='kernel',
                          kernel_tracer_type=['file'])
           WHERE System.KernelEventType = "ReadFile"
            AND IsHoneyFile != NULL
                 AND Timestamp > StartTime
                      AND NOT ProcInfo.Exe =~ ProcessExceptionsRegex
         },
         delay=1)
