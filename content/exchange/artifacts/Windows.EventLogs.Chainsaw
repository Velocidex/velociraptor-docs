name: Windows.EventLogs.Chainsaw
description: |
    
    This artifact leverages Chainsaw to enable usage of Sigma rules to faciliate detection within Windows Event Logs.
    
    From the project's description:
    
    "Chainsaw provides a powerful ‘first-response’ capability to quickly identify threats within Windows event logs. 
    It offers a generic and fast method of searching through event logs for keywords, and by identifying threats using built-in detection logic and via support for Sigma detection rules."
    
    https://github.com/countercept/chainsaw
    
    
author: Wes Lambert - @therealwlambert

tools:
  - name: Chainsaw
    url: https://github.com/countercept/chainsaw/releases/download/v1.0.0/chainsaw_x86_64-pc-windows-msvc.zip
parameters:
  - name: EVTXPath
    default: C:\Windows\System32\winevt\Logs\*.evtx
sources:
  - query: |
        // Download Chainsaw
        LET Toolzip = SELECT * FROM Artifact.Generic.Utils.FetchBinary(
            ToolName="Chainsaw", IsExecutable=FALSE)
        //Create temp directory
        LET TmpDir <= tempdir()
        //Create tempfile for JSON results
        LET TmpResults <= tempfile()
        //Read in results file when ready
        LET Results = SELECT * FROM read_file(filenames=TmpResults)
        //Unzip into temp dir
        LET UnzipIt <= SELECT * FROM  unzip(filename=url(path=Toolzip[0].FullPath).String, output_directory=TmpDir)
        //Sigma rules
        Let SigmaRules <= TmpDir + '/chainsaw/sigma_rules' 
        //Mapping file(s) for Sigma
        Let SigmaMapping <= TmpDir + '/chainsaw/mapping_files/sigma-mapping.yml'
        //Chainsaw hunt -- Example: ./chainsaw hunt evtx_attack_samples/ --json results.json --rules sigma_rules/ --mapping mapping_files/sigma-mapping.yml
        LET ExecCS = TmpDir + '/chainsaw/chainsaw hunt ' + EVTXPath + ' --json ' + TmpResults + ' --rules ' + SigmaRules + ' --mapping ' + SigmaMapping
        //Execute Chainsaw and cleanup for JSON
        LET ExecCmd <= ExecCS + '; [IO.Directory]::SetCurrentDirectory((Convert-Path (Get-Location -PSProvider FileSystem)));$filetxt = [IO.File]::ReadAllText("' + TmpResults + '"); $filetxt = ($filetxt -replace "(?ms)^}\n{", "},`r`n{");Set-Content -Path "' + TmpResults + '" -Value $filetxt; "[" + (Get-Content ' + TmpResults + ' -Raw) | Set-Content ' + TmpResults + '; (Get-Content ' + TmpResults + ' -Raw) + "]" | Set-Content ' + TmpResults + ';'
        LET ExecIt <= SELECT * from Artifact.Windows.System.PowerShell(Command=ExecCmd)
        LET Data = SELECT * FROM foreach(row=Results, query={SELECT parse_json_array(data=Data) AS Content FROM scope()})
        LET Matches = SELECT * FROM foreach(row=Data, query={ 
            SELECT
                get(member="event.Event.System.TimeCreated.#attributes.SystemTime") AS EventTime,
                get(member="detection") AS Detection, 
                get(member="event.Event.System.EventID") AS _EventID, 
                get(member="event.Event.System.Computer") AS _Computer, 
                get(member="event.Event.EventData.User") AS _User,
                get(member="event.Event.System.Channel") AS _Channel,
                get(member="event.Event.EventData") AS SystemData,  
                get(member="event.Event.System") AS EventData
            FROM Content
        })
        SELECT * FROM Matches
