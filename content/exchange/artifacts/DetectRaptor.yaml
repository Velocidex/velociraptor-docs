name: Server.Import.DetectRaptor
author: Matt Green - @mgreen27
description: |
   DetectRaptor is a collection of publicly availible Velociraptor detection content. 
   Most content is managed by a series of csv files and artifacts are automatically updated.
   
   This artifact will import the latest DetectRaptor bundle into the current server.
   
   A SHA1 of the imported DetectRaptor collection is stored in server metadata 
   for versioning.  
   A SHA1 of each artifact is generated on import to enable versioning confirmation.
   
   Last updated: 2023-09-09.   

   Current artifacts include:  
   
   - Windows.Detection.Amcache
   - Windows.Detection.Applications
   - Windows.Detection.BinaryRename
   - Windows.Detection.Evtx
   - Windows.Detection.HijackLibsEnv
   - Windows.Detection.HijackLibsMFT
   - Windows.Detection.LolDrivers
   - Windows.Detection.MFT
   - Windows.Detection.NamedPipes
   - Windows.Detection.Powershell.ISEAutoSave
   - Windows.Detection.Powershell.PSReadline
   - Windows.Detection.Webhistory
   - Windows.Detection.ZoneIdentifier
   - Server.StartHunts

reference:
  - https://github.com/mgreen27/DetectRaptor
  - https://github.com/svch0stz/velociraptor-detections
  - https://github.com/SigmaHQ/sigma

type: SERVER

required_permissions:
- SERVER_ADMIN

parameters:
   - name: TargetURL
     default: https://github.com/mgreen27/DetectRaptor/releases/download/DetectRaptor/DetectRaptorVQL.zip
   - name: Prefix
     default: DetectRaptor.
     description: Prefix to append to all imported artifacts.
   - name: UpdateAnyway
     type: bool
     description: Import all artifacts even if previous version matches

sources:
  - query: |
      -- get content return a row if new content or UpdateAnyway
      LET get_content = SELECT Content as ZipPath, 
            hash(path=Content,hashselect='SHA1').SHA1 as ZipSHA1 
        FROM http_client(remove_last=TRUE, 
            tempfile_extension=".zip", url=TargetURL)
        WHERE NOT if(condition= UpdateAnyway,
                    then= False,
                    else= ZipSHA1 = server_metadata().DetectRaptorSHA )
                
      -- extract and set artifacts
      LET set_artifacts <= SELECT 
            artifact_set(prefix=Prefix, definition=Definition) AS Definition,
            SHA1,
            ZipSHA1
        FROM foreach(row=get_content, 
            query={
              SELECT read_file(accessor="zip", filename=OSPath) AS Definition,
                hash(path=OSPath,accessor='zip',hashselect='SHA1').SHA1 as SHA1,
                ZipSHA1
              FROM glob(
                 globs='/**/*.yaml',
                 root=pathspec(
                    DelegateAccessor="auto",
                    DelegatePath=ZipPath),
                 accessor="zip")
            })
            
      -- Add new sha1 if set_artifacts
      LET add_new_sha1 <= SELECT ZipSHA1,
            server_set_metadata(metadata=dict(DetectRaptorSHA=ZipSHA1)) as SetSha1
        FROM set_artifacts
        WHERE log(level='INFO',
                message='Server MetaData added: DetectRaptorSHA=%v',
                args=ZipSHA1 )
        GROUP BY ZipSHA1

      SELECT Definition.name AS Name,
        Definition.description AS Description,
        Definition.author AS Author,
        SHA1
      FROM set_artifacts
