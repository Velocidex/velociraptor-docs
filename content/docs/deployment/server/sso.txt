
## When to use this deployment mode

This type of deployment is most appropriate for scenarios where a cloud-based
server is required. Clients will connect to the server (Frontend port) via the
internet.


## Configuring Google OAuth SSO

In the previous sections you set up Velociraptor's GUI over
SSL. Next, you need to create users and assign them
passwords manually. The trouble with user account management is that
we cannot enforce 2-factor authentication, password policies,
or any of the usual enterprise requirements for user account
management. Users who have to remember too many passwords may be inclined to use an easily guessable password.

Most enterprise systems require an SSO mechanism to manage user
accounts and passwords. Manual user account management simply does not
scale.

Velociraptor supports a number of choices of authentication providers:

1. **Basic Authentication**: this stores usernames and passwords in
   Velociraptor's own datastore.
2. **OAuth2**: these providers authenticate users via OAuth2 (e.g. Google, Azure or GitHub)
3. **OIDC**: uses the Open ID Connect protocol to support many IAM providers (e.g. Okta)

### OAuth Identity management

In the following sections, we demonstrate how Velociraptor can be configured to
use Google's OAuth mechanism to verify a user's identity. This
requires a user to authenticate to Google via their usual method -
if their account requires 2 factor authentication, then users need to
log in this way.

Once the user authenticates to Google, they are redirected back into
the Velociraptor application with a token that allows the application
to request information about the user (for example, the username or
email address).


{{% notice note "What is OAuth2 used for?" %}}

OAuth is an authentication protocol. This means Velociraptor can be
pretty confident the user is who they claim they are. However, this does not
automatically grant them access to the application.  A Velociraptor
administrator must still manually grant user access before a user can
log in.

{{% /notice %}}

Before using Google to authenticate, you need to register your
Velociraptor deployment as an OAuth App with Google.

### Registering Velociraptor as an OAuth application

Register Velociraptor as an OAuth app
by accessing the Google cloud console at
https://console.cloud.google.com. You must set up a cloud
account and create a cloud project even if you do not host
your server on Google's Cloud Platform.

Your ultimate goal is to obtain OAuth credentials to give our
Velociraptor app, there are a few things set up
first. Navigate to `APIs and Services` in the GCP console and select
`Credentials` and the `OAuth Consent Screen` tab.

![Creating application credentials](sso11.png)

Further down you need to provide an authorized domain

![Authorizing domains](sso12.png)

In order to add an Authorized domain you need to *verify it*. Google's
help pages explain it further:

{{% notice tip %}}

**Authorized domains**: To protect you and your users, Google
   restricts your OAuth 2.0 application to using Authorized
   Domains. If you have verified the domain with Google, you can use
   any Top Private Domain as an Authorized Domain.

{{% /notice %}}

In this example we assume that you purchased your domain with Google
domains which makes this step easier since it is already verified.

We can go back to the cloud console and `Create Credentials/OAuth
client ID`:

![Creating OAuth2 client ID](sso15.png)

Now select `Web App` and set the `Authorized redirect URIs` to
`https://<Your Domain Name>/auth/google/callback` -
This is the URL that successful OAuth authentication will redirect
to. Velociraptor accepts this redirect and uses it to log the user on.

![Specifying the redirect URL](sso16.png)

If all goes well the Google cloud console will give us a client ID and
a client secret.



### Grant Access to Velociraptor

The OAuth flow ensures the user's identity is correct but does not
give them permission to log into Velociraptor. Note that having an
OAuth enabled application on the web allows anyone with a Google
identity to authenticate to the application but the user is still
required to be authorized explicitly. If a user is rejected, we can
see the following in the Audit logs:

```json
   {
     "level": "error",
     "method": "GET",
     "msg": "User rejected by GUI",
     "remote": "192.168.0.10:40570",
     "time": "2018-12-21T18:17:47+10:00",
     "user": "mike@velocidex.com"
   }
```

In order to authorize the user we must explicitly add them using the
Velociraptor Admin tool:

```text
$ velociraptor --config ~/server.config.yaml user add mike@velocidex.com
Authentication will occur via Google - therefore no password needs to be set.
```
Note that this time, Velociraptor does not ask for a password at all,
since authentication occurs using Google's SSO. If we hit refresh in
the browser we should be able to see the Velociraptor application dashboard.

We can see that the logged in user is authenticated by Google, and we
can also see the user's Google avatar at the top right for some more
eye candy :-).

![Velociraptor Dashboard](dashboard.png)


{{% notice note %}}

Velociraptor will retain its OAuth token for 24 hours. Each day users
will need to re-grant OAuth credentials. Therefore revoking a user
from the Google Admin console may take a full day to take effect. To
remove access sooner you should simply remove all permissions from the
user using `velociraptor user grant '{}'`.

{{% /notice %}}
