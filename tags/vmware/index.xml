<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VMWare on Velociraptor - Digging deeper!</title><link>https://docs.velociraptor.app/tags/vmware/</link><description>Recent content in VMWare on Velociraptor - Digging deeper!</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://docs.velociraptor.app/tags/vmware/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux.Detection.vRealizeLogInsightExploitation</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/linux.detection.vrealizeloginsightexploitation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/linux.detection.vrealizeloginsightexploitation/</guid><description>&lt;p>Checks for exploitation of vRealize Log Insight VMSA-2023-0001 exploitation
artifacts. The presence of a path traversal in the FileName field
is evidence of compromise. There is still a path to exploitation without
leveraging the path traversal vuln. Any attempt to run
REMOTE_PAK_DOWNLOAD_COMMAND from a non-vRealize server is malicious.
#VMWare #vRealize #exploit&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Detection.vRealizeLogInsightExploitation
author: ACEResponder.com
description: |
 Checks for exploitation of vRealize Log Insight VMSA-2023-0001 exploitation 
 artifacts. The presence of a path traversal in the FileName field
 is evidence of compromise. There is still a path to exploitation without
 leveraging the path traversal vuln. Any attempt to run
 REMOTE_PAK_DOWNLOAD_COMMAND from a non-vRealize server is malicious.
 #VMWare #vRealize #exploit

# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT
type: CLIENT

sources:
 - precondition:
 SELECT OS From info() where OS =~ 'linux'

 query: |
 -- Get runtime.log
 Let lines = SELECT split(string=Data,sep='\\r?\\n|\\r') as List
 FROM read_file(filenames="/var/log/loginsight/runtime.log")
 -- Get REMOTE_PAK_DOWNLOAD_COMMAND matches.

 LET results = SELECT * FROM foreach(row=lines,
 query={
 SELECT parse_string_with_regex(
 string=_value,
 regex=[
 "^\\[(?P&amp;lt;Time&amp;gt;[^\\]]+)\\].*REMOTE_PAK_DOWNLOAD_COMMAND.*requestUrl:(?P&amp;lt;RequestUrl&amp;gt;[^,]+), fileName:(?P&amp;lt;FileName&amp;gt;[^\)]+).*$"
 ]) as Record
 FROM foreach(row=List)
 WHERE _value
 AND _value =~ ".*REMOTE_PAK_DOWNLOAD_COMMAND.*"
 })
 -- output rows
 SELECT 
 Record.Time AS Time,
 Record.RequestUrl AS RequestUrl,
 Record.FileName AS FileName
 FROM results

&lt;/code>&lt;/pre></description></item></channel></rss>