[
    {
        "name": "add_client_monitoring",
        "description": "Adds a new artifact to the client monitoring table.",
        "type": "Function",
        "args": [
            {
                "name": "artifact",
                "type": "string",
                "description": "The name of the artifact to add",
                "required": true
            },
            {
                "name": "parameters",
                "type": "LazyExpr",
                "description": "A dict of artifact parameters"
            },
            {
                "name": "label",
                "type": "string",
                "description": "Add this artifact to this label group (default all)"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "COLLECT_CLIENT"
        }
    },
    {
        "name": "add_server_monitoring",
        "description": "Adds a new artifact to the server monitoring table.",
        "type": "Function",
        "args": [
            {
                "name": "artifact",
                "type": "string",
                "description": "The name of the artifact to add",
                "required": true
            },
            {
                "name": "parameters",
                "type": "LazyExpr",
                "description": "A dict of artifact parameters"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "COLLECT_SERVER"
        }
    },
    {
        "name": "alert",
        "description": "Generate an alert message.",
        "type": "Function",
        "version": 2,
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "Name of the alert.",
                "required": true
            },
            {
                "name": "dedup",
                "type": "int64",
                "description": "Suppress same message in this many seconds (default 7200 sec or 2 hours)."
            },
            {
                "name": "condition",
                "type": "Any",
                "description": "If specified we ignore the alert unless the condition is true"
            }
        ]
    },
    {
        "name": "all",
        "description": "Returns TRUE if all items are true.",
        "type": "Function",
        "args": [
            {
                "name": "items",
                "type": "Any",
                "description": "The items to consider. Can be an array, subquery or stored query. Will only be lazily evaluated!",
                "required": true
            },
            {
                "name": "filter",
                "type": "Lambda",
                "description": "A callback to consider each item"
            },
            {
                "name": "regex",
                "type": "string",
                "description": "Optionally one or more regex can be provided for convenience",
                "repeated": true
            }
        ]
    },
    {
        "name": "amsi",
        "description": "AMSI is an interface on windows to scan a string for malware. This\nfunction submits the string to the AMSI system and receives a\ndetermination if it is malware.\n",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "A string to scan",
                "required": true
            }
        ],
        "category": "windows"
    },
    {
        "name": "any",
        "description": "Returns TRUE if any items are true.",
        "type": "Function",
        "args": [
            {
                "name": "items",
                "type": "Any",
                "description": "The items to consider. Can be an array, subquery or stored query. Will only be lazily evaluated!",
                "required": true
            },
            {
                "name": "filter",
                "type": "Lambda",
                "description": "A callback to consider each item"
            },
            {
                "name": "regex",
                "type": "string",
                "description": "Optionally one or more regex can be provided for convenience",
                "repeated": true
            }
        ]
    },
    {
        "name": "appcompatcache",
        "description": "Parses the appcompatcache.",
        "type": "Plugin",
        "category": "windows"
    },
    {
        "name": "array",
        "description": "Create an array with all the args.",
        "type": "Function",
        "category": "basic"
    },
    {
        "name": "artifact_definitions",
        "description": "Dump artifact definitions from the internal repository.",
        "type": "Plugin",
        "args": [
            {
                "name": "names",
                "type": "string",
                "description": "Artifact definitions to dump",
                "repeated": true
            },
            {
                "name": "deps",
                "type": "bool",
                "description": "If true includes all dependencies as well."
            },
            {
                "name": "sanitize",
                "type": "bool",
                "description": "If true we remove extra metadata."
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "artifact_delete",
        "description": "Deletes an artifact from the global repository.",
        "type": "Function",
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "The Artifact to delete"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "ARTIFACT_WRITER,SERVER_ARTIFACT_WRITER"
        }
    },
    {
        "name": "artifact_set",
        "description": "Sets an artifact into the global repository.",
        "type": "Function",
        "args": [
            {
                "name": "definition",
                "type": "string",
                "description": "Artifact definition in YAML"
            },
            {
                "name": "prefix",
                "type": "string",
                "description": "Required name prefix"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "ARTIFACT_WRITER,SERVER_ARTIFACT_WRITER"
        }
    },
    {
        "name": "artifact_set_metadata",
        "description": "Sets metadata about the artifact.",
        "type": "Function",
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "The Artifact to update",
                "required": true
            },
            {
                "name": "hidden",
                "type": "bool",
                "description": "Set to true make the artifact hidden in the GUI, false to make it visible again."
            },
            {
                "name": "basic",
                "type": "bool",
                "description": "Set to true make the artifact a 'basic' artifact. This allows users with the COLLECT_BASIC permission able to collect it."
            }
        ],
        "metadata": {
            "permissions": "ARTIFACT_WRITER,SERVER_ARTIFACT_WRITER"
        }
    },
    {
        "name": "atexit",
        "description": "Install a query to run when the query is unwound. This is used to\nclean up when the query ends.",
        "type": "Function",
        "version": 1,
        "args": [
            {
                "name": "query",
                "type": "Any",
                "description": "A VQL Query to parse and execute.",
                "required": true
            },
            {
                "name": "env",
                "type": "ordereddict.Dict",
                "description": "A dict of args to insert into the scope."
            },
            {
                "name": "timeout",
                "type": "uint64",
                "description": "How long to wait for destructors to run (default 60 seconds)."
            }
        ],
        "category": "basic"
    },
    {
        "name": "atoi",
        "description": "Convert a string to an integer.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "Any",
                "description": "A string to convert to int",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "audit",
        "description": "Register as an audit daemon in the kernel.",
        "type": "Plugin",
        "category": "linux",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "authenticode",
        "description": "Parses authenticode information from PE files.",
        "type": "Function",
        "args": [
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "filename",
                "type": "OSPath",
                "description": "The filename to parse.",
                "required": true
            },
            {
                "name": "verbose",
                "type": "bool",
                "description": "Set to receive verbose information about all the certs."
            }
        ],
        "category": "windows",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "backup",
        "description": "Generates a backup file.",
        "type": "Plugin",
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "The name of the backup file.",
                "required": true
            }
        ]
    },
    {
        "name": "backup_restore",
        "description": "Restore state from a backup file.",
        "type": "Plugin",
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "The name of the backup file.",
                "required": true
            }
        ]
    },
    {
        "name": "base64decode",
        "description": "Decodes a base64 encoded string.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "A string to decode",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "base64encode",
        "description": "Encodes a string into base64.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "A string to decode",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "base85decode",
        "description": "Decode a base85 encoded string.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "A string to decode",
                "required": true
            }
        ]
    },
    {
        "name": "basename",
        "description": "Return the basename of the path.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "Any",
                "description": "Extract directory name of path",
                "required": true
            },
            {
                "name": "sep",
                "type": "string",
                "description": "Separator to use (default /)"
            },
            {
                "name": "path_type",
                "type": "string",
                "description": "Type of path (e.g. windows, linux)"
            }
        ],
        "category": "basic"
    },
    {
        "name": "batch",
        "description": "Batches query rows into multiple arrays.",
        "type": "Plugin",
        "args": [
            {
                "name": "batch_size",
                "type": "int64",
                "description": "Size of batch (defaults to 10)."
            },
            {
                "name": "batch_func",
                "type": "string",
                "description": "A VQL Lambda that determines when a batch is ready. Example 'x=>len(list=x) >= 10'."
            },
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Run this query over the item.",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "cache",
        "description": "Creates a cache object.",
        "type": "Function",
        "args": [
            {
                "name": "func",
                "type": "LazyExpr",
                "description": "A function to evaluate",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "The global name of this cache (needed when more than one)"
            },
            {
                "name": "key",
                "type": "string",
                "description": "Cache key to use.",
                "required": true
            },
            {
                "name": "period",
                "type": "int64",
                "description": "The latest age of the cache."
            }
        ],
        "category": "basic"
    },
    {
        "name": "cancel_flow",
        "description": "Cancels the flow.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            },
            {
                "name": "flow_id",
                "type": "string"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "COLLECT_SERVER,COLLECT_CLIENT"
        }
    },
    {
        "name": "certificates",
        "description": "Collect certificate from the system trust store.",
        "type": "Plugin",
        "category": "windows",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "chain",
        "description": "Chain the output of several queries into the same table.",
        "type": "Plugin",
        "args": [
            {
                "name": "async",
                "type": "bool",
                "description": "If specified we run all queries asynchronously and combine the output."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "cidr_contains",
        "description": "Calculates if an IP address falls within a range of CIDR specified\nnetworks.",
        "type": "Function",
        "args": [
            {
                "name": "ip",
                "type": "string",
                "description": "An IP address",
                "required": true
            },
            {
                "name": "ranges",
                "type": "string",
                "description": "A list of CIDR notation network ranges",
                "repeated": true,
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "client_create",
        "description": "Create a new client in the data store.",
        "type": "Function",
        "args": [
            {
                "name": "first_seen_at",
                "type": "time.Time"
            },
            {
                "name": "last_seen_at",
                "type": "time.Time"
            },
            {
                "name": "labels",
                "type": "string",
                "repeated": true
            },
            {
                "name": "os",
                "type": "string",
                "description": "What type of OS this is (default offline)"
            },
            {
                "name": "hostname",
                "type": "string",
                "description": "The hostname of the system"
            },
            {
                "name": "client_id",
                "type": "string",
                "description": "if set we use this client id otherwise we make a new one"
            },
            {
                "name": "mac_addresses",
                "type": "string",
                "repeated": true
            }
        ],
        "metadata": {
            "permissions": "SERVER_ADMIN"
        }
    },
    {
        "name": "client_delete",
        "description": "Delete all information related to a client from the filestore.\n",
        "type": "Plugin",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            },
            {
                "name": "really_do_it",
                "type": "bool"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "DELETE_RESULTS"
        }
    },
    {
        "name": "client_info",
        "description": "Returns client info (like the fqdn) from the datastore.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "client_metadata",
        "description": "Returns client metadata from the datastore.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS,SERVER_ADMIN"
        }
    },
    {
        "name": "client_set_metadata",
        "description": "Sets client metadata.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            },
            {
                "name": "metadata",
                "type": "ordereddict.Dict",
                "description": "A dict containing metadata. If not specified we use kwargs."
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "COLLECT_CLIENT,SERVER_ADMIN"
        }
    },
    {
        "name": "clients",
        "description": "Retrieve the list of clients.",
        "type": "Plugin",
        "args": [
            {
                "name": "search",
                "type": "string",
                "description": "Client search string. Can have the following prefixes: 'label:', 'host:'"
            },
            {
                "name": "start",
                "type": "uint64",
                "description": "First client to fetch (0)'"
            },
            {
                "name": "count",
                "type": "uint64",
                "description": "Maximum number of clients to fetch (1000)'"
            },
            {
                "name": "client_id",
                "type": "string"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "clock",
        "description": "Generate a timestamp periodically. This is mostly useful for event\nqueries.",
        "type": "Plugin",
        "args": [
            {
                "name": "start",
                "type": "Any",
                "description": "Start at this time."
            },
            {
                "name": "period",
                "type": "int64",
                "description": "Wait this many seconds between events."
            },
            {
                "name": "ms",
                "type": "int64",
                "description": "Wait this many ms between events."
            }
        ],
        "category": "event"
    },
    {
        "name": "collect",
        "description": "Collect artifacts into a local file.",
        "type": "Plugin",
        "args": [
            {
                "name": "artifacts",
                "type": "string",
                "description": "A list of artifacts to collect.",
                "repeated": true,
                "required": true
            },
            {
                "name": "output",
                "type": "string",
                "description": "A path to write the output file on."
            },
            {
                "name": "report",
                "type": "string",
                "description": "A path to write the report on (deprecated and ignored)."
            },
            {
                "name": "args",
                "type": "Any",
                "description": "Optional parameters."
            },
            {
                "name": "password",
                "type": "string",
                "description": "An optional password to encrypt the collection zip."
            },
            {
                "name": "format",
                "type": "string",
                "description": "Output format (csv, jsonl, csv_only)."
            },
            {
                "name": "artifact_definitions",
                "type": "Any",
                "description": "Optional additional custom artifacts."
            },
            {
                "name": "template",
                "type": "string",
                "description": "(Deprecated Ignored)."
            },
            {
                "name": "level",
                "type": "int64",
                "description": "Compression level between 0 (no compression) and 9."
            },
            {
                "name": "ops_per_sec",
                "type": "int64",
                "description": "Rate limiting for collections (deprecated)."
            },
            {
                "name": "cpu_limit",
                "type": "float64",
                "description": "Set query cpu_limit value"
            },
            {
                "name": "iops_limit",
                "type": "float64",
                "description": "Set query iops_limit value"
            },
            {
                "name": "progress_timeout",
                "type": "float64",
                "description": "If no progress is detected in this many seconds, we terminate the query and output debugging information"
            },
            {
                "name": "timeout",
                "type": "float64",
                "description": "Total amount of time in seconds, this collection will take. Collection is cancelled when timeout is exceeded."
            },
            {
                "name": "metadata",
                "type": "StoredQuery",
                "description": "Metadata to store in the zip archive. Outputs to metadata.json in top level of zip file."
            },
            {
                "name": "concurrency",
                "type": "int64",
                "description": "Number of concurrent collections."
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "FILESYSTEM_WRITE"
        }
    },
    {
        "name": "collect_client",
        "description": "Launch an artifact collection against a client. If the client_id\nis \"server\" then the collection occurs on the server itself. In\nthat case the caller needs the SERVER_ADMIN permission.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to schedule a collection on",
                "required": true
            },
            {
                "name": "artifacts",
                "type": "string",
                "description": "A list of artifacts to collect",
                "repeated": true,
                "required": true
            },
            {
                "name": "env",
                "type": "ordereddict.Dict",
                "description": "Parameters to apply to the artifact (an alternative to a full spec)"
            },
            {
                "name": "spec",
                "type": "ordereddict.Dict",
                "description": "Parameters to apply to the artifacts"
            },
            {
                "name": "timeout",
                "type": "uint64",
                "description": "Set query timeout (default 10 min)"
            },
            {
                "name": "ops_per_sec",
                "type": "float64",
                "description": "Set query ops_per_sec value"
            },
            {
                "name": "cpu_limit",
                "type": "float64",
                "description": "Set query cpu_limit value"
            },
            {
                "name": "iops_limit",
                "type": "float64",
                "description": "Set query iops_limit value"
            },
            {
                "name": "max_rows",
                "type": "uint64",
                "description": "Max number of rows to fetch"
            },
            {
                "name": "max_bytes",
                "type": "uint64",
                "description": "Max number of bytes to upload"
            },
            {
                "name": "urgent",
                "type": "bool",
                "description": "Set the collection as urgent - skips other queues collections on the client."
            },
            {
                "name": "org_id",
                "type": "string",
                "description": "If set the collection will be started in the specified org."
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "COLLECT_CLIENT,COLLECT_SERVER"
        }
    },
    {
        "name": "column_filter",
        "description": "Select columns from another query using regex.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "This query will be run to produce the columns.",
                "required": true
            },
            {
                "name": "exclude",
                "type": "string",
                "description": "One of more regular expressions that will exclude columns.",
                "repeated": true
            },
            {
                "name": "include",
                "type": "string",
                "description": "One of more regular expressions that will include columns.",
                "repeated": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "combine",
        "description": "Combine the output of several queries into the same result set.A convenience plugin acting like chain(async=TRUE).",
        "type": "Plugin",
        "category": "event"
    },
    {
        "name": "commandline_split",
        "description": "Split a commandline into separate components following the windows\nconventions.",
        "type": "Function",
        "args": [
            {
                "name": "command",
                "type": "string",
                "description": "Commandline to split into components.",
                "required": true
            },
            {
                "name": "bash_style",
                "type": "bool",
                "description": "Use bash rules (Uses Windows rules by default)."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "compress",
        "description": "Compress a file.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "A path to compress",
                "required": true
            },
            {
                "name": "output",
                "type": "string",
                "description": "A path to write the output - default is the path with a .gz extension"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "FILESYSTEM_WRITE,FILESYSTEM_READ"
        }
    },
    {
        "name": "connections",
        "description": "List all active connections",
        "type": "Plugin",
        "category": "plugin",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "copy",
        "description": "Copy a file.",
        "type": "Function",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "The file to copy from.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "dest",
                "type": "string",
                "description": "The destination file to write.",
                "required": true
            },
            {
                "name": "permissions",
                "type": "string",
                "description": "Required permissions (e.g. 'x')."
            },
            {
                "name": "append",
                "type": "bool",
                "description": "If true we append to the target file otherwise truncate it"
            },
            {
                "name": "create_directories",
                "type": "bool",
                "description": "If true we ensure the destination directories exist"
            }
        ],
        "category": "basic",
        "metadata": {
            "permissions": "FILESYSTEM_WRITE,FILESYSTEM_READ"
        }
    },
    {
        "name": "count",
        "description": "Counts the items.",
        "type": "Function",
        "args": [
            {
                "name": "items",
                "type": "Any",
                "description": "Not used anymore"
            }
        ],
        "category": "basic"
    },
    {
        "name": "create_flow_download",
        "description": "Creates a download pack for the flow.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "description": "Client ID to export.",
                "required": true
            },
            {
                "name": "flow_id",
                "type": "string",
                "description": "The flow id to export.",
                "required": true
            },
            {
                "name": "wait",
                "type": "bool",
                "description": "If set we wait for the download to complete before returning."
            },
            {
                "name": "type",
                "type": "string",
                "description": "Type of download to create (deprecated Ignored)."
            },
            {
                "name": "template",
                "type": "string",
                "description": "Report template to use (deprecated Ignored)."
            },
            {
                "name": "password",
                "type": "string",
                "description": "An optional password to encrypt the collection zip."
            },
            {
                "name": "format",
                "type": "string",
                "description": "Format to export (csv,json,csv_only) defaults to both."
            },
            {
                "name": "expand_sparse",
                "type": "bool",
                "description": "If set we expand sparse files in the archive."
            },
            {
                "name": "name",
                "type": "string",
                "description": "If specified we call the file this name otherwise we generate name based on flow id."
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "PREPARE_RESULTS"
        }
    },
    {
        "name": "create_hunt_download",
        "description": "Creates a download pack for a hunt.",
        "type": "Function",
        "args": [
            {
                "name": "hunt_id",
                "type": "string",
                "description": "Hunt ID to export.",
                "required": true
            },
            {
                "name": "only_combined",
                "type": "bool",
                "description": "If set we only export combined results."
            },
            {
                "name": "wait",
                "type": "bool",
                "description": "If set we wait for the download to complete before returning."
            },
            {
                "name": "format",
                "type": "string",
                "description": "Format to export (csv,json) defaults to both."
            },
            {
                "name": "base",
                "type": "string",
                "description": "Base filename to write to."
            },
            {
                "name": "password",
                "type": "string",
                "description": "An optional password to encrypt the collection zip."
            },
            {
                "name": "expand_sparse",
                "type": "bool",
                "description": "If set we expand sparse files in the archive."
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "PREPARE_RESULTS"
        }
    },
    {
        "name": "create_notebook_download",
        "description": "Creates a notebook export zip file.",
        "type": "Function",
        "args": [
            {
                "name": "notebook_id",
                "type": "string",
                "description": "Notebook ID to export.",
                "required": true
            },
            {
                "name": "filename",
                "type": "string",
                "description": "The name of the export. If not set this will be named according to the notebook id and timestamp"
            }
        ],
        "metadata": {
            "permissions": "PREPARE_RESULTS"
        }
    },
    {
        "name": "crypto_rc4",
        "description": "Apply rc4 to the string and key.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "String to apply Rc4 encryption",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "Rc4 key (1-256bytes).",
                "required": true
            }
        ],
        "category": "plugin"
    },
    {
        "name": "delay",
        "description": "Executes 'query' and delays relaying the rows by the specified number of seconds.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Source for rows.",
                "required": true
            },
            {
                "name": "delay",
                "type": "int64",
                "description": "Number of seconds to delay.",
                "required": true
            },
            {
                "name": "buffer_size",
                "type": "int64",
                "description": "Maximum number of rows to buffer (default 1000)."
            }
        ]
    },
    {
        "name": "delete_events",
        "description": "Delete all the files that make up a flow.",
        "type": "Plugin",
        "args": [
            {
                "name": "artifact",
                "type": "string",
                "description": "Name of artifact events to remove",
                "required": true
            },
            {
                "name": "client_id",
                "type": "string",
                "description": "Client ID of events to remove (use 'server' for server events)",
                "required": true
            },
            {
                "name": "start_time",
                "type": "time.Time",
                "description": "Start time to be deleted"
            },
            {
                "name": "end_time",
                "type": "time.Time",
                "description": "End time to be deleted"
            },
            {
                "name": "really_do_it",
                "type": "bool",
                "description": "If not specified, just show what files will be removed"
            }
        ],
        "metadata": {
            "permissions": "DELETE_RESULTS"
        }
    },
    {
        "name": "delete_flow",
        "description": "Delete all the files that make up a flow.",
        "type": "Plugin",
        "args": [
            {
                "name": "flow_id",
                "type": "string",
                "required": true
            },
            {
                "name": "client_id",
                "type": "string",
                "required": true
            },
            {
                "name": "really_do_it",
                "type": "bool"
            }
        ],
        "metadata": {
            "permissions": "DELETE_RESULTS"
        }
    },
    {
        "name": "dict",
        "description": "Construct a dict from arbitrary keyword args.",
        "type": "Function",
        "category": "basic"
    },
    {
        "name": "diff",
        "description": "Executes 'query' periodically and emit differences from the last query.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Source for cached rows.",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "The column to use as key.",
                "required": true
            },
            {
                "name": "period",
                "type": "int64",
                "description": "Number of seconds between evaluation of the query."
            }
        ],
        "category": "event"
    },
    {
        "name": "dirname",
        "description": "Return the directory path.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "Any",
                "description": "Extract directory name of path",
                "required": true
            },
            {
                "name": "sep",
                "type": "string",
                "description": "Separator to use (default /)"
            },
            {
                "name": "path_type",
                "type": "string",
                "description": "Type of path (e.g. windows, linux)"
            }
        ],
        "category": "basic"
    },
    {
        "name": "dns",
        "description": "Monitor dns queries.",
        "type": "Plugin",
        "category": "windows"
    },
    {
        "name": "efivariables",
        "description": "Enumerate efi variables.",
        "type": "Plugin",
        "args": [
            {
                "name": "namespace",
                "type": "string",
                "description": "Variable namespace."
            },
            {
                "name": "name",
                "type": "string",
                "description": "Variable name"
            },
            {
                "name": "value",
                "type": "bool",
                "description": "Read variable value"
            }
        ],
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "elastic_upload",
        "description": "Upload rows to elastic.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Source for rows to upload.",
                "required": true
            },
            {
                "name": "threads",
                "type": "int64",
                "description": "How many threads to use."
            },
            {
                "name": "index",
                "type": "string",
                "description": "The name of the index to upload to. If not specified ensure a column is named '_index'."
            },
            {
                "name": "type",
                "type": "string",
                "description": "The type of the index to upload to."
            },
            {
                "name": "chunk_size",
                "type": "int64",
                "description": "The number of rows to send at the time."
            },
            {
                "name": "addresses",
                "type": "string",
                "description": "A list of Elasticsearch nodes to use.",
                "repeated": true
            },
            {
                "name": "username",
                "type": "string",
                "description": "Username for HTTP Basic Authentication."
            },
            {
                "name": "password",
                "type": "string",
                "description": "Password for HTTP Basic Authentication."
            },
            {
                "name": "cloud_id",
                "type": "string",
                "description": "Endpoint for the Elastic Service (https://elastic.co/cloud)."
            },
            {
                "name": "api_key",
                "type": "string",
                "description": "Base64-encoded token for authorization; if set, overrides username and password."
            },
            {
                "name": "wait_time",
                "type": "int64",
                "description": "Batch elastic upload this long (2 sec)."
            },
            {
                "name": "pipeline",
                "type": "string",
                "description": "Pipeline for uploads"
            },
            {
                "name": "disable_ssl_security",
                "type": "bool",
                "description": "Disable ssl certificate verifications (deprecated in favor of SkipVerify)."
            },
            {
                "name": "skip_verify",
                "type": "bool",
                "description": "Disable ssl certificate verifications."
            },
            {
                "name": "root_ca",
                "type": "string",
                "description": "As a better alternative to disable_ssl_security, allows root ca certs to be added here."
            },
            {
                "name": "max_memory_buffer",
                "type": "uint64",
                "description": "How large we allow the memory buffer to grow to while we are trying to contact the Elastic server (default 100mb)."
            },
            {
                "name": "action",
                "type": "string",
                "description": "Either index or create. For data streams this must be create."
            },
            {
                "name": "secret",
                "type": "string",
                "description": "Alternatively use a secret from the secrets service. Secret must be of type 'AWS S3 Creds'"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "COLLECT_SERVER"
        }
    },
    {
        "name": "encode",
        "description": "Encodes a string as as different type. Currently supported types include 'hex', 'base64'.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "Any",
                "required": true
            },
            {
                "name": "type",
                "type": "string",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "entropy",
        "description": "Calculates shannon scale entropy of a string.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "required": true
            }
        ]
    },
    {
        "name": "enumerate",
        "description": "Collect all the items in each group by bin.",
        "type": "Function",
        "args": [
            {
                "name": "items",
                "type": "Any",
                "description": "The items to enumerate"
            }
        ],
        "category": "basic"
    },
    {
        "name": "enumerate_flow",
        "description": "Enumerate all the files that make up a flow.",
        "type": "Plugin",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            },
            {
                "name": "flow_id",
                "type": "string"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "environ",
        "description": "Get an environment variable.\n",
        "type": "Function",
        "args": [
            {
                "name": "var",
                "type": "string",
                "description": "Extract the var from the environment.",
                "required": true
            }
        ],
        "category": "basic",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "environ",
        "description": "The row returned will have all environment variables as\ncolumns. If the var parameter is provided, only those variables\nwill be provided.\n",
        "type": "Plugin",
        "args": [
            {
                "name": "vars",
                "type": "string",
                "description": "Extract these variables from the environment and return them one per row",
                "repeated": true
            }
        ],
        "category": "plugin"
    },
    {
        "name": "etw_sessions",
        "description": "Enumerates all active ETW sessions",
        "type": "Plugin",
        "args": [
            {
                "name": "count",
                "type": "uint64",
                "description": "The count of sessions to retrieve (default 64) "
            }
        ],
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "eval",
        "description": "Evaluate a vql lambda function on the current scope.",
        "type": "Function",
        "args": [
            {
                "name": "func",
                "type": "Lambda",
                "description": "Lambda function to evaluate e.g. x=>1+1 where x will be the current scope.",
                "required": true
            }
        ]
    },
    {
        "name": "execve",
        "description": "This plugin launches an external command and captures its STDERR,\nSTDOUT and return code. The command's stdout is split using the `sep`\nparameter as required.",
        "type": "Plugin",
        "args": [
            {
                "name": "argv",
                "type": "string",
                "description": "Argv to run the command with.",
                "repeated": true,
                "required": true
            },
            {
                "name": "sep",
                "type": "string",
                "description": "The separator that will be used to split the stdout into rows."
            },
            {
                "name": "length",
                "type": "int64",
                "description": "Size of buffer to capture output per row."
            },
            {
                "name": "env",
                "type": "LazyExpr",
                "description": "Environment variables to launch with."
            },
            {
                "name": "cwd",
                "type": "string",
                "description": "If specified we change to this working directory first."
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "EXECVE"
        }
    },
    {
        "name": "expand",
        "description": "Expand the path using the environment.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "A path with environment escapes",
                "required": true
            }
        ],
        "category": "basic",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "favorites_delete",
        "description": "Delete a favorite.",
        "type": "Function",
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "A name for this collection template.",
                "required": true
            },
            {
                "name": "type",
                "type": "string",
                "description": "The type of favorite.",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "favorites_save",
        "description": "Save a collection into the favorites.",
        "type": "Function",
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "A name for this collection template.",
                "required": true
            },
            {
                "name": "description",
                "type": "string",
                "description": "A description for the template."
            },
            {
                "name": "specs",
                "type": "LazyExpr",
                "description": "The collection request spec that will be saved. We use this to create the new collection.",
                "required": true
            },
            {
                "name": "type",
                "type": "string",
                "description": "The type of favorite.",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "fifo",
        "description": "Executes 'query' and cache a number of rows from it. For each invocation\nwe present the set of past rows.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Source for cached rows.",
                "required": true
            },
            {
                "name": "max_age",
                "type": "int64",
                "description": "Maximum number of seconds to hold rows in the fifo."
            },
            {
                "name": "max_rows",
                "type": "int64",
                "description": "Maximum number of rows to hold in the fifo."
            },
            {
                "name": "flush",
                "type": "bool",
                "description": "If specified we flush all rows from cache after the call."
            }
        ],
        "category": "event"
    },
    {
        "name": "file_store",
        "description": "Resolves file store paths into full filesystem paths.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "LazyExpr",
                "description": "A VFS path to convert",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "file_store_delete",
        "description": "Delete file store paths.\n",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "LazyExpr",
                "description": "A VFS path to remove",
                "required": true
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "SERVER_ADMIN"
        }
    },
    {
        "name": "filesystems",
        "description": "Enumerates mounted filesystems.\n",
        "type": "Plugin",
        "category": "plugin"
    },
    {
        "name": "filter",
        "description": "Filters an array by regex or condition.",
        "type": "Function",
        "args": [
            {
                "name": "list",
                "type": "Any",
                "description": "A list of items to filter",
                "repeated": true,
                "required": true
            },
            {
                "name": "regex",
                "type": "string",
                "description": "A regex to test each item"
            },
            {
                "name": "condition",
                "type": "Lambda",
                "description": "A VQL lambda to use to filter elements"
            }
        ],
        "category": "basic"
    },
    {
        "name": "flatten",
        "description": "Flatten the columns in query. If any column repeats then we repeat the entire row once for each item.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "required": true
            }
        ],
        "category": "plugin"
    },
    {
        "name": "flow_logs",
        "description": "Retrieve the query logs of a flow.",
        "type": "Plugin",
        "args": [
            {
                "name": "flow_id",
                "type": "string",
                "description": "The flow id to read.",
                "required": true
            },
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to extract",
                "required": true
            }
        ],
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "flow_results",
        "description": "Retrieve the results of a flow.",
        "type": "Plugin",
        "args": [
            {
                "name": "artifact",
                "type": "string",
                "description": "The artifact to retrieve"
            },
            {
                "name": "source",
                "type": "string",
                "description": "An optional source within the artifact."
            },
            {
                "name": "flow_id",
                "type": "string",
                "description": "The hunt id to read.",
                "required": true
            },
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to extract",
                "required": true
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "flows",
        "description": "Retrieve the flows launched on each client.",
        "type": "Plugin",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            },
            {
                "name": "flow_id",
                "type": "string"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "for",
        "description": "Iterate over a list.",
        "type": "Plugin",
        "args": [
            {
                "name": "var",
                "type": "string",
                "description": "The variable to assign.",
                "required": true
            },
            {
                "name": "foreach",
                "type": "StoredQuery",
                "description": "The variable to iterate over.",
                "required": true
            },
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Run this query over the item."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "foreach",
        "description": "Executes 'query' once for each row in the 'row' query.",
        "type": "Plugin",
        "args": [
            {
                "name": "row",
                "type": "LazyExpr",
                "description": "A query or slice which generates rows.",
                "required": true
            },
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Run this query for each row."
            },
            {
                "name": "async",
                "type": "bool",
                "description": "If set we run all queries asynchronously (implies workers=1000)."
            },
            {
                "name": "workers",
                "type": "int64",
                "description": "Total number of asynchronous workers."
            },
            {
                "name": "column",
                "type": "string",
                "description": "If set we only extract the column from row."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "format",
        "description": "Format one or more items according to a format string.",
        "type": "Function",
        "args": [
            {
                "name": "format",
                "type": "string",
                "description": "Format string to use",
                "required": true
            },
            {
                "name": "args",
                "type": "Any",
                "description": "An array of elements to apply into the format string."
            }
        ],
        "category": "basic"
    },
    {
        "name": "gcs_pubsub_publish",
        "description": "Publish a message to Google PubSub.",
        "type": "Function",
        "args": [
            {
                "name": "topic",
                "type": "string",
                "description": "The topic to publish to",
                "required": true
            },
            {
                "name": "project_id",
                "type": "string",
                "description": "The project id to publish to",
                "required": true
            },
            {
                "name": "msg",
                "type": "Any",
                "description": "Message to publish to Pubsub",
                "required": true
            },
            {
                "name": "credentials",
                "type": "string",
                "description": "The credentials to use",
                "required": true
            },
            {
                "name": "attributes",
                "type": "ordereddict.Dict",
                "description": "The publish attributes",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "generate",
        "description": "Create a named generator that receives rows from the query.",
        "type": "Function",
        "version": 2,
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "Name to call the generator"
            },
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Run this query to generator rows."
            },
            {
                "name": "delay",
                "type": "int64",
                "description": "Wait before starting the query"
            },
            {
                "name": "with_file_buffer",
                "type": "bool",
                "description": "Enable file buffering"
            },
            {
                "name": "fan_out",
                "type": "int64",
                "description": "Wait for this many listeners to connect before starting the query"
            }
        ],
        "category": "basic"
    },
    {
        "name": "geoip",
        "description": "Lookup an IP Address using the MaxMind GeoIP database. You can get\na copy of the database from https://www.maxmind.com/. The database\nmust be locally accessible so this probably only makes sense on\nthe server.\n",
        "type": "Function",
        "version": 1,
        "args": [
            {
                "name": "ip",
                "type": "string",
                "description": "IP Address to lookup.",
                "required": true
            },
            {
                "name": "db",
                "type": "string",
                "description": "Path to the MaxMind GeoIP Database.",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "get",
        "description": "Gets the member field from item.",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "Any"
            },
            {
                "name": "member",
                "type": "string"
            },
            {
                "name": "field",
                "type": "Any"
            },
            {
                "name": "default",
                "type": "Any"
            }
        ],
        "category": "basic"
    },
    {
        "name": "get_client_monitoring",
        "description": "Retrieve the current client monitoring state.",
        "type": "Function",
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "get_flow",
        "description": "Gets flow details.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            },
            {
                "name": "flow_id",
                "type": "string"
            }
        ],
        "metadata": {
            "permissions": "COLLECT_CLIENT,COLLECT_SERVER"
        }
    },
    {
        "name": "get_server_monitoring",
        "description": "Retrieve the current server monitoring state.",
        "type": "Function",
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "getpid",
        "description": "Returns the current pid of the Velociraptor process.",
        "type": "Function",
        "category": "basic",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "glob",
        "description": "Retrieve files based on a list of glob expressions",
        "type": "Plugin",
        "version": 3,
        "args": [
            {
                "name": "globs",
                "type": "string",
                "description": "One or more glob patterns to apply to the filesystem.",
                "repeated": true,
                "required": true
            },
            {
                "name": "root",
                "type": "OSPath",
                "description": "The root directory to glob from (default '')."
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "An accessor to use."
            },
            {
                "name": "nosymlink",
                "type": "bool",
                "description": "If set we do not follow symlinks."
            },
            {
                "name": "recursion_callback",
                "type": "string",
                "description": "A VQL function that determines if a directory should be recursed (e.g. \"x=>NOT x.Name =~ 'proc'\")."
            },
            {
                "name": "one_filesystem",
                "type": "bool",
                "description": "If set we do not follow links to other filesystems."
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "grep",
        "description": "Search a file for keywords.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "path to open.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "An accessor to use."
            },
            {
                "name": "keywords",
                "type": "string",
                "description": "Keywords to search for.",
                "repeated": true,
                "required": true
            },
            {
                "name": "context",
                "type": "int",
                "description": "Extract this many bytes as context around hits."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "grok",
        "description": "Parse a string using a Grok expression.",
        "type": "Function",
        "args": [
            {
                "name": "grok",
                "type": "string",
                "description": "Grok pattern.",
                "required": true
            },
            {
                "name": "data",
                "type": "string",
                "description": "String to parse.",
                "required": true
            },
            {
                "name": "patterns",
                "type": "Any",
                "description": "Additional patterns."
            },
            {
                "name": "all_captures",
                "type": "bool",
                "description": "Extract all captures."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "gui_users",
        "description": "Retrieve the list of users on the server.\n",
        "type": "Plugin",
        "args": [
            {
                "name": "all_orgs",
                "type": "bool",
                "description": "If set we enumerate permission for all orgs, otherwise just for this org."
            }
        ],
        "category": "server"
    },
    {
        "name": "gunzip",
        "description": "Uncompress a gzip-compressed block of data.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "Data to apply Gunzip",
                "required": true
            }
        ]
    },
    {
        "name": "handles",
        "description": "Enumerate process handles.\n",
        "type": "Plugin",
        "args": [
            {
                "name": "pid",
                "type": "uint64",
                "description": "If specified only get handles from these PIDs."
            },
            {
                "name": "types",
                "type": "string",
                "description": "If specified only get handles of this type.",
                "repeated": true
            }
        ],
        "category": "windows",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "hash",
        "description": "Calculate the hash of a file.",
        "type": "Function",
        "version": 2,
        "args": [
            {
                "name": "path",
                "type": "OSPath",
                "description": "Path to open and hash.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "hashselect",
                "type": "string",
                "description": "The hash function to use (MD5,SHA1,SHA256)",
                "repeated": true
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "host",
        "description": "Perform a DNS resolution.",
        "type": "Function",
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "The name to lookup",
                "required": true
            },
            {
                "name": "server",
                "type": "string",
                "description": "A DNS server to query - if not provided uses the system resolver."
            },
            {
                "name": "type",
                "type": "string",
                "description": "Type of lookup, can be CNAME, NS, SOA, TXT, DNSKEY, AXFR, A (default)"
            },
            {
                "name": "prefer_go",
                "type": "bool",
                "description": "Prefer calling the native Go implementation rather than the system."
            }
        ],
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "http_client",
        "description": "Make a http request.",
        "type": "Plugin",
        "version": 2,
        "args": [
            {
                "name": "url",
                "type": "string",
                "description": "The URL to fetch",
                "required": true
            },
            {
                "name": "params",
                "type": "ordereddict.Dict",
                "description": "Parameters to encode as POST or GET query strings"
            },
            {
                "name": "headers",
                "type": "ordereddict.Dict",
                "description": "A dict of headers to send."
            },
            {
                "name": "method",
                "type": "string",
                "description": "HTTP method to use (GET, POST, PUT, PATCH, DELETE)"
            },
            {
                "name": "data",
                "type": "string",
                "description": "If specified we write this raw data into a POST request instead of encoding the params above."
            },
            {
                "name": "chunk_size",
                "type": "int",
                "description": "Read input with this chunk size and send each chunk as a row"
            },
            {
                "name": "disable_ssl_security",
                "type": "bool",
                "description": "Disable ssl certificate verifications (deprecated in favor of SkipVerify)."
            },
            {
                "name": "skip_verify",
                "type": "bool",
                "description": "Disable ssl certificate verifications."
            },
            {
                "name": "tempfile_extension",
                "type": "string",
                "description": "If specified we write to a tempfile. The content field will contain the full path to the tempfile."
            },
            {
                "name": "remove_last",
                "type": "bool",
                "description": "If set we delay removal as much as possible."
            },
            {
                "name": "root_ca",
                "type": "string",
                "description": "As a better alternative to disable_ssl_security, allows root ca certs to be added here."
            },
            {
                "name": "cookie_jar",
                "type": "ordereddict.Dict",
                "description": "A cookie jar to use if provided. This is a dict of cookie structures."
            },
            {
                "name": "user_agent",
                "type": "string",
                "description": "If specified, set a HTTP User-Agent."
            },
            {
                "name": "secret",
                "type": "string",
                "description": "If specified, use this managed secret. The secret should be of type 'HTTP Secrets'. Alternatively specify the Url as secret://name"
            },
            {
                "name": "files",
                "type": "ordereddict.Dict",
                "description": "If specified, upload these files using multipart form upload. For example [dict(file=\"My filename.txt\", path=OSPath, accessor=\"auto\"),]",
                "repeated": true
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "COLLECT_SERVER"
        }
    },
    {
        "name": "humanize",
        "description": "Format items in human readable way.",
        "type": "Function",
        "args": [
            {
                "name": "bytes",
                "type": "int64",
                "description": "Format bytes with units (e.g. MB)"
            },
            {
                "name": "ibytes",
                "type": "int64",
                "description": "Format bytes with units (e.g. MiB)"
            },
            {
                "name": "time",
                "type": "time.Time",
                "description": "Format time (e.g. 2 hours ago)"
            },
            {
                "name": "comma",
                "type": "int64",
                "description": "Format integer with comma (e.g. 1,230)"
            }
        ],
        "category": "basic"
    },
    {
        "name": "hunt",
        "description": "Create and launch a hunt.",
        "type": "Function",
        "args": [
            {
                "name": "description",
                "type": "string",
                "description": "Description of the hunt"
            },
            {
                "name": "artifacts",
                "type": "string",
                "description": "A list of artifacts to collect",
                "repeated": true,
                "required": true
            },
            {
                "name": "expires",
                "type": "LazyExpr",
                "description": "A time for expiry (e.g. now() + 1800)"
            },
            {
                "name": "spec",
                "type": "Any",
                "description": "Parameters to apply to the artifacts"
            },
            {
                "name": "timeout",
                "type": "uint64",
                "description": "Set query timeout (default 10 min)"
            },
            {
                "name": "ops_per_sec",
                "type": "float64",
                "description": "Set query ops_per_sec value"
            },
            {
                "name": "cpu_limit",
                "type": "float64",
                "description": "Set query ops_per_sec value"
            },
            {
                "name": "iops_limit",
                "type": "float64",
                "description": "Set query ops_per_sec value"
            },
            {
                "name": "max_rows",
                "type": "uint64",
                "description": "Max number of rows to fetch"
            },
            {
                "name": "max_bytes",
                "type": "uint64",
                "description": "Max number of bytes to upload"
            },
            {
                "name": "pause",
                "type": "bool",
                "description": "If specified the new hunt will be in the paused state"
            },
            {
                "name": "include_labels",
                "type": "string",
                "description": "If specified only include these labels",
                "repeated": true
            },
            {
                "name": "exclude_labels",
                "type": "string",
                "description": "If specified exclude these labels",
                "repeated": true
            },
            {
                "name": "os",
                "type": "string",
                "description": "If specified target this OS"
            },
            {
                "name": "org_id",
                "type": "string",
                "description": "If set the collection will be started in the specified orgs.",
                "repeated": true
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "START_HUNT,ORG_ADMIN"
        }
    },
    {
        "name": "hunt_add",
        "description": "Assign a client to a hunt.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            },
            {
                "name": "hunt_id",
                "type": "string",
                "required": true
            },
            {
                "name": "flow_id",
                "type": "string",
                "description": "If a flow id is specified we do not create a new flow, but instead add this flow_id to the hunt."
            },
            {
                "name": "relaunch",
                "type": "bool",
                "description": "If specified we relaunch the hunt on this client again."
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "START_HUNT"
        }
    },
    {
        "name": "hunt_delete",
        "description": "Delete a hunt. ",
        "type": "Plugin",
        "args": [
            {
                "name": "hunt_id",
                "type": "string",
                "required": true
            },
            {
                "name": "really_do_it",
                "type": "bool"
            }
        ],
        "metadata": {
            "permissions": "SERVER_ADMIN"
        }
    },
    {
        "name": "hunt_flows",
        "description": "Retrieve the flows launched by a hunt.",
        "type": "Plugin",
        "args": [
            {
                "name": "hunt_id",
                "type": "string",
                "description": "The hunt id to inspect.",
                "required": true
            },
            {
                "name": "start_row",
                "type": "int64",
                "description": "The first row to show (used for paging)."
            },
            {
                "name": "limit",
                "type": "int64",
                "description": "Number of rows to show (used for paging)."
            },
            {
                "name": "basic_info",
                "type": "bool",
                "description": "If specified we only return basic information like flow id and client id."
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "hunt_results",
        "description": "Retrieve the results of a hunt.",
        "type": "Plugin",
        "args": [
            {
                "name": "artifact",
                "type": "string",
                "description": "The artifact to retrieve"
            },
            {
                "name": "source",
                "type": "string",
                "description": "An optional source within the artifact."
            },
            {
                "name": "hunt_id",
                "type": "string",
                "description": "The hunt id to read.",
                "required": true
            },
            {
                "name": "brief",
                "type": "bool",
                "description": "If set we return less columns (deprecated)."
            },
            {
                "name": "orgs",
                "type": "string",
                "description": "If set we combine results from all orgs.",
                "repeated": true
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "hunt_update",
        "description": "Update a hunt.",
        "type": "Function",
        "args": [
            {
                "name": "hunt_id",
                "type": "string",
                "description": "The hunt to update",
                "required": true
            },
            {
                "name": "stop",
                "type": "bool",
                "description": "Stop the hunt"
            },
            {
                "name": "start",
                "type": "bool",
                "description": "Start the hunt"
            },
            {
                "name": "description",
                "type": "string",
                "description": "Update hunt description"
            },
            {
                "name": "expires",
                "type": "time.Time",
                "description": "Update hunt expiry"
            }
        ],
        "metadata": {
            "permissions": "START_HUNT"
        }
    },
    {
        "name": "hunts",
        "description": "Retrieve the list of hunts.\n",
        "type": "Plugin",
        "args": [
            {
                "name": "hunt_id",
                "type": "string",
                "description": "A hunt id to read, if not specified we list all of them."
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "if",
        "description": "Conditional execution of query",
        "type": "Function",
        "args": [
            {
                "name": "condition",
                "type": "Any",
                "required": true
            },
            {
                "name": "then",
                "type": "types.LazyAny"
            },
            {
                "name": "else",
                "type": "types.LazyAny"
            }
        ],
        "category": "basic"
    },
    {
        "name": "if",
        "description": "Conditional execution of query",
        "type": "Plugin",
        "args": [
            {
                "name": "condition",
                "type": "Any",
                "required": true
            },
            {
                "name": "then",
                "type": "StoredQuery",
                "required": true
            },
            {
                "name": "else",
                "type": "StoredQuery"
            }
        ],
        "category": "plugin"
    },
    {
        "name": "import",
        "description": "Imports an artifact into the current scope. This only works in notebooks!",
        "type": "Function",
        "args": [
            {
                "name": "artifact",
                "type": "string",
                "description": "The Artifact to import",
                "required": true
            }
        ]
    },
    {
        "name": "import_collection",
        "description": "Imports an offline collection zip file (experimental).",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to import to. Use 'auto' to generate a new client id."
            },
            {
                "name": "hostname",
                "type": "string",
                "description": "When creating a new client, set this as the hostname."
            },
            {
                "name": "filename",
                "type": "string",
                "description": "Path on server to the collector zip.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "import_type",
                "type": "string",
                "description": "Whether the import is an offline_collector or hunt."
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "COLLECT_SERVER,FILESYSTEM_READ"
        }
    },
    {
        "name": "info",
        "description": "Get information about the running host.",
        "type": "Plugin",
        "category": "plugin",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "int",
        "description": "Truncate to an integer.",
        "type": "Function",
        "args": [
            {
                "name": "int",
                "type": "Any",
                "description": "The integer to round"
            }
        ],
        "category": "plugin"
    },
    {
        "name": "interfaces",
        "description": "List all active network interfaces using the API.\n",
        "type": "Plugin",
        "category": "windows",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "inventory",
        "description": "Retrieve the tools inventory.",
        "type": "Plugin",
        "category": "server"
    },
    {
        "name": "inventory_add",
        "description": "Add or reconfigure a tool into the inventory.",
        "type": "Function",
        "args": [
            {
                "name": "tool",
                "type": "string",
                "required": true
            },
            {
                "name": "serve_locally",
                "type": "bool"
            },
            {
                "name": "url",
                "type": "string"
            },
            {
                "name": "hash",
                "type": "string"
            },
            {
                "name": "filename",
                "type": "string",
                "description": "The name of the file on the endpoint"
            },
            {
                "name": "version",
                "type": "string"
            },
            {
                "name": "file",
                "type": "OSPath",
                "description": "An optional file to upload"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use to read the file."
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "SERVER_ADMIN"
        }
    },
    {
        "name": "inventory_get",
        "description": "Get tool info from inventory service.",
        "type": "Function",
        "args": [
            {
                "name": "tool",
                "type": "string",
                "required": true
            },
            {
                "name": "version",
                "type": "string"
            },
            {
                "name": "probe",
                "type": "bool",
                "description": "If specified we only probe the tool definition without materializing"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "SERVER_ADMIN"
        }
    },
    {
        "name": "ip",
        "description": "Format an IP address.",
        "type": "Function",
        "args": [
            {
                "name": "netaddr4_le",
                "type": "int64",
                "description": "A network order IPv4 address (as little endian)."
            },
            {
                "name": "netaddr4_be",
                "type": "int64",
                "description": "A network order IPv4 address (as big endian)."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "items",
        "description": "Iterate over dict members producing _key and _value columns",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "Any"
            }
        ],
        "category": "basic"
    },
    {
        "name": "items",
        "description": "Enumerate all members of the item (similar to Python's items() method).",
        "type": "Plugin",
        "args": [
            {
                "name": "item",
                "type": "Any",
                "description": "The item to enumerate."
            }
        ],
        "category": "basic"
    },
    {
        "name": "join",
        "description": "Join all the args on a separator.",
        "type": "Function",
        "args": [
            {
                "name": "array",
                "type": "string",
                "description": "The array to join",
                "repeated": true,
                "required": true
            },
            {
                "name": "sep",
                "type": "string",
                "description": "The separator. Defaults to an empty string if not explicitly set"
            }
        ],
        "category": "basic"
    },
    {
        "name": "js",
        "description": "Compile and run javascript code.",
        "type": "Function",
        "args": [
            {
                "name": "js",
                "type": "string",
                "description": "The body of the javascript code.",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "If set use this key to cache the JS VM."
            }
        ],
        "category": "experimental"
    },
    {
        "name": "js_call",
        "description": "Compile and run javascript code.",
        "type": "Function",
        "args": [
            {
                "name": "func",
                "type": "string",
                "description": "JS function to call.",
                "required": true
            },
            {
                "name": "args",
                "type": "Any",
                "description": "Positional args for the function."
            },
            {
                "name": "key",
                "type": "string",
                "description": "If set use this key to cache the JS VM."
            }
        ],
        "category": "experimental"
    },
    {
        "name": "js_get",
        "description": "Get a variable's value from the JS VM.",
        "type": "Function",
        "args": [
            {
                "name": "var",
                "type": "string",
                "description": "The variable to get from the JS VM.",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "If set use this key to cache the JS VM."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "js_set",
        "description": "Set a variables value in the JS VM.",
        "type": "Function",
        "args": [
            {
                "name": "var",
                "type": "string",
                "description": "The variable to set inside the JS VM.",
                "required": true
            },
            {
                "name": "value",
                "type": "Any",
                "description": "The value to set inside the VM.",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "If set use this key to cache the JS VM."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "killkillkill",
        "description": "Kills the client and forces a restart - this is very aggressive!",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            }
        ],
        "category": "basic",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "label",
        "description": "Add the labels to the client. If op is 'remove' then remove these labels.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "description": "Client ID to label.",
                "required": true
            },
            {
                "name": "labels",
                "type": "string",
                "description": "A list of labels to apply",
                "repeated": true,
                "required": true
            },
            {
                "name": "op",
                "type": "string",
                "description": "An operation on the labels (set, check, remove)"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "LABEL_CLIENT"
        }
    },
    {
        "name": "len",
        "description": "Returns the length of an object.",
        "type": "Function",
        "args": [
            {
                "name": "list",
                "type": "Any",
                "description": "A list of items to filter",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "leveldb",
        "description": "Enumerate all items in a level db database",
        "type": "Plugin",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "description": "The path to the leveldb file."
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "log",
        "description": "Log the message and return TRUE.",
        "type": "Function",
        "version": 2,
        "args": [
            {
                "name": "message",
                "type": "string",
                "description": "Message to log.",
                "required": true
            },
            {
                "name": "dedup",
                "type": "int64",
                "description": "Suppress same message in this many seconds (default 60 sec). Use -1 to disable dedup."
            },
            {
                "name": "args",
                "type": "Any",
                "description": "An array of elements to apply into the format string."
            },
            {
                "name": "level",
                "type": "string",
                "description": "Level to log at (DEFAULT, WARN, ERROR, INFO, DEBUG)."
            }
        ],
        "category": "basic"
    },
    {
        "name": "logging",
        "description": "Watch the logs emitted by the server.",
        "type": "Plugin",
        "args": [
            {
                "name": "component",
                "type": "string"
            }
        ],
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "logscale_upload",
        "description": "Upload rows to LogScale ingestion server.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Source for rows to upload.",
                "required": true
            },
            {
                "name": "apibaseurl",
                "type": "string",
                "description": "Base URL for Ingestion API",
                "required": true
            },
            {
                "name": "ingest_token",
                "type": "string",
                "description": "Ingest token for API",
                "required": true
            },
            {
                "name": "threads",
                "type": "int",
                "description": "How many threads to use to post batched events."
            },
            {
                "name": "http_timeout",
                "type": "int",
                "description": "Timeout for http requests (default: 10s)"
            },
            {
                "name": "max_retries",
                "type": "int",
                "description": "Maximum number of retries before failing an operation. A value < 0 means retry forever. (default: 7200)"
            },
            {
                "name": "root_ca",
                "type": "string",
                "description": "As a better alternative to skip_verify, allows root ca certs to be added here."
            },
            {
                "name": "skip_verify",
                "type": "bool",
                "description": "Skip verification of server certificates (default: false)"
            },
            {
                "name": "batching_timeout_ms",
                "type": "int",
                "description": "Timeout between posts (default: 3000ms)"
            },
            {
                "name": "event_batch_size",
                "type": "int",
                "description": "Items to batch before post (default: 2000)"
            },
            {
                "name": "tag_fields",
                "type": "string",
                "description": "Name of fields to be used as tags. Fields can be renamed using =<newname>",
                "repeated": true
            },
            {
                "name": "stats_interval",
                "type": "int",
                "description": "Interval, in seconds, to post statistics to the log (default: 600, 0 to disable)"
            },
            {
                "name": "debug",
                "type": "bool",
                "description": "Enable verbose logging."
            }
        ]
    },
    {
        "name": "lookupSID",
        "description": "Get information about the SID.",
        "type": "Function",
        "args": [
            {
                "name": "sid",
                "type": "string",
                "description": "A SID to lookup using LookupAccountSid ",
                "required": true
            }
        ],
        "category": "windows"
    },
    {
        "name": "lowcase",
        "description": "Returns the lowercase version of a string.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "The string to process",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "lru",
        "description": "Creates an LRU object",
        "type": "Function",
        "args": [
            {
                "name": "size",
                "type": "int64",
                "description": "Size of the LRU (default 1000)"
            }
        ]
    },
    {
        "name": "lzxpress_decompress",
        "description": "Decompress an lzxpress blob.",
        "type": "Function",
        "args": [
            {
                "name": "data",
                "type": "string",
                "description": "The lzxpress stream (bytes)",
                "required": true
            }
        ]
    },
    {
        "name": "magic",
        "description": "Identify a file using magic rules.",
        "type": "Function",
        "version": 1,
        "args": [
            {
                "name": "path",
                "type": "OSPath",
                "description": "Path to open and hash.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "type",
                "type": "string",
                "description": "Magic type (can be empty or 'mime' or 'extension')"
            },
            {
                "name": "magic",
                "type": "string",
                "description": "Additional magic to load"
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "mail",
        "description": "Send Email to a remote server.",
        "type": "Function",
        "args": [
            {
                "name": "to",
                "type": "string",
                "description": "Recipient of the mail",
                "repeated": true,
                "required": true
            },
            {
                "name": "from",
                "type": "string",
                "description": "The from email address."
            },
            {
                "name": "cc",
                "type": "string",
                "description": "A cc for the mail",
                "repeated": true
            },
            {
                "name": "subject",
                "type": "string",
                "description": "The subject."
            },
            {
                "name": "body",
                "type": "string",
                "description": "The body of the mail.",
                "required": true
            },
            {
                "name": "period",
                "type": "int64",
                "description": "How long to wait before sending the next mail - help to throttle mails."
            },
            {
                "name": "server_port",
                "type": "uint64",
                "description": "The SMTP server port to use (default 587)."
            },
            {
                "name": "server",
                "type": "string",
                "description": "The SMTP server to use (if not specified we try the config file)."
            },
            {
                "name": "auth_username",
                "type": "string",
                "description": "The SMTP username we authenticate to the server."
            },
            {
                "name": "auth_password",
                "type": "string",
                "description": "The SMTP username password we use to authenticate to the server."
            },
            {
                "name": "skip_verify",
                "type": "bool",
                "description": "Skip SSL verification(default: False)."
            },
            {
                "name": "root_ca",
                "type": "string",
                "description": "As a better alternative to disable_ssl_security, allows root ca certs to be added here."
            }
        ],
        "metadata": {
            "permissions": "SERVER_ADMIN"
        }
    },
    {
        "name": "mail",
        "description": "Send Email to a remote server.",
        "type": "Plugin",
        "args": [
            {
                "name": "to",
                "type": "string",
                "description": "Recipient of the mail",
                "repeated": true,
                "required": true
            },
            {
                "name": "from",
                "type": "string",
                "description": "The from email address."
            },
            {
                "name": "cc",
                "type": "string",
                "description": "A cc for the mail",
                "repeated": true
            },
            {
                "name": "subject",
                "type": "string",
                "description": "The subject."
            },
            {
                "name": "body",
                "type": "string",
                "description": "The body of the mail.",
                "required": true
            },
            {
                "name": "period",
                "type": "int64",
                "description": "How long to wait before sending the next mail - help to throttle mails."
            },
            {
                "name": "server_port",
                "type": "uint64",
                "description": "The SMTP server port to use (default 587)."
            },
            {
                "name": "server",
                "type": "string",
                "description": "The SMTP server to use (if not specified we try the config file)."
            },
            {
                "name": "auth_username",
                "type": "string",
                "description": "The SMTP username we authenticate to the server."
            },
            {
                "name": "auth_password",
                "type": "string",
                "description": "The SMTP username password we use to authenticate to the server."
            },
            {
                "name": "skip_verify",
                "type": "bool",
                "description": "Skip SSL verification(default: False)."
            },
            {
                "name": "root_ca",
                "type": "string",
                "description": "As a better alternative to disable_ssl_security, allows root ca certs to be added here."
            }
        ],
        "category": "server"
    },
    {
        "name": "max",
        "description": "Finds the largest item in the aggregate.",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "LazyExpr",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "memoize",
        "description": "Memoize a query into memory.",
        "type": "Function",
        "args": [
            {
                "name": "query",
                "type": "LazyExpr",
                "description": "Query to expand into memory",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "The name of the column to use as a key.",
                "required": true
            },
            {
                "name": "period",
                "type": "int64",
                "description": "The latest age of the cache."
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of this cache."
            }
        ],
        "category": "basic"
    },
    {
        "name": "min",
        "description": "Finds the smallest item in the aggregate.",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "LazyExpr",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "mock",
        "description": "Mock a plugin.",
        "type": "Function",
        "args": [
            {
                "name": "plugin",
                "type": "string",
                "description": "The plugin to mock"
            },
            {
                "name": "function",
                "type": "string",
                "description": "The function to mock"
            },
            {
                "name": "artifact",
                "type": "Any",
                "description": "The artifact to mock"
            },
            {
                "name": "results",
                "type": "LazyExpr",
                "description": "The result to return",
                "required": true
            }
        ],
        "category": "utils"
    },
    {
        "name": "mock_check",
        "description": "Check expectations on a mock.",
        "type": "Function",
        "args": [
            {
                "name": "plugin",
                "type": "string",
                "description": "The plugin to mock"
            },
            {
                "name": "function",
                "type": "string",
                "description": "The function to mock"
            },
            {
                "name": "expected_calls",
                "type": "int",
                "description": "How many times plugin should be called"
            },
            {
                "name": "clear",
                "type": "bool",
                "description": "This call will clear previous mocks for this plugin"
            }
        ],
        "category": "utils"
    },
    {
        "name": "mock_clear",
        "description": "Resets all mocks.",
        "type": "Function"
    },
    {
        "name": "mock_replay",
        "description": "Replay recorded calls on a mock.",
        "type": "Function",
        "args": [
            {
                "name": "plugin",
                "type": "string",
                "description": "The plugin to mock"
            },
            {
                "name": "function",
                "type": "string",
                "description": "The function to mock"
            },
            {
                "name": "expected_calls",
                "type": "int",
                "description": "How many times plugin should be called"
            },
            {
                "name": "clear",
                "type": "bool",
                "description": "This call will clear previous mocks for this plugin"
            }
        ]
    },
    {
        "name": "modules",
        "description": "Enumerate Loaded DLLs.",
        "type": "Plugin",
        "args": [
            {
                "name": "pid",
                "type": "int64",
                "description": "The PID to dump out.",
                "required": true
            }
        ],
        "category": "windows",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "monitoring",
        "description": "Extract monitoring log from a client. If client_id is not specified we watch the global journal which contains event logs from all clients.",
        "type": "Plugin",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to extract",
                "required": true
            },
            {
                "name": "artifact",
                "type": "string",
                "description": "The name of the event artifact to read",
                "required": true
            },
            {
                "name": "source",
                "type": "string",
                "description": "An optional named source within the artifact"
            },
            {
                "name": "start_time",
                "type": "Any",
                "description": "Start return events from this date (for event sources)"
            },
            {
                "name": "end_time",
                "type": "Any",
                "description": "Stop end events reach this time (event sources)."
            },
            {
                "name": "start_row",
                "type": "int64",
                "description": "Start reading the result set from this row"
            },
            {
                "name": "count",
                "type": "int64",
                "description": "Maximum number of clients to fetch (default unlimited)'"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "monitoring_logs",
        "description": "Retrieve log messages from client event monitoring for the specified client id and artifact",
        "type": "Plugin",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to extract",
                "required": true
            },
            {
                "name": "artifact",
                "type": "string",
                "description": "The name of the artifact collection to fetch",
                "required": true
            },
            {
                "name": "source",
                "type": "string",
                "description": "An optional named source within the artifact"
            },
            {
                "name": "start_time",
                "type": "Any",
                "description": "Start return events from this date (for event sources)"
            },
            {
                "name": "end_time",
                "type": "Any",
                "description": "Stop end events reach this time (event sources)."
            }
        ],
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "netcat",
        "description": "Make a tcp connection and read data from a socket.",
        "type": "Plugin",
        "args": [
            {
                "name": "address",
                "type": "string",
                "description": "The address to connect to (can be a file in case of a unix domain socket)",
                "required": true
            },
            {
                "name": "type",
                "type": "string",
                "description": "Can be tcp or unix (default TCP)"
            },
            {
                "name": "send",
                "type": "string",
                "description": "Data to send before reading"
            },
            {
                "name": "sep",
                "type": "string",
                "description": "The separator that will be used to split (default - line feed)"
            },
            {
                "name": "chunk_size",
                "type": "int",
                "description": "Read input with this chunk size (default 64kb)"
            },
            {
                "name": "retry",
                "type": "int",
                "description": "Seconds to wait before retry - default 0 - do not retry"
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "COLLECT_SERVER"
        }
    },
    {
        "name": "netstat",
        "description": "Collect network information.",
        "type": "Plugin",
        "category": "plugin",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "notebook_create",
        "description": "Create a new notebook.",
        "type": "Function",
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "The name of the notebook"
            },
            {
                "name": "description",
                "type": "string",
                "description": "The description of the notebook"
            },
            {
                "name": "collaborators",
                "type": "string",
                "description": "A list of users to share the notebook with.",
                "repeated": true
            },
            {
                "name": "public",
                "type": "bool",
                "description": "If set the notebook will be public."
            },
            {
                "name": "artifacts",
                "type": "string",
                "description": "A list of NOTEBOOK artifacts to create the notebook with (Notebooks.Default)",
                "repeated": true
            },
            {
                "name": "env",
                "type": "ordereddict.Dict",
                "description": "An environment to initialize the notebook with"
            }
        ],
        "metadata": {
            "permissions": "COLLECT_SERVER"
        }
    },
    {
        "name": "notebook_delete",
        "description": "Delete a notebook with all its cells. ",
        "type": "Plugin",
        "args": [
            {
                "name": "notebook_id",
                "type": "string",
                "required": true
            },
            {
                "name": "really_do_it",
                "type": "bool"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "SERVER_ADMIN"
        }
    },
    {
        "name": "notebook_export",
        "description": "Exports a notebook to a zip file or HTML.",
        "type": "Function",
        "args": [
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The id of the notebook to export",
                "required": true
            },
            {
                "name": "filename",
                "type": "string",
                "description": "The name of the export. If not set this will be named according to the notebook id and timestamp"
            },
            {
                "name": "type",
                "type": "string",
                "description": "Set the type of the export (html or zip)."
            }
        ],
        "metadata": {
            "permissions": "PREPARE_RESULTS"
        }
    },
    {
        "name": "notebook_get",
        "description": "Get a notebook.",
        "type": "Function",
        "args": [
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The id of the notebook to fetch",
                "required": true
            }
        ],
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "notebook_update_cell",
        "description": "Update a notebook cell.",
        "type": "Function",
        "args": [
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The id of the notebook to update",
                "required": true
            },
            {
                "name": "cell_id",
                "type": "string",
                "description": "The cell of the notebook to update. If this is empty we add a new cell to the notebook"
            },
            {
                "name": "type",
                "type": "string",
                "description": "Set the type of the cell if needed (markdown or vql)."
            },
            {
                "name": "input",
                "type": "string",
                "description": "The new cell content.",
                "required": true
            },
            {
                "name": "output",
                "type": "string",
                "description": "If this is set, we do not calculate the cell but set this as the rendered output."
            }
        ],
        "metadata": {
            "permissions": "COLLECT_SERVER"
        }
    },
    {
        "name": "now",
        "description": "Returns current time in seconds since epoch.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "Any",
                "description": "A string to convert to int",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "olevba",
        "description": "Extracts VBA Macros from Office documents.",
        "type": "Plugin",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "description": "A list of filenames to open as OLE files.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "max_size",
                "type": "int64",
                "description": "Maximum size of file we load into memory."
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "org",
        "description": "Return the details of the current org.",
        "type": "Function"
    },
    {
        "name": "org_create",
        "description": "Creates a new organization.",
        "type": "Function",
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "The name of the org.",
                "required": true
            },
            {
                "name": "org_id",
                "type": "string",
                "description": "An ID for the new org (if not set use a random ID)."
            }
        ],
        "metadata": {
            "permissions": "ORG_ADMIN"
        }
    },
    {
        "name": "org_delete",
        "description": "Deletes an Org from the server.",
        "type": "Function",
        "args": [
            {
                "name": "org",
                "type": "string",
                "description": "The org ID to delete.",
                "required": true
            },
            {
                "name": "really_do_it",
                "type": "bool",
                "description": "If not specified, just show what org will be removed"
            }
        ],
        "metadata": {
            "permissions": "ORG_ADMIN"
        }
    },
    {
        "name": "orgs",
        "description": "Retrieve the list of orgs on this server.",
        "type": "Plugin"
    },
    {
        "name": "panic",
        "description": "Crash the program with a panic!",
        "type": "Plugin",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "parallelize",
        "description": "Runs query on result batches in parallel.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "The query will be run in parallel over batches.",
                "required": true
            },
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to extract"
            },
            {
                "name": "flow_id",
                "type": "string",
                "description": "A flow ID (client or server artifacts)"
            },
            {
                "name": "hunt_id",
                "type": "string",
                "description": "Retrieve sources from this hunt (combines all results from all clients)"
            },
            {
                "name": "artifact",
                "type": "string",
                "description": "The name of the artifact collection to fetch"
            },
            {
                "name": "source",
                "type": "string",
                "description": "An optional named source within the artifact"
            },
            {
                "name": "start_time",
                "type": "int64",
                "description": "Start return events from this date (for event sources)"
            },
            {
                "name": "end_time",
                "type": "int64",
                "description": "Stop end events reach this time (event sources)."
            },
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The notebook to read from (should also include cell id)"
            },
            {
                "name": "notebook_cell_id",
                "type": "string",
                "description": "The notebook cell read from (should also include notebook id)"
            },
            {
                "name": "notebook_cell_table",
                "type": "int64",
                "description": "A notebook cell can have multiple tables.)"
            },
            {
                "name": "workers",
                "type": "int64",
                "description": "Number of workers to spawn.)"
            },
            {
                "name": "batch",
                "type": "int64",
                "description": "Number of rows in each batch.)"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "parse_auditd",
        "description": "Parse log files generated by auditd.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "A list of log files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "buffer_size",
                "type": "int",
                "description": "Maximum size of line buffer."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_binary",
        "description": "Parse a binary file into a data structure using a profile.",
        "type": "Function",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "Binary file to open.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "profile",
                "type": "string",
                "description": "Profile to use (see https://github.com/Velocidex/vtypes)."
            },
            {
                "name": "struct",
                "type": "string",
                "description": "Name of the struct in the profile to instantiate.",
                "required": true
            },
            {
                "name": "offset",
                "type": "int64",
                "description": "Start parsing from this offset"
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "parse_csv",
        "description": "Parses events from a CSV file.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "CSV files to open",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "auto_headers",
                "type": "bool",
                "description": "If unset the first row is headers"
            },
            {
                "name": "separator",
                "type": "string",
                "description": "Comma separator (default ',')"
            },
            {
                "name": "comment",
                "type": "string",
                "description": "The single character that should be considered a comment"
            },
            {
                "name": "columns",
                "type": "string",
                "description": "The columns to use",
                "repeated": true
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "parse_ese",
        "description": "Opens an ESE file and dump a table.",
        "type": "Plugin",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "table",
                "type": "string",
                "description": "A table name to dump",
                "required": true
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "parse_ese_catalog",
        "description": "Opens an ESE file and dump the schema.",
        "type": "Plugin",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "parse_evtx",
        "description": "Parses events from an EVTX file.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "A list of event log files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "messagedb",
                "type": "string",
                "description": "A Message database from https://github.com/Velocidex/evtx-data."
            },
            {
                "name": "workers",
                "type": "int64",
                "description": "If specified we use this many workers to parse the file in parallel (default 1)."
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "parse_float",
        "description": "Convert a string to a float.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "Any",
                "description": "A string to convert to int",
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_json",
        "description": "Parse a JSON string into an object.",
        "type": "Function",
        "args": [
            {
                "name": "data",
                "type": "string",
                "description": "Json encoded string.",
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_json_array",
        "description": "Parse a JSON string into an array.",
        "type": "Function",
        "args": [
            {
                "name": "data",
                "type": "string",
                "description": "Json encoded string.",
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_json_array",
        "description": "Parses events from a line oriented json file.",
        "type": "Plugin",
        "args": [
            {
                "name": "data",
                "type": "string",
                "description": "Json encoded string.",
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_jsonl",
        "description": "Parses a line oriented json file.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "JSON file to open",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "parse_lines",
        "description": "Parse a file separated into lines.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "A list of log files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "buffer_size",
                "type": "int",
                "description": "Maximum size of line buffer."
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "parse_mft",
        "description": "Scan the $MFT from an NTFS volume.",
        "type": "Plugin",
        "version": 2,
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "The MFT file.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "prefix",
                "type": "OSPath",
                "description": "If specified we prefix all paths with this path."
            },
            {
                "name": "start",
                "type": "int64",
                "description": "The first entry to scan."
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "parse_ntfs",
        "description": "Parse specific inodes from an NTFS image file or the raw device.",
        "type": "Function",
        "args": [
            {
                "name": "device",
                "type": "string",
                "description": "The device file to open. This may be a full path for example C:\\Windows - we will figure out the device automatically."
            },
            {
                "name": "filename",
                "type": "OSPath",
                "description": "A raw image to open. You can also provide the accessor if using a raw image file."
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "inode",
                "type": "string",
                "description": "The MFT entry to parse in inode notation (5-144-1)."
            },
            {
                "name": "mft",
                "type": "int64",
                "description": "The MFT entry to parse."
            },
            {
                "name": "mft_offset",
                "type": "int64",
                "description": "The offset to the MFT entry to parse."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_ntfs_i30",
        "description": "Scan the $I30 stream from an NTFS MFT entry.",
        "type": "Plugin",
        "args": [
            {
                "name": "device",
                "type": "string",
                "description": "The device file to open. This may be a full path for example C:\\Windows - we will figure out the device automatically."
            },
            {
                "name": "filename",
                "type": "OSPath",
                "description": "A raw image to open. You can also provide the accessor if using a raw image file."
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "inode",
                "type": "string",
                "description": "The MFT entry to parse in inode notation (5-144-1)."
            },
            {
                "name": "mft",
                "type": "int64",
                "description": "The MFT entry to parse."
            },
            {
                "name": "mft_offset",
                "type": "int64",
                "description": "The offset to the MFT entry to parse."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_ntfs_ranges",
        "description": "Show the run ranges for an NTFS stream.",
        "type": "Plugin",
        "args": [
            {
                "name": "device",
                "type": "string",
                "description": "The device file to open. This may be a full path for example C:\\Windows - we will figure out the device automatically."
            },
            {
                "name": "filename",
                "type": "OSPath",
                "description": "A raw image to open. You can also provide the accessor if using a raw image file."
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "inode",
                "type": "string",
                "description": "The MFT entry to parse in inode notation (5-144-1)."
            },
            {
                "name": "mft",
                "type": "int64",
                "description": "The MFT entry to parse."
            },
            {
                "name": "mft_offset",
                "type": "int64",
                "description": "The offset to the MFT entry to parse."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_pe",
        "description": "Parse a PE file.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "description": "The PE file to open.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "base_offset",
                "type": "int64",
                "description": "The offset in the file for the base address."
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "parse_pkcs7",
        "description": "Parse a DER encoded pkcs7 string into an object.",
        "type": "Function",
        "args": [
            {
                "name": "data",
                "type": "string",
                "description": "PKCS7 DER encoded string.",
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_records_with_regex",
        "description": "Parses a file with a set of regexp and yields matches as records.  The\nfile is read into a large buffer. Then each regular expression is\napplied to the buffer, and all matches are emitted as rows.",
        "type": "Plugin",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "description": "A list of files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "regex",
                "type": "string",
                "description": "A list of regex to apply to the file data.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "buffer_size",
                "type": "int",
                "description": "Maximum size of line buffer (default 64kb)."
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "parse_recyclebin",
        "description": "Parses a $I file found in the $Recycle.Bin",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "Files to be parsed.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "parse_string_with_regex",
        "description": "Parse a string with a set of regex and extract fields. Returns a dict with fields populated from all regex capture variables.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "A string to parse.",
                "required": true
            },
            {
                "name": "regex",
                "type": "string",
                "description": "The regex to apply.",
                "repeated": true,
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_usn",
        "description": "Parse the USN journal from a device.",
        "type": "Plugin",
        "args": [
            {
                "name": "device",
                "type": "OSPath",
                "description": "The device file to open.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "start_offset",
                "type": "int64",
                "description": "The starting offset of the first USN record to parse."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_x509",
        "description": "Parse a DER encoded x509 string into an object.",
        "type": "Function",
        "args": [
            {
                "name": "data",
                "type": "string",
                "description": "X509 DER encoded string.",
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_xml",
        "description": "Parse an XML document into a dict like object.\n",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "description": "XML file to open.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "parse_yaml",
        "description": "Parse yaml into an object.",
        "type": "Function",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "Yaml Filename",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "File accessor"
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "partitions",
        "description": "List all partitions",
        "type": "Plugin",
        "category": "windows"
    },
    {
        "name": "passwd",
        "description": "Updates the user's password.",
        "type": "Function",
        "args": [
            {
                "name": "user",
                "type": "string",
                "description": "The user to set password for. If not set, changes the current user's password."
            },
            {
                "name": "password",
                "type": "string",
                "description": "The new password to set.",
                "required": true
            }
        ]
    },
    {
        "name": "patch",
        "description": "Patch a JSON object with a json patch or merge.",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "Any",
                "description": "The item to path",
                "required": true
            },
            {
                "name": "patch",
                "type": "Any",
                "description": "A JSON Patch to apply"
            },
            {
                "name": "merge",
                "type": "Any",
                "description": "A merge-patch to apply"
            }
        ],
        "category": "server"
    },
    {
        "name": "path_join",
        "description": "Build a path by joining all components.",
        "type": "Function",
        "args": [
            {
                "name": "components",
                "type": "Any",
                "description": "Path components to join.",
                "repeated": true,
                "required": true
            },
            {
                "name": "sep",
                "type": "string",
                "description": "Separator to use (default /)"
            },
            {
                "name": "path_type",
                "type": "string",
                "description": "Type of path (e.g. 'windows')"
            }
        ],
        "category": "basic"
    },
    {
        "name": "path_split",
        "description": "Split a path into components. Note this is more complex than just split() because it takes into account path escaping.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "Any",
                "description": "Path to split into components.",
                "required": true
            },
            {
                "name": "path_type",
                "type": "string",
                "description": "Type of path (e.g. 'windows')"
            }
        ],
        "category": "basic"
    },
    {
        "name": "pathspec",
        "description": "Create a structured path spec to pass to certain accessors.",
        "type": "Function",
        "version": 1,
        "args": [
            {
                "name": "DelegateAccessor",
                "type": "string",
                "description": "An accessor to use."
            },
            {
                "name": "DelegatePath",
                "type": "string",
                "description": "A delegate to pass to the accessor."
            },
            {
                "name": "Path",
                "type": "Any",
                "description": "A path to open."
            },
            {
                "name": "parse",
                "type": "string",
                "description": "Alternatively parse the pathspec from this string."
            },
            {
                "name": "path_type",
                "type": "string",
                "description": "Type of path this is (windows,linux,registry,ntfs)."
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use to parse the path with"
            }
        ],
        "category": "plugin"
    },
    {
        "name": "pe_dump",
        "description": "Dump a PE file from process memory.",
        "type": "Function",
        "args": [
            {
                "name": "pid",
                "type": "uint64",
                "description": "The pid to dump.",
                "required": true
            },
            {
                "name": "base_offset",
                "type": "int64",
                "description": "The offset in the file for the base address.",
                "required": true
            },
            {
                "name": "in_memory",
                "type": "uint64",
                "description": "By default we store to a tempfile and return the path. If this option is larger than 0, we prepare the file in a memory buffer at the specified limit, to avoid AV alerts on disk access."
            }
        ],
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "pipe",
        "description": "A pipe allows plugins that use files to read data from a vql\nquery. This is needed to be able to use the \"pipe\" accessor.",
        "type": "Function",
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "Name to call the pipe"
            },
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Run this query to generator data - the first column will be appended to pipe data."
            },
            {
                "name": "sep",
                "type": "string",
                "description": "The separator that will be used to split each read (default: no separator will be used)"
            }
        ],
        "category": "plugin"
    },
    {
        "name": "pk_decrypt",
        "description": "Decrypt files using pubkey encryption",
        "type": "Function",
        "args": [
            {
                "name": "data",
                "type": "string",
                "description": "The data to decrypt",
                "required": true
            },
            {
                "name": "signing_key",
                "type": "string",
                "description": "Public key to verify signature"
            },
            {
                "name": "private_key",
                "type": "string",
                "description": "Private key to decrypt with. Defaults to server private key"
            },
            {
                "name": "scheme",
                "type": "string",
                "description": "Encryption scheme to use. Defaults to RSA. Currently supported: PGP,RSA"
            }
        ]
    },
    {
        "name": "pk_encrypt",
        "description": "Encrypt files using pubkey encryption",
        "type": "Function",
        "args": [
            {
                "name": "data",
                "type": "string",
                "description": "The data to encrypt",
                "required": true
            },
            {
                "name": "signing_key",
                "type": "string",
                "description": "Private key to sign with"
            },
            {
                "name": "public_key",
                "type": "string",
                "description": "Public key to encrypt with. Defaults to server public key"
            },
            {
                "name": "scheme",
                "type": "string",
                "description": "Encryption scheme to use. Defaults to X509. Currently supported: PGP,X509"
            }
        ],
        "metadata": {
            "permissions": "SERVER_ADMIN"
        }
    },
    {
        "name": "plist",
        "description": "Parse plist file",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "description": "A list of files to parse.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "plist",
        "description": "Parses a plist file.",
        "type": "Plugin",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "description": "A list of files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "prefetch",
        "description": "Parses a prefetch file.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "A list of event log files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "proc_dump",
        "description": "Dumps process memory.",
        "type": "Plugin",
        "args": [
            {
                "name": "pid",
                "type": "int64",
                "description": "The PID to dump out.",
                "required": true
            }
        ],
        "category": "windows",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "proc_yara",
        "description": "Scan processes using yara rules.",
        "type": "Plugin",
        "args": [
            {
                "name": "rules",
                "type": "string",
                "description": "Yara rules",
                "required": true
            },
            {
                "name": "pid",
                "type": "int",
                "description": "The pid to scan",
                "required": true
            },
            {
                "name": "context",
                "type": "int",
                "description": "Return this many bytes either side of a hit"
            },
            {
                "name": "key",
                "type": "string",
                "description": "If set use this key to cache the  yara rules."
            },
            {
                "name": "namespace",
                "type": "string",
                "description": "The Yara namespece to use."
            },
            {
                "name": "vars",
                "type": "ordereddict.Dict",
                "description": "The Yara variables to use."
            },
            {
                "name": "number",
                "type": "int64",
                "description": "Stop after this many hits (1)."
            }
        ],
        "category": "windows",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "process_tracker",
        "description": "Install a global process tracker.",
        "type": "Function",
        "args": [
            {
                "name": "sync_query",
                "type": "StoredQuery",
                "description": "Source for full tracker updates. Query must emit rows with the ProcessTrackerUpdate shape - usually uses pslist() to form a full sync."
            },
            {
                "name": "sync_period",
                "type": "int64",
                "description": "How often to do a full sync (default 5000 msec)."
            },
            {
                "name": "update_query",
                "type": "StoredQuery",
                "description": "An Event query that produces live updates of the tracker state."
            },
            {
                "name": "max_size",
                "type": "int64",
                "description": "Maximum size of process tracker LRU."
            },
            {
                "name": "enrichments",
                "type": "string",
                "description": "One or more VQL lambda functions that can enrich the data for the process.",
                "repeated": true
            }
        ]
    },
    {
        "name": "process_tracker_all",
        "description": "Get all processes stored in the tracker.",
        "type": "Function"
    },
    {
        "name": "process_tracker_callchain",
        "description": "Get a call chain from the global process tracker.",
        "type": "Function",
        "args": [
            {
                "name": "id",
                "type": "string",
                "description": "Process ID.",
                "required": true
            }
        ]
    },
    {
        "name": "process_tracker_children",
        "description": "Get all children of a process.",
        "type": "Function",
        "args": [
            {
                "name": "id",
                "type": "string",
                "description": "Process ID.",
                "required": true
            }
        ]
    },
    {
        "name": "process_tracker_get",
        "description": "Get a single process from the global tracker.",
        "type": "Function",
        "args": [
            {
                "name": "id",
                "type": "string",
                "description": "Process ID.",
                "required": true
            }
        ]
    },
    {
        "name": "process_tracker_pslist",
        "description": "List all processes from the process tracker.",
        "type": "Plugin"
    },
    {
        "name": "process_tracker_tree",
        "description": "Get the full process tree under the process id.",
        "type": "Function",
        "args": [
            {
                "name": "id",
                "type": "string",
                "description": "Process ID."
            },
            {
                "name": "data_callback",
                "type": "Lambda",
                "description": "A VQL Lambda function to that receives a ProcessEntry and returns the data node for each process."
            }
        ]
    },
    {
        "name": "process_tracker_updates",
        "description": "Get the process tracker update events from the global process tracker.",
        "type": "Plugin"
    },
    {
        "name": "profile",
        "description": "Returns a profile dump from the running process.",
        "type": "Plugin",
        "args": [
            {
                "name": "allocs",
                "type": "bool",
                "description": "A sampling of all past memory allocations"
            },
            {
                "name": "block",
                "type": "bool",
                "description": "Stack traces that led to blocking on synchronization primitives"
            },
            {
                "name": "goroutine",
                "type": "bool",
                "description": "Stack traces of all current goroutines"
            },
            {
                "name": "heap",
                "type": "bool",
                "description": "A sampling of memory allocations of live objects."
            },
            {
                "name": "mutex",
                "type": "bool",
                "description": "Stack traces of holders of contended mutexes"
            },
            {
                "name": "profile",
                "type": "bool",
                "description": "CPU profile."
            },
            {
                "name": "trace",
                "type": "bool",
                "description": "CPU trace."
            },
            {
                "name": "debug",
                "type": "int64",
                "description": "Debug level"
            },
            {
                "name": "logs",
                "type": "bool",
                "description": "Recent logs"
            },
            {
                "name": "queries",
                "type": "bool",
                "description": "Recent Queries run"
            },
            {
                "name": "metrics",
                "type": "bool",
                "description": "Collect metrics"
            },
            {
                "name": "duration",
                "type": "int64",
                "description": "Duration of samples (default 30 sec)"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The type of profile (this is a regex of debug output types that will be shown)."
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "profile_goroutines",
        "description": "Enumerates all running goroutines.",
        "type": "Plugin",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "profile_memory",
        "description": "Enumerates all in use memory within the runtime.",
        "type": "Plugin",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "pskill",
        "description": "Kill the specified process.",
        "type": "Function",
        "args": [
            {
                "name": "pid",
                "type": "int64",
                "description": "A pid to kill.",
                "required": true
            }
        ],
        "metadata": {
            "permissions": "EXECVE"
        }
    },
    {
        "name": "pslist",
        "description": "Enumerate running processes.",
        "type": "Plugin",
        "args": [
            {
                "name": "pid",
                "type": "int64",
                "description": "A pid to list. If this is provided we are able to operate much faster by only opening a single process."
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "query",
        "description": "Launch a subquery and materialize it into a list of rows.",
        "type": "Function",
        "args": [
            {
                "name": "vql",
                "type": "StoredQuery",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "query",
        "description": "Evaluate a VQL query.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "Any",
                "description": "A VQL Query to parse and execute.",
                "required": true
            },
            {
                "name": "env",
                "type": "ordereddict.Dict",
                "description": "A dict of args to insert into the scope."
            },
            {
                "name": "cpu_limit",
                "type": "float64",
                "description": "Average CPU usage in percent of a core."
            },
            {
                "name": "iops_limit",
                "type": "float64",
                "description": "Average IOPs to target."
            },
            {
                "name": "timeout",
                "type": "float64",
                "description": "Cancel the query after this many seconds"
            },
            {
                "name": "progress_timeout",
                "type": "float64",
                "description": "If no progress is detected in this many seconds, we terminate the query and output debugging information"
            },
            {
                "name": "org_id",
                "type": "string",
                "description": "If specified, the query will run in the specified org space (Use 'root' to refer to the root org)"
            },
            {
                "name": "runas",
                "type": "string",
                "description": "If specified, the query will run as the specified user"
            },
            {
                "name": "inherit",
                "type": "bool",
                "description": "If specified we inherit the scope instead of building a new one."
            }
        ],
        "metadata": {
            "permissions": "IMPERSONATION"
        }
    },
    {
        "name": "rand",
        "description": "Selects a random number.",
        "type": "Function",
        "args": [
            {
                "name": "range",
                "type": "int64",
                "description": "Selects a random number up to this range."
            }
        ],
        "category": "basic"
    },
    {
        "name": "range",
        "description": "Iterate over range.",
        "type": "Plugin",
        "args": [
            {
                "name": "start",
                "type": "int64",
                "description": "Start index (0 based - default 0)"
            },
            {
                "name": "end",
                "type": "int64",
                "description": "End index (0 based)",
                "required": true
            },
            {
                "name": "step",
                "type": "int64",
                "description": "Step (default 1)"
            }
        ],
        "category": "basic"
    },
    {
        "name": "rate",
        "description": "Calculates the rate (derivative) between two quantities.",
        "type": "Function",
        "args": [
            {
                "name": "x",
                "type": "float64",
                "description": "The X float",
                "required": true
            },
            {
                "name": "y",
                "type": "float64",
                "description": "The Y float",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "read_crypto_file",
        "description": "Read a previously stored encrypted local storage file.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "Path to the file to write",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            }
        ],
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "read_file",
        "description": "Read a file into a string.",
        "type": "Function",
        "args": [
            {
                "name": "length",
                "type": "int",
                "description": "Max length of the file to read."
            },
            {
                "name": "offset",
                "type": "int64",
                "description": "Where to read from the file."
            },
            {
                "name": "filename",
                "type": "OSPath",
                "description": "One or more files to open.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "An accessor to use."
            }
        ],
        "category": "basic",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "read_file",
        "description": "Read files in chunks.",
        "type": "Plugin",
        "args": [
            {
                "name": "chunk",
                "type": "int",
                "description": "length of each chunk to read from the file."
            },
            {
                "name": "max_length",
                "type": "int",
                "description": "Max length of the file to read."
            },
            {
                "name": "filenames",
                "type": "OSPath",
                "description": "One or more files to open.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "An accessor to use."
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "read_reg_key",
        "description": "This is a convenience plugin which applies the globs to the registry\naccessor to find keys. For each key the plugin then lists all the\nvalues within it, and returns a row which has the value names as\ncolumns, while the cells contain the value's stat info (and data\ncontent available in the `Data` field).",
        "type": "Plugin",
        "args": [
            {
                "name": "globs",
                "type": "string",
                "description": "Glob expressions to apply.",
                "repeated": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "root",
                "type": "OSPath",
                "description": "The root directory to glob from (default '/')."
            }
        ],
        "category": "windows"
    },
    {
        "name": "reg_rm_key",
        "description": "Removes a key and all its values from the registry.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "Registry key path.",
                "required": true
            }
        ],
        "category": "plugin"
    },
    {
        "name": "reg_rm_value",
        "description": "Removes a value in the registry.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "Registry value path.",
                "required": true
            }
        ],
        "category": "plugin"
    },
    {
        "name": "reg_set_value",
        "description": "Set a value in the registry.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "Registry value path.",
                "required": true
            },
            {
                "name": "value",
                "type": "LazyExpr",
                "description": "Value to set",
                "required": true
            },
            {
                "name": "type",
                "type": "string",
                "description": "Type to set (SZ, DWORD, QWORD)",
                "required": true
            },
            {
                "name": "create",
                "type": "bool",
                "description": "Set to create missing intermediate keys"
            }
        ],
        "category": "plugin"
    },
    {
        "name": "regex_replace",
        "description": "Search and replace a string with a regexp. Note you can use $1 to replace the capture string.",
        "type": "Function",
        "args": [
            {
                "name": "source",
                "type": "string",
                "description": "The source string to replace.",
                "required": true
            },
            {
                "name": "replace",
                "type": "string",
                "description": "The substitute string."
            },
            {
                "name": "replace_lambda",
                "type": "string",
                "description": "Optionally the replacement can be a lambda."
            },
            {
                "name": "re",
                "type": "string",
                "description": "A regex to apply",
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "regex_transform",
        "description": "Search and replace a string with multiple regex. Note you can use $1\nto replace the capture string.",
        "type": "Function",
        "args": [
            {
                "name": "source",
                "type": "string",
                "description": "The source string to replace.",
                "required": true
            },
            {
                "name": "map",
                "type": "ordereddict.Dict",
                "description": "A dict with keys reg, values substitutions.",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "A key for caching"
            }
        ],
        "category": "basic"
    },
    {
        "name": "rekey",
        "description": "Causes the client to rekey and regenerate a new client ID. DANGEROUS! This will change the client's identity and it will appear as a new client in the GUI.",
        "type": "Function",
        "args": [
            {
                "name": "wait",
                "type": "int64",
                "description": "Wait this long before rekeying the client."
            }
        ],
        "metadata": {
            "permissions": "EXECVE"
        }
    },
    {
        "name": "relpath",
        "description": "Return the relative path of .",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "Extract directory name of path",
                "required": true
            },
            {
                "name": "base",
                "type": "string",
                "description": "The base of the path",
                "required": true
            },
            {
                "name": "sep",
                "type": "string",
                "description": "Separator to use (default native)"
            }
        ],
        "category": "basic"
    },
    {
        "name": "remap",
        "description": "Apply a remapping configuration to the root scope.",
        "type": "Function",
        "args": [
            {
                "name": "config",
                "type": "string",
                "description": "A Valid remapping configuration in YAML format",
                "required": true
            },
            {
                "name": "copy",
                "type": "string",
                "description": "Accessors to copy to the new scope",
                "repeated": true
            },
            {
                "name": "clear",
                "type": "bool",
                "description": "If set we clear all accessors from the device manager"
            }
        ]
    },
    {
        "name": "repack",
        "description": "Repack and upload a repacked binary or MSI to the server.",
        "type": "Function",
        "args": [
            {
                "name": "target",
                "type": "string",
                "description": "The name of the target OS to repack (VelociraptorWindows, VelociraptorLinux, VelociraptorDarwin)"
            },
            {
                "name": "version",
                "type": "string",
                "description": "Velociraptor Version to repack"
            },
            {
                "name": "exe",
                "type": "OSPath",
                "description": "Alternative a path to the executable to repack"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use to read the file."
            },
            {
                "name": "binaries",
                "type": "string",
                "description": "List of tool names that will be repacked into the target",
                "repeated": true
            },
            {
                "name": "config",
                "type": "string",
                "description": "The config to be repacked in the form of a json or yaml string",
                "required": true
            },
            {
                "name": "upload_name",
                "type": "string",
                "description": "The name of the upload to create",
                "required": true
            }
        ],
        "metadata": {
            "permissions": "COLLECT_SERVER"
        }
    },
    {
        "name": "rm",
        "description": "Remove a file from the filesystem using the API.",
        "type": "Function",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "Filename to remove.",
                "required": true
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "FILESYSTEM_WRITE"
        }
    },
    {
        "name": "rm_client_monitoring",
        "description": "Remove an artifact from the client monitoring table.",
        "type": "Function",
        "args": [
            {
                "name": "artifact",
                "type": "string",
                "description": "The name of the artifact to remove from the event table",
                "required": true
            },
            {
                "name": "label",
                "type": "string",
                "description": "Remove this artifact from this label group (default the 'all'  group)"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "COLLECT_CLIENT"
        }
    },
    {
        "name": "rm_server_monitoring",
        "description": "Remove an artifact from the server monitoring table.",
        "type": "Function",
        "args": [
            {
                "name": "artifact",
                "type": "string",
                "description": "The name of the artifact to remove",
                "required": true
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "COLLECT_SERVER"
        }
    },
    {
        "name": "rot13",
        "description": "Apply rot13 deobfuscation to the string.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string"
            }
        ],
        "category": "parsers"
    },
    {
        "name": "sample",
        "description": "Executes 'query' and samples every n'th row.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Source query.",
                "required": true
            },
            {
                "name": "n",
                "type": "int64",
                "description": "Pick every n row from query.",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "scope",
        "description": "return the scope.",
        "type": "Function",
        "category": "basic"
    },
    {
        "name": "scope",
        "description": "The scope plugin returns the current scope as a single row.",
        "type": "Plugin",
        "category": "plugin"
    },
    {
        "name": "send_event",
        "description": "Sends an event to a server event monitoring queue.",
        "type": "Function",
        "args": [
            {
                "name": "artifact",
                "type": "string",
                "description": "The artifact name to send the event to.",
                "required": true
            },
            {
                "name": "row",
                "type": "ordereddict.Dict",
                "description": "The row to send to the artifact",
                "required": true
            }
        ],
        "category": "event",
        "metadata": {
            "permissions": "SERVER_ADMIN,PUBLISH"
        }
    },
    {
        "name": "sequence",
        "description": "Combines the output of many queries into an in memory fifo. After\neach row is received from any subquery runs the query specified in\nthe 'query' parameter to retrieve rows from the memory SEQUENCE\nobject.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Run this query to generate rows. The query should select from SEQUENCE which will contain the current set of rows in the sequence. The query will be run on each new row that is pushed to the sequence.",
                "required": true
            },
            {
                "name": "max_age",
                "type": "int64",
                "description": "Maximum number of seconds to hold rows in the sequence."
            }
        ],
        "category": "experimental"
    },
    {
        "name": "serialize",
        "description": "Encode an object as a string (csv or json).",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "Any",
                "description": "The item to encode",
                "required": true
            },
            {
                "name": "format",
                "type": "string",
                "description": "Encoding format (csv,json,yaml,hex,base64)"
            }
        ],
        "category": "basic"
    },
    {
        "name": "server_frontend_cert",
        "description": "Get Server Frontend Certificate",
        "type": "Function",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "server_metadata",
        "description": "Returns server metadata from the datastore. Server metadata is a\nset of free form key/value data\n",
        "type": "Function",
        "category": "server",
        "metadata": {
            "permissions": "SERVER_ADMIN"
        }
    },
    {
        "name": "server_set_metadata",
        "description": "Sets server metadata. Server metadata is a set of free form\nkey/value data, usually used for configuration of artifacts.",
        "type": "Function",
        "args": [
            {
                "name": "metadata",
                "type": "ordereddict.Dict",
                "description": "A dict containing metadata. If not specified we use kwargs."
            }
        ],
        "category": "server"
    },
    {
        "name": "set",
        "description": "Sets the member field of the item. If item is omitted sets the scope.",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "Any",
                "description": "A dict to set",
                "required": true
            },
            {
                "name": "field",
                "type": "string",
                "description": "The field to set",
                "required": true
            },
            {
                "name": "value",
                "type": "Any",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "set_client_monitoring",
        "description": "Sets the current client monitoring state.",
        "type": "Function",
        "args": [
            {
                "name": "value",
                "type": "Any",
                "description": "The Value to set",
                "required": true
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "COLLECT_CLIENT"
        }
    },
    {
        "name": "set_server_monitoring",
        "description": "Sets the current server monitoring state.",
        "type": "Function",
        "args": [
            {
                "name": "value",
                "type": "Any",
                "description": "The Value to set",
                "required": true
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "COLLECT_SERVER"
        }
    },
    {
        "name": "sigma",
        "description": "Evaluate sigma rules.",
        "type": "Plugin",
        "args": [
            {
                "name": "rules",
                "type": "string",
                "description": "A list of sigma rules to compile.",
                "repeated": true,
                "required": true
            },
            {
                "name": "log_sources",
                "type": "Any",
                "description": "A log source object as obtained from the sigma_log_sources() VQL function.",
                "required": true
            },
            {
                "name": "field_mapping",
                "type": "ordereddict.Dict",
                "description": "A dict containing a mapping between a rule field name and a VQL Lambda to get the value of the field from the event."
            },
            {
                "name": "debug",
                "type": "bool",
                "description": "If enabled we emit all match objects with description of what would match."
            },
            {
                "name": "rule_filter",
                "type": "Lambda",
                "description": "If specified we use this callback to filter the rules for inclusion."
            },
            {
                "name": "default_details",
                "type": "Lambda",
                "description": "If specified we use this callback to determine a details column if the sigma rule does not specify it."
            }
        ]
    },
    {
        "name": "sigma_log_sources",
        "description": "Constructs a Log sources object to be used in sigma rules. Call with args being category/product/service and values being stored queries. You may use a * as a placeholder for any of these fields.",
        "type": "Function"
    },
    {
        "name": "sleep",
        "description": "Sleep for the specified number of seconds. Always returns true.",
        "type": "Function",
        "args": [
            {
                "name": "time",
                "type": "int64",
                "description": "The number of seconds to sleep"
            },
            {
                "name": "ms",
                "type": "int64",
                "description": "The number of ms to sleep"
            }
        ],
        "category": "basic"
    },
    {
        "name": "slice",
        "description": "Slice an array.",
        "type": "Function",
        "args": [
            {
                "name": "list",
                "type": "Any",
                "description": "A list of items to slice",
                "required": true
            },
            {
                "name": "start",
                "type": "uint64",
                "description": "Start index (0 based)",
                "required": true
            },
            {
                "name": "end",
                "type": "uint64",
                "description": "End index (0 based)",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "source",
        "description": "Retrieve rows from an artifact's source.",
        "type": "Plugin",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to extract"
            },
            {
                "name": "flow_id",
                "type": "string",
                "description": "A flow ID (client or server artifacts)"
            },
            {
                "name": "hunt_id",
                "type": "string",
                "description": "Retrieve sources from this hunt (combines all results from all clients)"
            },
            {
                "name": "artifact",
                "type": "string",
                "description": "The name of the artifact collection to fetch"
            },
            {
                "name": "source",
                "type": "string",
                "description": "An optional named source within the artifact"
            },
            {
                "name": "start_time",
                "type": "Any",
                "description": "Start return events from this date (for event sources)"
            },
            {
                "name": "end_time",
                "type": "Any",
                "description": "Stop end events reach this time (event sources)."
            },
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The notebook to read from (should also include cell id)"
            },
            {
                "name": "notebook_cell_id",
                "type": "string",
                "description": "The notebook cell read from (should also include notebook id)"
            },
            {
                "name": "notebook_cell_version",
                "type": "string",
                "description": "The notebook cell version to read from (should also include notebook id and notebook cell)"
            },
            {
                "name": "notebook_cell_table",
                "type": "int64",
                "description": "A notebook cell can have multiple tables.)"
            },
            {
                "name": "start_row",
                "type": "int64",
                "description": "Start reading the result set from this row"
            },
            {
                "name": "count",
                "type": "int64",
                "description": "Maximum number of clients to fetch (default unlimited)'"
            },
            {
                "name": "orgs",
                "type": "string",
                "description": "Run the query over these orgs. If empty use the current org.'",
                "repeated": true
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "split",
        "description": "Splits a string into an array based on a regexp separator.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "The value to split",
                "required": true
            },
            {
                "name": "sep",
                "type": "string",
                "description": "The separator that will be used to split"
            },
            {
                "name": "sep_string",
                "type": "string",
                "description": "The separator as string that will be used to split"
            }
        ],
        "category": "basic"
    },
    {
        "name": "split_records",
        "description": "Parses files by splitting lines into records.",
        "type": "Plugin",
        "args": [
            {
                "name": "filenames",
                "type": "OSPath",
                "description": "Files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "regex",
                "type": "string",
                "description": "The split regular expression (e.g. a comma, default whitespace)"
            },
            {
                "name": "columns",
                "type": "string",
                "description": "If the first row is not the headers, this arg must provide a list of column names for each value.",
                "repeated": true
            },
            {
                "name": "first_row_is_headers",
                "type": "bool",
                "description": "A bool indicating if we should get column names from the first row."
            },
            {
                "name": "count",
                "type": "int",
                "description": "Only split into this many columns if possible."
            },
            {
                "name": "record_regex",
                "type": "string",
                "description": "A regex to split data into records (default "
            },
            {
                "name": "buffer_size",
                "type": "int",
                "description": "Maximum size of line buffer (default 64kb)."
            }
        ],
        "category": "parsers",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "splunk_upload",
        "description": "Upload rows to splunk.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Source for rows to upload.",
                "required": true
            },
            {
                "name": "threads",
                "type": "int64",
                "description": "How many threads to use."
            },
            {
                "name": "url",
                "type": "string",
                "description": "The Splunk Event Collector URL.",
                "required": true
            },
            {
                "name": "token",
                "type": "string",
                "description": "Splunk HEC Token."
            },
            {
                "name": "index",
                "type": "string",
                "description": "The name of the index to upload to.",
                "required": true
            },
            {
                "name": "source",
                "type": "string",
                "description": "The source field for splunk. If not specified this will be 'velociraptor'."
            },
            {
                "name": "sourcetype",
                "type": "string",
                "description": "The sourcetype field for splunk. If not specified this will 'vql'"
            },
            {
                "name": "chunk_size",
                "type": "int64",
                "description": "The number of rows to send at the time."
            },
            {
                "name": "skip_verify",
                "type": "bool",
                "description": "Skip SSL verification(default: False)."
            },
            {
                "name": "root_ca",
                "type": "string",
                "description": "As a better alternative to skip_verify, allows root ca certs to be added here."
            },
            {
                "name": "wait_time",
                "type": "int64",
                "description": "Batch splunk upload this long (2 sec)."
            },
            {
                "name": "hostname",
                "type": "string",
                "description": "Hostname for Splunk Events. Defaults to server hostname."
            },
            {
                "name": "timestamp_field",
                "type": "string",
                "description": "Field to use as event timestamp."
            },
            {
                "name": "hostname_field",
                "type": "string",
                "description": "Field to use as event hostname. Overrides hostname parameter."
            },
            {
                "name": "secret",
                "type": "string",
                "description": "Alternatively use a secret from the secrets service. Secret must be of type 'AWS S3 Creds'"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "COLLECT_SERVER"
        }
    },
    {
        "name": "sql",
        "description": "Run queries against sqlite, mysql, and postgres databases",
        "type": "Plugin",
        "args": [
            {
                "name": "driver",
                "type": "string",
                "description": "sqlite, mysql,or postgres",
                "required": true
            },
            {
                "name": "connstring",
                "type": "string",
                "description": "SQL Connection String"
            },
            {
                "name": "file",
                "type": "OSPath",
                "description": "Required if using sqlite driver"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use if using sqlite"
            },
            {
                "name": "query",
                "type": "string",
                "required": true
            },
            {
                "name": "args",
                "type": "Any"
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "sqlite",
        "description": "Opens an SQLite file and run a query against it.",
        "type": "Plugin",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "query",
                "type": "string",
                "required": true
            },
            {
                "name": "args",
                "type": "Any"
            }
        ],
        "category": "parsers"
    },
    {
        "name": "srum_lookup_id",
        "description": "Lookup a SRUM id.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "id",
                "type": "int64",
                "required": true
            }
        ],
        "category": "windows"
    },
    {
        "name": "starl",
        "description": "Compile a starlark code block - returns a module usable in VQL",
        "type": "Function",
        "args": [
            {
                "name": "code",
                "type": "string",
                "description": "The body of the starlark code.",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "If set use this key to cache the Starlark code block."
            },
            {
                "name": "globals",
                "type": "Any",
                "description": "Dictionary of values to feed into Starlark environment"
            }
        ],
        "category": "parsers"
    },
    {
        "name": "stat",
        "description": "Get file information. Unlike glob() this does not support wildcards.",
        "type": "Function",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "One or more files to open.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "An accessor to use."
            }
        ],
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "stat",
        "description": "Get file information. Unlike glob() this does not support wildcards.",
        "type": "Plugin",
        "version": 2,
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "One or more files to open.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "An accessor to use."
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "str",
        "description": "Returns the string representation of provided data",
        "type": "Function",
        "args": [
            {
                "name": "str",
                "type": "Any",
                "description": "The string to normalize",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "strip",
        "description": "Strip prefix and/or suffix from a string",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "The string to strip",
                "required": true
            },
            {
                "name": "prefix",
                "type": "string",
                "description": "The prefix to strip"
            },
            {
                "name": "suffix",
                "type": "string",
                "description": "The suffix to strip"
            }
        ],
        "category": "basic"
    },
    {
        "name": "substr",
        "description": "Create a substring from a string",
        "type": "Function",
        "args": [
            {
                "name": "str",
                "type": "string",
                "description": "The string to shorten",
                "required": true
            },
            {
                "name": "start",
                "type": "int",
                "description": "Beginning index of substring"
            },
            {
                "name": "end",
                "type": "int",
                "description": "End index of substring"
            }
        ],
        "category": "basic"
    },
    {
        "name": "sum",
        "description": "Sums the items.",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "int64",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "switch",
        "description": "Conditional execution of multiple queries in order",
        "type": "Plugin",
        "category": "plugin"
    },
    {
        "name": "sysinfo",
        "description": "Collect system information on Linux clients",
        "type": "Function",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "tempdir",
        "description": "Create a temporary directory. The directory will be removed when the query ends.",
        "type": "Function",
        "args": [
            {
                "name": "remove_last",
                "type": "bool",
                "description": "If set we delay removal as much as possible."
            }
        ],
        "category": "basic",
        "metadata": {
            "permissions": "FILESYSTEM_WRITE"
        }
    },
    {
        "name": "tempfile",
        "description": "Create a temporary file and write some data into it.",
        "type": "Function",
        "args": [
            {
                "name": "data",
                "type": "string",
                "description": "Data to write in the tempfile.",
                "repeated": true
            },
            {
                "name": "extension",
                "type": "string",
                "description": "An extension to place in the tempfile."
            },
            {
                "name": "permissions",
                "type": "string",
                "description": "Required permissions (e.g. 'x')."
            },
            {
                "name": "remove_last",
                "type": "bool",
                "description": "If set we delay removal as much as possible."
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "FILESYSTEM_WRITE"
        }
    },
    {
        "name": "timeline",
        "description": "Read a timeline. You can create a timeline with the timeline_add() function",
        "type": "Plugin",
        "args": [
            {
                "name": "timeline",
                "type": "string",
                "description": "Name of the timeline to read",
                "required": true
            },
            {
                "name": "skip",
                "type": "string",
                "description": "List of child components to skip",
                "repeated": true
            },
            {
                "name": "start",
                "type": "Any",
                "description": "First timestamp to fetch"
            },
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The notebook ID the timeline is stored in."
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "timeline_add",
        "description": "Add a new query to a timeline.",
        "type": "Function",
        "args": [
            {
                "name": "timeline",
                "type": "string",
                "description": "Supertimeline to add to",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "Name of child timeline",
                "required": true
            },
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Run this query to generate the timeline.",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "The column representing the time.",
                "required": true
            },
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The notebook ID the timeline is stored in."
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "timestamp",
        "description": "Convert from different types to a time.Time.",
        "type": "Function",
        "args": [
            {
                "name": "epoch",
                "type": "Any"
            },
            {
                "name": "cocoatime",
                "type": "int64"
            },
            {
                "name": "mactime",
                "type": "int64",
                "description": "HFS+"
            },
            {
                "name": "winfiletime",
                "type": "int64"
            },
            {
                "name": "string",
                "type": "string",
                "description": "Guess a timestamp from a string"
            },
            {
                "name": "timezone",
                "type": "string",
                "description": "A default timezone (UTC)"
            },
            {
                "name": "format",
                "type": "string",
                "description": "A format specifier as per the Golang time.Parse"
            }
        ],
        "category": "basic"
    },
    {
        "name": "tlsh_hash",
        "description": "Calculate the tlsh hash of a file.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "OSPath",
                "description": "Path to open and hash.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            }
        ],
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "to_dict",
        "description": "Construct a dict from a query.",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "Any"
            }
        ],
        "category": "basic"
    },
    {
        "name": "token",
        "description": "Extract process token.",
        "type": "Function",
        "args": [
            {
                "name": "pid",
                "type": "int64",
                "description": "The PID to get the token for.",
                "required": true
            }
        ],
        "category": "windows",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "trace",
        "description": "Upload a trace file.",
        "type": "Function",
        "version": 1
    },
    {
        "name": "unhex",
        "description": "Apply hex decoding to the string.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "Hex string to decode"
            }
        ],
        "category": "basic"
    },
    {
        "name": "unzip",
        "description": "Unzips a file into a directory.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "File to unzip.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "filename_filter",
                "type": "string",
                "description": "Only extract members matching this regex filter."
            },
            {
                "name": "output_directory",
                "type": "string",
                "description": "Where to unzip to",
                "required": true
            },
            {
                "name": "type",
                "type": "string",
                "description": "The type of file (default autodetected from file extension - zip or tgz or tar.gz)."
            }
        ],
        "category": "basic",
        "metadata": {
            "permissions": "FILESYSTEM_WRITE,FILESYSTEM_READ"
        }
    },
    {
        "name": "upcase",
        "description": "Returns an uppercase version of the string.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "The string to process",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "upload",
        "description": "Upload a file to the upload service. For a Velociraptor client this\nwill upload the file into the flow and store it in the server's file store.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "description": "The file to upload",
                "required": true
            },
            {
                "name": "name",
                "type": "OSPath",
                "description": "The name of the file that should be stored on the server"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "mtime",
                "type": "Any",
                "description": "Modified time to record"
            },
            {
                "name": "atime",
                "type": "Any",
                "description": "Access time to record"
            },
            {
                "name": "ctime",
                "type": "Any",
                "description": "Change time to record"
            },
            {
                "name": "btime",
                "type": "Any",
                "description": "Birth time to record"
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "upload",
        "description": "Upload files to the server.",
        "type": "Plugin",
        "args": [
            {
                "name": "files",
                "type": "string",
                "description": "A list of files to upload",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "mtime",
                "type": "Any",
                "description": "Modified time to record"
            }
        ],
        "category": "plugin"
    },
    {
        "name": "upload_azure",
        "description": "Upload files to Azure Blob Storage Service.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "description": "The file to upload",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the file that should be stored on the server"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "sas_url",
                "type": "string",
                "description": "A SAS URL to use for upload to the container.",
                "required": true
            }
        ],
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "upload_directory",
        "description": "Upload a file to an upload directory. The final filename will be the output directory path followed by the filename path.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "description": "The file to upload",
                "required": true
            },
            {
                "name": "name",
                "type": "OSPath",
                "description": "Filename to be stored within the output directory"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "output",
                "type": "string",
                "description": "An output directory to store files in.",
                "required": true
            },
            {
                "name": "mtime",
                "type": "Any",
                "description": "Modified time to set the output file."
            },
            {
                "name": "atime",
                "type": "Any",
                "description": "Access time to set the output file."
            },
            {
                "name": "ctime",
                "type": "Any",
                "description": "Change time to set the output file."
            },
            {
                "name": "btime",
                "type": "Any",
                "description": "Birth time to set the output file."
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "FILESYSTEM_WRITE"
        }
    },
    {
        "name": "upload_gcs",
        "description": "Upload files to GCS.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "description": "The file to upload",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the file that should be stored on the server"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "bucket",
                "type": "string",
                "description": "The bucket to upload to",
                "required": true
            },
            {
                "name": "project",
                "type": "string",
                "description": "The project to upload to",
                "required": true
            },
            {
                "name": "credentials",
                "type": "string",
                "description": "The credentials to use",
                "required": true
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "upload_s3",
        "description": "Upload files to S3.",
        "type": "Function",
        "version": 2,
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "description": "The file to upload",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the file that should be stored on the server"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "bucket",
                "type": "string",
                "description": "The bucket to upload to",
                "required": true
            },
            {
                "name": "region",
                "type": "string",
                "description": "The region the bucket is in"
            },
            {
                "name": "credentials_key",
                "type": "string",
                "description": "The AWS key credentials to use"
            },
            {
                "name": "credentials_secret",
                "type": "string",
                "description": "The AWS secret credentials to use"
            },
            {
                "name": "credentials_token",
                "type": "string",
                "description": "The AWS session token to use (only needed for temporary credentials)"
            },
            {
                "name": "endpoint",
                "type": "string",
                "description": "The Endpoint to use"
            },
            {
                "name": "serverside_encryption",
                "type": "string",
                "description": "The server side encryption method to use"
            },
            {
                "name": "kms_encryption_key",
                "type": "string",
                "description": "The server side KMS key to use"
            },
            {
                "name": "s3upload_root",
                "type": "string",
                "description": "Prefix for the S3 object"
            },
            {
                "name": "skip_verify",
                "type": "bool",
                "description": "Skip TLS Verification"
            },
            {
                "name": "secret",
                "type": "string",
                "description": "Alternatively use a secret from the secrets service. Secret must be of type 'AWS S3 Creds'"
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "upload_sftp",
        "description": "Upload files to SFTP.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "description": "The file to upload",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the file that should be stored on the server (may contain the path)"
            },
            {
                "name": "user",
                "type": "string",
                "description": "The username to connect to the endpoint with",
                "required": true
            },
            {
                "name": "path",
                "type": "string",
                "description": "Path on server to upload file to (will be prepended to name)"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "privatekey",
                "type": "string",
                "description": "The private key to use",
                "required": true
            },
            {
                "name": "endpoint",
                "type": "string",
                "description": "The Endpoint to use including port number (e.g. 192.168.1.1:22 )",
                "required": true
            },
            {
                "name": "hostkey",
                "type": "string",
                "description": "Host key to verify. Blank to disable"
            }
        ],
        "category": "basic",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "upload_smb",
        "description": "Upload files using the SMB file share protocol.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "description": "The file to upload",
                "required": true
            },
            {
                "name": "name",
                "type": "OSPath",
                "description": "The name of the file that should be stored on the server"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "username",
                "type": "string",
                "description": "The SMB username to login as (if not provided we use the SMB_CREDENTIALS env)"
            },
            {
                "name": "password",
                "type": "string",
                "description": "The SMB password to login as (if not provided we use the SMB_CREDENTIALS env)"
            },
            {
                "name": "server_address",
                "type": "string",
                "description": "The SMB server address and optionally port followed by the share name (e.g. \\\\192.168.1.1:445\\ShareName)",
                "required": true
            }
        ],
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "upload_webdav",
        "description": "Upload files to a WebDAV server.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "OSPath",
                "description": "The file to upload",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name that the file should have on the server"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "url",
                "type": "string",
                "description": "The WebDAV url",
                "required": true
            },
            {
                "name": "basic_auth_user",
                "type": "string",
                "description": "The username to use in HTTP basic auth"
            },
            {
                "name": "basic_auth_password",
                "type": "string",
                "description": "The password to use in HTTP basic auth"
            },
            {
                "name": "noverifycert",
                "type": "bool",
                "description": "Skip TLS Verification (deprecated in favor of SkipVerify)"
            },
            {
                "name": "skip_verify",
                "type": "bool",
                "description": "Skip TLS Verification"
            },
            {
                "name": "user_agent",
                "type": "string",
                "description": "If specified, set a HTTP User-Agent."
            }
        ],
        "category": "basic",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "uploads",
        "description": "Retrieve information about a flow's uploads.",
        "type": "Plugin",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to extract"
            },
            {
                "name": "flow_id",
                "type": "string",
                "description": "A flow ID (client or server artifacts)"
            },
            {
                "name": "hunt_id",
                "type": "string",
                "description": "A hunt ID"
            },
            {
                "name": "notebook_id",
                "type": "string",
                "description": "A notebook ID"
            }
        ],
        "category": "server",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "url",
        "description": "Construct a URL or parse one.",
        "type": "Function",
        "args": [
            {
                "name": "scheme",
                "type": "string",
                "description": "The scheme to use"
            },
            {
                "name": "host",
                "type": "string",
                "description": "The host component"
            },
            {
                "name": "path",
                "type": "string",
                "description": "The path component"
            },
            {
                "name": "fragment",
                "type": "string",
                "description": "The fragment"
            },
            {
                "name": "query",
                "type": "Any",
                "description": "A dict representing a query string"
            },
            {
                "name": "parse",
                "type": "string",
                "description": "A url to parse"
            }
        ],
        "category": "basic"
    },
    {
        "name": "user",
        "description": "Retrieves information about the Velociraptor user.",
        "type": "Function",
        "args": [
            {
                "name": "user",
                "type": "string",
                "description": "The user to create or update.",
                "required": true
            },
            {
                "name": "org",
                "type": "string",
                "description": "The org under which we query the user's ACL."
            }
        ]
    },
    {
        "name": "user_create",
        "description": "Creates a new user from the server, or updates their permissions or reset their password.",
        "type": "Function",
        "args": [
            {
                "name": "user",
                "type": "string",
                "description": "The user to create or update.",
                "required": true
            },
            {
                "name": "roles",
                "type": "string",
                "description": "List of roles to give the user.",
                "repeated": true,
                "required": true
            },
            {
                "name": "password",
                "type": "string",
                "description": "A password to set for the user (If not using SSO this might be needed)."
            },
            {
                "name": "orgs",
                "type": "string",
                "description": "One or more org IDs to grant access to. If empty we use the current org.",
                "repeated": true
            }
        ],
        "category": "server"
    },
    {
        "name": "user_delete",
        "description": "Deletes a user from the server.",
        "type": "Function",
        "args": [
            {
                "name": "user",
                "type": "string",
                "description": "The user to delete.",
                "required": true
            },
            {
                "name": "orgs",
                "type": "string",
                "description": "If set we only delete from these orgs, otherwise we delete from the current org.",
                "repeated": true
            },
            {
                "name": "really_do_it",
                "type": "bool",
                "description": "If not specified, just show what user will be removed"
            }
        ],
        "category": "server"
    },
    {
        "name": "user_grant",
        "description": "Grants the user the specified roles.",
        "type": "Function",
        "args": [
            {
                "name": "user",
                "type": "string",
                "description": "The user to create or update.",
                "required": true
            },
            {
                "name": "roles",
                "type": "string",
                "description": "List of roles to give the user.",
                "repeated": true
            },
            {
                "name": "orgs",
                "type": "string",
                "description": "One or more org IDs to grant access to. If not specified we use current org",
                "repeated": true
            },
            {
                "name": "policy",
                "type": "ordereddict.Dict",
                "description": "A dict of permissions to set (e.g. as obtained from the gui_users() function)."
            }
        ]
    },
    {
        "name": "users",
        "description": "Display information about workstation local users. This is obtained through the NetUserEnum() API.",
        "type": "Plugin",
        "category": "windows"
    },
    {
        "name": "utf16",
        "description": "Parse input from utf16.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "A string to decode",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "utf16_encode",
        "description": "Encode a string to utf16 bytes.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "A string to decode",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "uuid",
        "description": "Generate a UUID.",
        "type": "Function",
        "category": "basic"
    },
    {
        "name": "vad",
        "description": "Enumerate process memory regions.",
        "type": "Plugin",
        "args": [
            {
                "name": "pid",
                "type": "int64",
                "description": "The PID to dump out.",
                "required": true
            }
        ],
        "category": "windows"
    },
    {
        "name": "version",
        "description": "\nGets the version of a VQL plugin or function.",
        "type": "Function",
        "args": [
            {
                "name": "function",
                "type": "string"
            },
            {
                "name": "plugin",
                "type": "string"
            }
        ],
        "category": "basic"
    },
    {
        "name": "vfs_ls",
        "description": "List directory and build a VFS object.",
        "type": "Plugin",
        "version": 1,
        "args": [
            {
                "name": "path",
                "type": "OSPath",
                "description": "The directory to refresh."
            },
            {
                "name": "components",
                "type": "string",
                "description": "Alternatively a list of path components can be given.",
                "repeated": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "An accessor to use."
            },
            {
                "name": "depth",
                "type": "int64",
                "description": "Depth of directory to list (default 0)."
            }
        ],
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "watch_auditd",
        "description": "Watch log files generated by auditd.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "A list of log files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "buffer_size",
                "type": "int",
                "description": "Maximum size of line buffer."
            }
        ],
        "category": "event"
    },
    {
        "name": "watch_csv",
        "description": "Watch a CSV file and stream events from it. Note: This is an event\nplugin which does not complete.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "CSV files to open",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "auto_headers",
                "type": "bool",
                "description": "If unset the first row is headers"
            },
            {
                "name": "separator",
                "type": "string",
                "description": "Comma separator (default ',')"
            },
            {
                "name": "comment",
                "type": "string",
                "description": "The single character that should be considered a comment"
            },
            {
                "name": "columns",
                "type": "string",
                "description": "The columns to use",
                "repeated": true
            }
        ],
        "category": "event",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "watch_etw",
        "description": "Watch for events from an ETW provider.",
        "type": "Plugin",
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "A session name "
            },
            {
                "name": "guid",
                "type": "string",
                "description": "A Provider GUID to watch ",
                "required": true
            },
            {
                "name": "any",
                "type": "uint64",
                "description": "Any Keywords "
            },
            {
                "name": "all",
                "type": "uint64",
                "description": "All Keywords "
            },
            {
                "name": "level",
                "type": "int64",
                "description": "Log level (0-5)"
            },
            {
                "name": "stop",
                "type": "Lambda",
                "description": "If provided we stop watching automatically when this lambda returns true"
            },
            {
                "name": "timeout",
                "type": "uint64",
                "description": "If provided we stop after this much time"
            }
        ],
        "category": "event"
    },
    {
        "name": "watch_evtx",
        "description": "Watch an EVTX file and stream events from it.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "A list of event log files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "messagedb",
                "type": "string",
                "description": "A Message database from https://github.com/Velocidex/evtx-data."
            },
            {
                "name": "workers",
                "type": "int64",
                "description": "If specified we use this many workers to parse the file in parallel (default 1)."
            }
        ],
        "category": "event",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "watch_jsonl",
        "description": "Watch a jsonl file and stream events from it.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "A list of log files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "buffer_size",
                "type": "int",
                "description": "Maximum size of line buffer."
            }
        ],
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "watch_monitoring",
        "description": "Watch clients' monitoring log. This is an event plugin. This\nplugin will produce events from all clients.\n",
        "type": "Plugin",
        "args": [
            {
                "name": "artifact",
                "type": "string",
                "description": "The artifact to watch",
                "required": true
            }
        ],
        "category": "event",
        "metadata": {
            "permissions": "READ_RESULTS"
        }
    },
    {
        "name": "watch_syslog",
        "description": "Watch a syslog file and stream events from it. ",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "A list of log files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "buffer_size",
                "type": "int",
                "description": "Maximum size of line buffer."
            }
        ],
        "category": "event",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "watch_usn",
        "description": "Watch the USN journal from a device.",
        "type": "Plugin",
        "args": [
            {
                "name": "device",
                "type": "string",
                "description": "The device file to open (as an NTFS device).",
                "required": true
            }
        ],
        "category": "event"
    },
    {
        "name": "whoami",
        "description": "Returns the username that is running the query.",
        "type": "Function",
        "category": "plugin"
    },
    {
        "name": "winobj",
        "description": "Enumerate The Windows Object Manager namespace.",
        "type": "Plugin",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "Object namespace path."
            }
        ],
        "category": "windows",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "wmi",
        "description": "Execute simple WMI queries synchronously.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "string",
                "description": "The WMI query to issue.",
                "required": true
            },
            {
                "name": "namespace",
                "type": "string",
                "description": "The WMI namespace to use (ROOT/CIMV2)"
            }
        ],
        "category": "windows",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "wmi_events",
        "description": "Executes an evented WMI queries asynchronously.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "string",
                "description": "WMI query to run.",
                "required": true
            },
            {
                "name": "namespace",
                "type": "string",
                "description": "WMI namespace",
                "required": true
            },
            {
                "name": "wait",
                "type": "int64",
                "description": "Wait this many seconds for events and then quit.",
                "required": true
            }
        ],
        "category": "event",
        "metadata": {
            "permissions": "MACHINE_STATE"
        }
    },
    {
        "name": "write_crypto_file",
        "description": "Write a query into an encrypted local storage file.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "Path to the file to write",
                "required": true
            },
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "query to write into the file.",
                "required": true
            },
            {
                "name": "max_wait",
                "type": "uint64",
                "description": "How often to flush the file (default 60 sec)."
            },
            {
                "name": "max_rows",
                "type": "uint64",
                "description": "How many rows to buffer before writing (default 1000)."
            },
            {
                "name": "max_size",
                "type": "uint64",
                "description": "When the file grows to this size, truncate it (default 1Gb)."
            }
        ],
        "metadata": {
            "permissions": "FILESYSTEM_WRITE"
        }
    },
    {
        "name": "write_csv",
        "description": "Write a query into a CSV file.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "CSV files to open",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "query to write into the file.",
                "required": true
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "FILESYSTEM_WRITE"
        }
    },
    {
        "name": "write_jsonl",
        "description": "Write a query into a JSONL file.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "CSV files to open",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "query to write into the file.",
                "required": true
            },
            {
                "name": "buffer_size",
                "type": "int",
                "description": "Maximum size of buffer before flushing to file."
            }
        ],
        "metadata": {
            "permissions": "FILESYSTEM_WRITE"
        }
    },
    {
        "name": "xattr",
        "description": "Query a file for the specified extended attribute.",
        "type": "Function",
        "args": [
            {
                "name": "filename",
                "type": "OSPath",
                "description": "Filename to inspect.",
                "required": true
            },
            {
                "name": "attribute",
                "type": "string",
                "description": "Attribute to collect. ",
                "repeated": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "File accessor"
            }
        ],
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    },
    {
        "name": "xor",
        "description": "Apply xor to the string and key.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "String to apply Xor",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "Xor key.",
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "yara",
        "description": "Scan files using yara rules.",
        "type": "Plugin",
        "args": [
            {
                "name": "rules",
                "type": "string",
                "description": "Yara rules in the yara DSL or after being compiled by the yarac compiler."
            },
            {
                "name": "files",
                "type": "Any",
                "description": "The list of files to scan.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "Accessor (e.g. ntfs,file)"
            },
            {
                "name": "context",
                "type": "int",
                "description": "How many bytes to include around each hit"
            },
            {
                "name": "start",
                "type": "uint64",
                "description": "The start offset to scan"
            },
            {
                "name": "end",
                "type": "uint64",
                "description": "End scanning at this offset (100mb)"
            },
            {
                "name": "number",
                "type": "int64",
                "description": "Stop after this many hits (1)."
            },
            {
                "name": "blocksize",
                "type": "uint64",
                "description": "Blocksize for scanning (1mb)."
            },
            {
                "name": "key",
                "type": "string",
                "description": "If set use this key to cache the  yara rules."
            },
            {
                "name": "namespace",
                "type": "string",
                "description": "The Yara namespece to use."
            },
            {
                "name": "vars",
                "type": "ordereddict.Dict",
                "description": "The Yara variables to use."
            }
        ],
        "category": "plugin",
        "metadata": {
            "permissions": "FILESYSTEM_READ"
        }
    }
]