[
    {
        "name": "amsi",
        "description": "AMSI is an interface on windows to scan a string for malware. This\nfunction submits the string to the AMSI system and receives a\ndetermination if it is malware.\n",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "A string to scan",
                "required": true
            }
        ]
    },
    {
        "name": "appcompatcache",
        "description": "Parses the appcompatcache.",
        "type": "Plugin",
        "category": "windows"
    },
    {
        "name": "array",
        "description": "Create an array with all the args.",
        "type": "Function",
        "category": "basic"
    },
    {
        "name": "artifact_definitions",
        "description": "Dump artifact definitions from the internal repository.",
        "type": "Plugin",
        "args": [
            {
                "name": "names",
                "type": "string",
                "description": "Artifact definitions to dump",
                "repeated": true
            },
            {
                "name": "deps",
                "type": "bool",
                "description": "If true includes all dependencies as well."
            },
            {
                "name": "sanitize",
                "type": "bool",
                "description": "If true we remove extra metadata."
            }
        ],
        "category": "server"
    },
    {
        "name": "artifact_delete",
        "description": "Deletes an artifact from the global repository.",
        "type": "Function",
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "The Artifact to delete"
            }
        ],
        "category": "server"
    },
    {
        "name": "artifact_set",
        "description": "Sets an artifact into the global repository.",
        "type": "Function",
        "args": [
            {
                "name": "definition",
                "type": "string",
                "description": "Artifact definition in YAML"
            },
            {
                "name": "prefix",
                "type": "string",
                "description": "Required name prefix"
            }
        ],
        "category": "server"
    },
    {
        "name": "atexit",
        "description": "Install a query to run when the query is unwound. This is used to\nclean up when the query ends.",
        "type": "Function",
        "args": [
            {
                "name": "query",
                "type": "Any",
                "description": "A VQL Query to parse and execute.",
                "required": true
            },
            {
                "name": "env",
                "type": "ordereddict.Dict",
                "description": "A dict of args to insert into the scope."
            },
            {
                "name": "timeout",
                "type": "uint64",
                "description": "How long to wait for destructors to run (default 60 seconds)."
            }
        ]
    },
    {
        "name": "atoi",
        "description": "Convert a string to an integer.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "Any",
                "description": "A string to convert to int",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "audit",
        "description": "Register as an audit daemon in the kernel.",
        "type": "Plugin",
        "category": "linux"
    },
    {
        "name": "authenticode",
        "description": "This plugin parses authenticode information from PE files.",
        "type": "Function",
        "args": [
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "filename",
                "type": "string",
                "description": "The filename to parse.",
                "required": true
            },
            {
                "name": "verbose",
                "type": "bool",
                "description": "Set to receive verbose information about all the certs."
            }
        ],
        "category": "windows"
    },
    {
        "name": "base64decode",
        "description": "Decodes a base64 encoded string.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "A string to decode",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "base64encode",
        "description": "Encodes a string into base64.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "A string to decode",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "basename",
        "description": "Return the basename of the path. For example basename(path=\"/foo/bar\") -> \"bar\"\n",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "Extract directory name of path",
                "required": true
            },
            {
                "name": "sep",
                "type": "string",
                "description": "Separator to use (default /)"
            }
        ],
        "category": "basic"
    },
    {
        "name": "batch",
        "description": "Batches query rows into multiple arrays.",
        "type": "Plugin",
        "args": [
            {
                "name": "batch_size",
                "type": "int64",
                "description": "Size of batch (defaults to 10)."
            },
            {
                "name": "batch_func",
                "type": "string",
                "description": "A VQL Lambda that determines when a batch is ready. Example\n'x=>len(list=x) >= 10'.\n"
            },
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Run this query over the item.",
                "required": true
            }
        ]
    },
    {
        "name": "cache",
        "description": "Creates a cache object.",
        "type": "Function",
        "args": [
            {
                "name": "func",
                "type": "LazyExpr",
                "description": "A function to evaluate",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "The global name of this cache (needed when more than one)"
            },
            {
                "name": "key",
                "type": "string",
                "description": "Cache key to use.",
                "required": true
            },
            {
                "name": "period",
                "type": "int64",
                "description": "The latest age of the cache."
            }
        ],
        "category": "basic"
    },
    {
        "name": "cancel_flow",
        "description": "Cancels the flow.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            },
            {
                "name": "flow_id",
                "type": "string"
            }
        ],
        "category": "server"
    },
    {
        "name": "certificates",
        "description": "Collect certificate from the system trust store.",
        "type": "Plugin",
        "category": "windows"
    },
    {
        "name": "chain",
        "description": "Chain the output of several queries into the same table.",
        "type": "Plugin",
        "args": [
            {
                "name": "async",
                "type": "bool",
                "description": "If specified we run all queries asynchronously and combine the output."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "cidr_contains",
        "description": "Calculates if an IP address falls within a range of CIDR specified\nnetworks.",
        "type": "Function",
        "args": [
            {
                "name": "ip",
                "type": "string",
                "description": "An IP address",
                "required": true
            },
            {
                "name": "ranges",
                "type": "string",
                "description": "A list of CIDR notation network ranges",
                "repeated": true,
                "required": true
            }
        ]
    },
    {
        "name": "client_delete",
        "description": "Delete all information related to a client from the filestore.",
        "type": "Plugin",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            },
            {
                "name": "really_do_it",
                "type": "bool"
            }
        ],
        "category": "server"
    },
    {
        "name": "client_info",
        "description": "Returns client info (like the fqdn) from the datastore.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "client_metadata",
        "description": "Returns client metadata from the datastore.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "client_set_metadata",
        "description": "Sets client metadata.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "clients",
        "description": "Retrieve the list of clients.",
        "type": "Plugin",
        "args": [
            {
                "name": "search",
                "type": "string",
                "description": "Client search string. Can have the following prefixes: 'lable:', 'host:'"
            },
            {
                "name": "start",
                "type": "uint64",
                "description": "First client to fetch (0)'"
            },
            {
                "name": "count",
                "type": "uint64",
                "description": "Maximum number of clients to fetch (1000)'"
            },
            {
                "name": "client_id",
                "type": "string"
            }
        ],
        "category": "server"
    },
    {
        "name": "clock",
        "description": "Generate a timestamp periodically. This is mostly useful for event\nqueries.",
        "type": "Plugin",
        "args": [
            {
                "name": "start",
                "type": "Any",
                "description": "Start at this time."
            },
            {
                "name": "period",
                "type": "int64",
                "description": "Wait this many seconds between events."
            },
            {
                "name": "ms",
                "type": "int64",
                "description": "Wait this many ms between events."
            }
        ],
        "category": "event"
    },
    {
        "name": "collect",
        "description": "Collect artifacts into a local file.",
        "type": "Plugin",
        "args": [
            {
                "name": "artifacts",
                "type": "string",
                "description": "A list of artifacts to collect.",
                "repeated": true,
                "required": true
            },
            {
                "name": "output",
                "type": "string",
                "description": "A path to write the output file on."
            },
            {
                "name": "report",
                "type": "string",
                "description": "A path to write the report on."
            },
            {
                "name": "args",
                "type": "Any",
                "description": "Optional parameters."
            },
            {
                "name": "password",
                "type": "string",
                "description": "An optional password to encrypt the collection zip."
            },
            {
                "name": "format",
                "type": "string",
                "description": "Output format (csv, jsonl)."
            },
            {
                "name": "artifact_definitions",
                "type": "Any",
                "description": "Optional additional custom artifacts."
            },
            {
                "name": "template",
                "type": "string",
                "description": "The name of a template artifact (i.e. one which has report of type HTML)."
            },
            {
                "name": "level",
                "type": "int64",
                "description": "Compression level between 0 (no compression) and 9."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "collect_client",
        "description": "Launch an artifact collection against a client. If the client_id\nis \"server\" then the collection occurs on the server itself. In\nthat case the caller needs the SERVER_ADMIN permission.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to schedule a collection on",
                "required": true
            },
            {
                "name": "artifacts",
                "type": "string",
                "description": "A list of artifacts to collect",
                "repeated": true,
                "required": true
            },
            {
                "name": "env",
                "type": "Any",
                "description": "Parameters to apply to the artifact (an alternative to a full spec)"
            },
            {
                "name": "spec",
                "type": "Any",
                "description": "Parameters to apply to the artifacts"
            },
            {
                "name": "timeout",
                "type": "uint64",
                "description": "Set query timeout (default 10 min)"
            },
            {
                "name": "ops_per_sec",
                "type": "float64",
                "description": "Set query ops_per_sec value"
            },
            {
                "name": "max_rows",
                "type": "uint64",
                "description": "Max number of rows to fetch"
            },
            {
                "name": "max_bytes",
                "type": "uint64",
                "description": "Max number of bytes to upload"
            }
        ],
        "category": "server"
    },
    {
        "name": "column_filter",
        "description": "Select columns from another query using regex.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "This query will be run to produce the columns.",
                "required": true
            },
            {
                "name": "exclude",
                "type": "string",
                "description": "One of more regular expressions that will exclude columns.",
                "repeated": true
            },
            {
                "name": "include",
                "type": "string",
                "description": "One of more regular expressions that will include columns.",
                "repeated": true
            }
        ]
    },
    {
        "name": "combine",
        "description": "Combine the output of several queries into the same result set.A convenience plugin acting like chain(async=TRUE).",
        "type": "Plugin"
    },
    {
        "name": "commandline_split",
        "description": "Split a commandline into separate components following the windows\nconvensions.",
        "type": "Function",
        "args": [
            {
                "name": "command",
                "type": "string",
                "description": "Commandline to split into components.",
                "required": true
            },
            {
                "name": "bash_style",
                "type": "bool",
                "description": "Use bash rules (Uses Windows rules by default)."
            }
        ]
    },
    {
        "name": "compress",
        "description": "Compress a file.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "A path to compress",
                "required": true
            },
            {
                "name": "output",
                "type": "string",
                "description": "A path to write the output - default is the path with a .gz extension"
            }
        ],
        "category": "server"
    },
    {
        "name": "connections",
        "description": "List all active connections",
        "type": "Plugin",
        "category": "client"
    },
    {
        "name": "copy",
        "description": "Copy a file.",
        "type": "Function",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "The file to copy from.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "dest",
                "type": "string",
                "description": "The destination file to write.",
                "required": true
            },
            {
                "name": "permissions",
                "type": "string",
                "description": "Required permissions (e.g. 'x')."
            },
            {
                "name": "append",
                "type": "bool",
                "description": "If true we append to the target file otherwise truncate it"
            }
        ],
        "category": "basic"
    },
    {
        "name": "count",
        "description": "Counts the items.",
        "type": "Function",
        "args": [
            {
                "name": "items",
                "type": "Any",
                "description": "Not used anymore"
            }
        ],
        "category": "basic"
    },
    {
        "name": "create_flow_download",
        "description": "Creates a download pack for the flow.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "description": "Client ID to export.",
                "required": true
            },
            {
                "name": "flow_id",
                "type": "string",
                "description": "The flow id to export.",
                "required": true
            },
            {
                "name": "wait",
                "type": "bool",
                "description": "If set we wait for the download to complete before returning."
            },
            {
                "name": "type",
                "type": "string",
                "description": "Type of download to create (e.g. 'report') default a full zip file."
            },
            {
                "name": "template",
                "type": "string",
                "description": "Report template to use (defaults to Reporting.Default)."
            }
        ],
        "category": "server"
    },
    {
        "name": "create_hunt_download",
        "description": "Creates a download pack for a hunt.",
        "type": "Function",
        "args": [
            {
                "name": "hunt_id",
                "type": "string",
                "description": "Hunt ID to export.",
                "required": true
            },
            {
                "name": "only_combined",
                "type": "bool",
                "description": "If set we only export combined results."
            },
            {
                "name": "wait",
                "type": "bool",
                "description": "If set we wait for the download to complete before returning."
            },
            {
                "name": "format",
                "type": "string",
                "description": "Format to export (csv,json) defaults to both."
            },
            {
                "name": "base",
                "type": "string",
                "description": "Base filename to write to."
            }
        ],
        "category": "server"
    },
    {
        "name": "dict",
        "description": "Construct a dict from arbitrary keyword args.",
        "type": "Function",
        "category": "basic"
    },
    {
        "name": "diff",
        "description": "Executes 'query' periodically and emit differences from the last query.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Source for cached rows.",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "The column to use as key.",
                "required": true
            },
            {
                "name": "period",
                "type": "int64",
                "description": "Number of seconds between evaluation of the query."
            }
        ],
        "category": "event"
    },
    {
        "name": "dirname",
        "description": "Return the directory path.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "Extract directory name of path",
                "required": true
            },
            {
                "name": "sep",
                "type": "string",
                "description": "Separator to use (default /)"
            }
        ],
        "category": "basic"
    },
    {
        "name": "dns",
        "description": "Monitor dns queries.",
        "type": "Plugin",
        "category": "windows"
    },
    {
        "name": "elastic_upload",
        "description": "Upload rows to elastic.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Source for rows to upload.",
                "required": true
            },
            {
                "name": "threads",
                "type": "int64",
                "description": "How many threads to use."
            },
            {
                "name": "index",
                "type": "string",
                "description": "The name of the index to upload to. If not specified ensure a column is named '_index'."
            },
            {
                "name": "type",
                "type": "string",
                "description": "The type of the index to upload to.",
                "required": true
            },
            {
                "name": "chunk_size",
                "type": "int64",
                "description": "The number of rows to send at the time."
            },
            {
                "name": "addresses",
                "type": "string",
                "description": "A list of Elasticsearch nodes to use.",
                "repeated": true
            },
            {
                "name": "username",
                "type": "string",
                "description": "Username for HTTP Basic Authentication."
            },
            {
                "name": "password",
                "type": "string",
                "description": "Password for HTTP Basic Authentication."
            },
            {
                "name": "cloud_id",
                "type": "string",
                "description": "Endpoint for the Elastic Service (https://elastic.co/cloud)."
            },
            {
                "name": "api_key",
                "type": "string",
                "description": "Base64-encoded token for authorization; if set, overrides username and password."
            },
            {
                "name": "wait_time",
                "type": "int64",
                "description": "Batch elastic upload this long (2 sec)."
            },
            {
                "name": "pipeline",
                "type": "string",
                "description": "Pipeline for uploads"
            }
        ],
        "category": "server"
    },
    {
        "name": "encode",
        "description": "Encodes a string as as different type. Currently supported types include 'hex', 'base64'.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "Any",
                "required": true
            },
            {
                "name": "type",
                "type": "string",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "enumerate",
        "description": "Collect all the items in each group by bin.",
        "type": "Function",
        "args": [
            {
                "name": "items",
                "type": "Any",
                "description": "Not used anymore"
            }
        ],
        "category": "basic"
    },
    {
        "name": "enumerate_flow",
        "description": "Enumerate all the files that make up a flow.",
        "type": "Plugin",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            },
            {
                "name": "flow_id",
                "type": "string"
            }
        ],
        "category": "server"
    },
    {
        "name": "environ",
        "description": "Get an environment variable.\n",
        "type": "Function",
        "args": [
            {
                "name": "var",
                "type": "string",
                "description": "Extract the var from the environment.",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "environ",
        "description": "The row returned will have all environment variables as\ncolumns. If the var parameter is provided, only those variables\nwill be provided.\n",
        "type": "Plugin",
        "args": [
            {
                "name": "vars",
                "type": "string",
                "description": "Extract these variables from the environment and return them one per row",
                "repeated": true
            }
        ],
        "category": "plugin"
    },
    {
        "name": "execve",
        "description": "This plugin launches an external command and captures its STDERR,\nSTDOUT and return code. The command's stdout is split using the `sep`\nparameter as required.",
        "type": "Plugin",
        "args": [
            {
                "name": "argv",
                "type": "string",
                "description": "Argv to run the command with.",
                "repeated": true,
                "required": true
            },
            {
                "name": "sep",
                "type": "string",
                "description": "The serparator that will be used to split the stdout into rows."
            },
            {
                "name": "length",
                "type": "int64",
                "description": "Size of buffer to capture output per row."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "expand",
        "description": "Expand the path using the environment.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "A path with environment escapes",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "favorites_save",
        "description": "Save a collection into the favorites.",
        "type": "Function",
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "A name for this collection template.",
                "required": true
            },
            {
                "name": "description",
                "type": "string",
                "description": "A description for the template."
            },
            {
                "name": "specs",
                "type": "LazyExpr",
                "description": "The collection request spec that will be saved. We use this to create the new collection.",
                "required": true
            },
            {
                "name": "type",
                "type": "string",
                "description": "The type of favorite.",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "fifo",
        "description": "Executes 'query' and cache a number of rows from it. For each invocation\nwe present the set of past rows.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Source for cached rows.",
                "required": true
            },
            {
                "name": "max_age",
                "type": "int64",
                "description": "Maximum number of seconds to hold rows in the fifo."
            },
            {
                "name": "max_rows",
                "type": "int64",
                "description": "Maximum number of rows to hold in the fifo."
            },
            {
                "name": "flush",
                "type": "bool",
                "description": "If specified we flush all rows from cache after the call."
            }
        ],
        "category": "event"
    },
    {
        "name": "file_store",
        "description": "Resolves file store paths into full filesystem paths.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "LazyExpr",
                "description": "A VFS path to convert",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "file_store_delete",
        "description": "Delete file store paths.\n",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "LazyExpr",
                "description": "A VFS path to remove",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "filesystems",
        "description": "Enumerates mounted filesystems.\n",
        "type": "Plugin",
        "category": "plugin"
    },
    {
        "name": "filter",
        "description": "Filters a strings array by regex.\n",
        "type": "Function",
        "args": [
            {
                "name": "list",
                "type": "string",
                "description": "A list of items to filter",
                "repeated": true,
                "required": true
            },
            {
                "name": "regex",
                "type": "string",
                "description": "A regex to test each item",
                "repeated": true,
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "flatten",
        "description": "Flatten the columns in query. If any column repeats then we repeat the entire row once for each item.",
        "type": "Plugin",
        "args": [
            {
                "name": "Name",
                "type": "string"
            }
        ],
        "category": "plugin"
    },
    {
        "name": "flow_results",
        "description": "Retrieve the results of a flow.",
        "type": "Plugin",
        "args": [
            {
                "name": "artifact",
                "type": "string",
                "description": "The artifact to retrieve"
            },
            {
                "name": "source",
                "type": "string",
                "description": "An optional source within the artifact."
            },
            {
                "name": "flow_id",
                "type": "string",
                "description": "The hunt id to read.",
                "required": true
            },
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to extract",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "flows",
        "description": "Retrieve the flows launched on each client.",
        "type": "Plugin",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            },
            {
                "name": "flow_id",
                "type": "string"
            }
        ],
        "category": "server"
    },
    {
        "name": "for",
        "description": "Iterate over a list.",
        "type": "Plugin",
        "args": [
            {
                "name": "var",
                "type": "string",
                "description": "The variable to assign.",
                "required": true
            },
            {
                "name": "foreach",
                "type": "StoredQuery",
                "description": "The variable to iterate over.",
                "required": true
            },
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Run this query over the item."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "foreach",
        "description": "Executes 'query' once for each row in the 'row' query.",
        "type": "Plugin",
        "args": [
            {
                "name": "row",
                "type": "LazyExpr",
                "description": "A query or slice which generates rows.",
                "required": true
            },
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Run this query for each row."
            },
            {
                "name": "async",
                "type": "bool",
                "description": "If set we run all queries asyncronously (implies workers=1000)."
            },
            {
                "name": "workers",
                "type": "int64",
                "description": "Total number of asyncronous workers."
            },
            {
                "name": "column",
                "type": "string",
                "description": "If set we only extract the column from row."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "format",
        "description": "Format one or more items according to a format string.",
        "type": "Function",
        "args": [
            {
                "name": "format",
                "type": "string",
                "description": "Format string to use",
                "required": true
            },
            {
                "name": "args",
                "type": "Any",
                "description": "An array of elements to apply into the format string."
            }
        ],
        "category": "basic"
    },
    {
        "name": "gcs_pubsub_publish",
        "description": "Publish a message to Google PubSub.",
        "type": "Function",
        "args": [
            {
                "name": "topic",
                "type": "string",
                "description": "The topic to publish to",
                "required": true
            },
            {
                "name": "project_id",
                "type": "string",
                "description": "The project id to publish to",
                "required": true
            },
            {
                "name": "msg",
                "type": "Any",
                "description": "Message to publish to Pubsub",
                "required": true
            },
            {
                "name": "credentials",
                "type": "string",
                "description": "The credentials to use",
                "required": true
            }
        ]
    },
    {
        "name": "generate",
        "description": "Create a named generator that receives rows from the query.",
        "type": "Function",
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "Name to call the generator"
            },
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Run this query to generator rows."
            },
            {
                "name": "delay",
                "type": "int64",
                "description": "Wait before starting the query"
            }
        ]
    },
    {
        "name": "geoip",
        "description": "Lookup an IP Address using the MaxMind GeoIP database. You can get\na copy of the database from https://www.maxmind.com/. The database\nmust be locally accessible so this probably only makes sense on\nthe server.\n",
        "type": "Function",
        "args": [
            {
                "name": "ip",
                "type": "string",
                "description": "IP Address to lookup.",
                "required": true
            },
            {
                "name": "db",
                "type": "string",
                "description": "Path to the MaxMind GeoIP Database.",
                "required": true
            }
        ]
    },
    {
        "name": "get",
        "description": "Gets the member field from item.",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "Any"
            },
            {
                "name": "member",
                "type": "string"
            },
            {
                "name": "field",
                "type": "Any"
            },
            {
                "name": "default",
                "type": "Any"
            }
        ],
        "category": "basic"
    },
    {
        "name": "get_client_monitoring",
        "description": "Retrieve the current client monitoring state.",
        "type": "Function",
        "category": "server"
    },
    {
        "name": "get_server_monitoring",
        "description": "Retrieve the current server monitoring state.",
        "type": "Function",
        "category": "server"
    },
    {
        "name": "getpid",
        "description": "Returns the current pid of the Velociraptor process.",
        "type": "Function",
        "category": "basic"
    },
    {
        "name": "glob",
        "description": "Retrieve files based on a list of glob expressions",
        "type": "Plugin",
        "args": [
            {
                "name": "globs",
                "type": "string",
                "description": "One or more glob patterns to apply to the filesystem.",
                "repeated": true,
                "required": true
            },
            {
                "name": "root",
                "type": "string",
                "description": "The root directory to glob from (default '')."
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "An accessor to use."
            },
            {
                "name": "nosymlink",
                "type": "bool",
                "description": "If set we do not follow symlinks."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "grep",
        "description": "Search a file for keywords.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "path to open.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "An accessor to use."
            },
            {
                "name": "keywords",
                "type": "string",
                "description": "Keywords to search for.",
                "repeated": true,
                "required": true
            },
            {
                "name": "context",
                "type": "int",
                "description": "Extract this many bytes as context around hits."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "grok",
        "description": "Parse a string using a Grok expression.",
        "type": "Function",
        "args": [
            {
                "name": "grok",
                "type": "string",
                "description": "Grok pattern.",
                "required": true
            },
            {
                "name": "data",
                "type": "string",
                "description": "String to parse.",
                "required": true
            },
            {
                "name": "patterns",
                "type": "Any",
                "description": "Additional patterns."
            },
            {
                "name": "all_captures",
                "type": "bool",
                "description": "Extract all captures."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "gui_users",
        "description": "Retrieve the list of users on the server.\n",
        "type": "Plugin",
        "category": "server"
    },
    {
        "name": "handles",
        "description": "Enumerate process handles.\n",
        "type": "Plugin",
        "args": [
            {
                "name": "pid",
                "type": "int64",
                "description": "The PID to dump out.",
                "required": true
            }
        ],
        "category": "windows"
    },
    {
        "name": "hash",
        "description": "Calculate the hash of a file.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "Path to open and hash.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            }
        ],
        "category": "plugin"
    },
    {
        "name": "http_client",
        "description": "Make a http request.",
        "type": "Plugin",
        "args": [
            {
                "name": "url",
                "type": "string",
                "description": "The URL to fetch",
                "required": true
            },
            {
                "name": "params",
                "type": "Any",
                "description": "Parameters to encode as POST or GET query strings"
            },
            {
                "name": "headers",
                "type": "Any",
                "description": "A dict of headers to send."
            },
            {
                "name": "method",
                "type": "string",
                "description": "HTTP method to use (GET, POST)"
            },
            {
                "name": "data",
                "type": "string",
                "description": "If specified we write this raw data into a POST request instead of encoding the params above."
            },
            {
                "name": "chunk_size",
                "type": "int",
                "description": "Read input with this chunk size and send each chunk as a row"
            },
            {
                "name": "disable_ssl_security",
                "type": "bool",
                "description": "Disable ssl certificate verifications."
            },
            {
                "name": "tempfile_extension",
                "type": "string",
                "description": "If specified we write to a tempfile. The content field will contain the full path to the tempfile."
            },
            {
                "name": "remove_last",
                "type": "bool",
                "description": "If set we delay removal as much as possible."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "humanize",
        "description": "Format items in human readable way.",
        "type": "Function",
        "args": [
            {
                "name": "bytes",
                "type": "int64",
                "description": "Format bytes with units"
            }
        ],
        "category": "basic"
    },
    {
        "name": "hunt",
        "description": "Create and launch a hunt.",
        "type": "Function",
        "args": [
            {
                "name": "description",
                "type": "string",
                "description": "Description of the hunt",
                "required": true
            },
            {
                "name": "artifacts",
                "type": "string",
                "description": "A list of artifacts to collect",
                "repeated": true,
                "required": true
            },
            {
                "name": "expires",
                "type": "uint64",
                "description": "Number of milliseconds since epoch for expiry"
            },
            {
                "name": "spec",
                "type": "Any",
                "description": "Parameters to apply to the artifacts"
            },
            {
                "name": "timeout",
                "type": "uint64",
                "description": "Set query timeout (default 10 min)"
            },
            {
                "name": "ops_per_sec",
                "type": "float64",
                "description": "Set query ops_per_sec value"
            },
            {
                "name": "max_rows",
                "type": "uint64",
                "description": "Max number of rows to fetch"
            },
            {
                "name": "max_bytes",
                "type": "uint64",
                "description": "Max number of bytes to upload"
            },
            {
                "name": "pause",
                "type": "bool",
                "description": "If specified the new hunt will be in the paused state"
            },
            {
                "name": "include_labels",
                "type": "string",
                "description": "If specified only include these labels",
                "repeated": true
            },
            {
                "name": "exclude_labels",
                "type": "string",
                "description": "If specified exclude these labels",
                "repeated": true
            }
        ],
        "category": "server"
    },
    {
        "name": "hunt_add",
        "description": "Assign a client to a hunt.",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            },
            {
                "name": "hunt_id",
                "type": "string",
                "required": true
            },
            {
                "name": "flow_id",
                "type": "string",
                "description": "If a flow id is specified we do not create a new flow, but instead add this flow_id to the hunt."
            }
        ],
        "category": "server"
    },
    {
        "name": "hunt_flows",
        "description": "Retrieve the flows launched by a hunt.",
        "type": "Plugin",
        "args": [
            {
                "name": "hunt_id",
                "type": "string",
                "description": "The hunt id to inspect.",
                "required": true
            },
            {
                "name": "start_row",
                "type": "int64",
                "description": "The first row to show (used for paging)."
            },
            {
                "name": "limit",
                "type": "int64",
                "description": "Number of rows to show (used for paging)."
            }
        ],
        "category": "server"
    },
    {
        "name": "hunt_results",
        "description": "Retrieve the results of a hunt.",
        "type": "Plugin",
        "args": [
            {
                "name": "artifact",
                "type": "string",
                "description": "The artifact to retrieve"
            },
            {
                "name": "source",
                "type": "string",
                "description": "An optional source within the artifact."
            },
            {
                "name": "hunt_id",
                "type": "string",
                "description": "The hunt id to read.",
                "required": true
            },
            {
                "name": "brief",
                "type": "bool",
                "description": "If set we return less columns."
            }
        ],
        "category": "server"
    },
    {
        "name": "hunts",
        "description": "Retrieve the list of hunts.\n",
        "type": "Plugin",
        "args": [
            {
                "name": "hunt_id",
                "type": "string",
                "description": "A hunt id to read, if not specified we list all of them."
            }
        ],
        "category": "server"
    },
    {
        "name": "if",
        "description": "Conditional execution of query",
        "type": "Function",
        "args": [
            {
                "name": "condition",
                "type": "Any",
                "required": true
            },
            {
                "name": "then",
                "type": "LazyExpr"
            },
            {
                "name": "else",
                "type": "LazyExpr"
            }
        ],
        "category": "basic"
    },
    {
        "name": "if",
        "description": "Conditional execution of query",
        "type": "Plugin",
        "args": [
            {
                "name": "condition",
                "type": "Any",
                "required": true
            },
            {
                "name": "then",
                "type": "StoredQuery",
                "required": true
            },
            {
                "name": "else",
                "type": "StoredQuery"
            }
        ],
        "category": "plugin"
    },
    {
        "name": "import_collection",
        "description": "Imports an offline collection zip file (experimental).",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to import to. Use 'auto' to generate a new client id.",
                "required": true
            },
            {
                "name": "hostname",
                "type": "string",
                "description": "When creating a new client, set this as the hostname."
            },
            {
                "name": "filename",
                "type": "string",
                "description": "Path on server to the collector zip.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            }
        ]
    },
    {
        "name": "info",
        "description": "Get information about the running host.",
        "type": "Plugin",
        "category": "plugin"
    },
    {
        "name": "int",
        "description": "Truncate to an integer.",
        "type": "Function",
        "args": [
            {
                "name": "int",
                "type": "Any",
                "description": "The integer to round"
            }
        ],
        "category": "plugin"
    },
    {
        "name": "interfaces",
        "description": "List all active network interfaces using the API.\n",
        "type": "Plugin",
        "category": "windows"
    },
    {
        "name": "inventory",
        "description": "Retrieve the tools inventory.",
        "type": "Plugin",
        "category": "server"
    },
    {
        "name": "inventory_add",
        "description": "Add or reconfigure a tool into the inventory.",
        "type": "Function",
        "args": [
            {
                "name": "tool",
                "type": "string",
                "required": true
            },
            {
                "name": "serve_locally",
                "type": "bool"
            },
            {
                "name": "url",
                "type": "string"
            },
            {
                "name": "hash",
                "type": "string"
            },
            {
                "name": "filename",
                "type": "string",
                "description": "The name of the file on the endpoint"
            },
            {
                "name": "file",
                "type": "string",
                "description": "An optional file to upload"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use to read the file."
            }
        ],
        "category": "server"
    },
    {
        "name": "inventory_get",
        "description": "Get tool info from inventory service.",
        "type": "Function",
        "args": [
            {
                "name": "tool",
                "type": "string",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "ip",
        "description": "Format an IP address.",
        "type": "Function",
        "args": [
            {
                "name": "netaddr4_le",
                "type": "int64",
                "description": "A network order IPv4 address (as little endian)."
            },
            {
                "name": "netaddr4_be",
                "type": "int64",
                "description": "A network order IPv4 address (as big endian)."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "items",
        "description": "Iterate over dict members producing _key and _value columns",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "Any"
            }
        ],
        "category": "basic"
    },
    {
        "name": "items",
        "description": "Enumerate all members of the item (similar to Pythons items() method.",
        "type": "Plugin",
        "args": [
            {
                "name": "item",
                "type": "Any",
                "description": "The item to enumerate."
            }
        ],
        "category": "basic"
    },
    {
        "name": "join",
        "description": "Join all the args on a separator.",
        "type": "Function",
        "args": [
            {
                "name": "array",
                "type": "string",
                "description": "The array to join",
                "repeated": true,
                "required": true
            },
            {
                "name": "sep",
                "type": "string",
                "description": "The separator"
            }
        ],
        "category": "basic"
    },
    {
        "name": "js",
        "description": "Compile and run javascript code.",
        "type": "Function",
        "args": [
            {
                "name": "js",
                "type": "string",
                "description": "The body of the javascript code.",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "If set use this key to cache the JS VM."
            }
        ],
        "category": "experimental"
    },
    {
        "name": "js_call",
        "description": "Compile and run javascript code.",
        "type": "Function",
        "args": [
            {
                "name": "func",
                "type": "string",
                "description": "JS function to call.",
                "required": true
            },
            {
                "name": "args",
                "type": "Any",
                "description": "Positional args for the function."
            },
            {
                "name": "key",
                "type": "string",
                "description": "If set use this key to cache the JS VM."
            }
        ],
        "category": "experimental"
    },
    {
        "name": "js_get",
        "description": "Get a variable's value from the JS VM.",
        "type": "Function",
        "args": [
            {
                "name": "var",
                "type": "string",
                "description": "The variable to get from the JS VM.",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "If set use this key to cache the JS VM."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "js_set",
        "description": "Set a variables value in the JS VM.",
        "type": "Function",
        "args": [
            {
                "name": "var",
                "type": "string",
                "description": "The variable to set inside the JS VM.",
                "required": true
            },
            {
                "name": "value",
                "type": "Any",
                "description": "The value to set inside the VM.",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "If set use this key to cache the JS VM."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "killkillkill",
        "description": "Kills the client and forces a restart - this is very aggresive!",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "label",
        "description": "Add the labels to the client. If op is 'remove' then remove these labels.\n",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "description": "Client ID to label.",
                "required": true
            },
            {
                "name": "labels",
                "type": "string",
                "description": "A list of labels to apply",
                "repeated": true,
                "required": true
            },
            {
                "name": "op",
                "type": "string",
                "description": "An operation on the labels (set, check, remove)"
            }
        ],
        "category": "server"
    },
    {
        "name": "len",
        "description": "Returns the length of an object.",
        "type": "Function",
        "args": [
            {
                "name": "list",
                "type": "Any",
                "description": "A list of items too filter",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "log",
        "description": "Log the message.",
        "type": "Function",
        "args": [
            {
                "name": "message",
                "type": "string",
                "description": "Message to log.",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "lookupSID",
        "description": "Get information about the SID.",
        "type": "Function",
        "args": [
            {
                "name": "sid",
                "type": "string",
                "description": "A SID to lookup using LookupAccountSid ",
                "required": true
            }
        ],
        "category": "windows"
    },
    {
        "name": "lowcase",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "A string to lower",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "mail",
        "description": "Send Email to a remote server.",
        "type": "Plugin",
        "args": [
            {
                "name": "to",
                "type": "string",
                "description": "Receipient of the mail",
                "repeated": true,
                "required": true
            },
            {
                "name": "cc",
                "type": "string",
                "description": "A cc for the mail",
                "repeated": true
            },
            {
                "name": "subject",
                "type": "string",
                "description": "The subject."
            },
            {
                "name": "body",
                "type": "string",
                "description": "The body of the mail.",
                "required": true
            },
            {
                "name": "period",
                "type": "int64",
                "description": "How long to wait before sending the next mail - help to throttle mails.",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "max",
        "description": "Finds the largest item in the aggregate.",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "int64",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "memoize",
        "description": "Memoize a query into memory.",
        "type": "Function",
        "args": [
            {
                "name": "query",
                "type": "LazyExpr",
                "description": "Query to expand into memory",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "The name of the column to use as a key.",
                "required": true
            },
            {
                "name": "period",
                "type": "int64",
                "description": "The latest age of the cache."
            }
        ],
        "category": "basic"
    },
    {
        "name": "min",
        "description": "Finds the smallest item in the aggregate.",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "int64",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "mock",
        "description": "Mock a plugin.",
        "type": "Function",
        "args": [
            {
                "name": "plugin",
                "type": "string",
                "description": "The plugin to mock"
            },
            {
                "name": "function",
                "type": "string",
                "description": "The function to mock"
            },
            {
                "name": "artifact",
                "type": "Any",
                "description": "The artifact to mock"
            },
            {
                "name": "results",
                "type": "Any",
                "description": "The result to return",
                "required": true
            }
        ],
        "category": "utils"
    },
    {
        "name": "mock_check",
        "description": "Check expectations on a mock.",
        "type": "Function",
        "args": [
            {
                "name": "plugin",
                "type": "string",
                "description": "The plugin to mock"
            },
            {
                "name": "function",
                "type": "string",
                "description": "The function to mock"
            },
            {
                "name": "expected_calls",
                "type": "int",
                "description": "How many times plugin should be called"
            },
            {
                "name": "clear",
                "type": "bool",
                "description": "This call will clear previous mocks for this plugin"
            }
        ],
        "category": "utils"
    },
    {
        "name": "modules",
        "description": "Enumerate Loaded DLLs.",
        "type": "Plugin",
        "args": [
            {
                "name": "pid",
                "type": "int64",
                "description": "The PID to dump out.",
                "required": true
            }
        ],
        "category": "windows"
    },
    {
        "name": "monitoring",
        "description": "Extract monitoring log from a client. If client_id is not specified we watch the global journal which contains event logs from all clients.",
        "type": "Plugin",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to extract"
            },
            {
                "name": "flow_id",
                "type": "string",
                "description": "A flow ID (client or server artifacts)"
            },
            {
                "name": "hunt_id",
                "type": "string",
                "description": "Retrieve sources from this hunt (combines all results from all clients)"
            },
            {
                "name": "artifact",
                "type": "string",
                "description": "The name of the artifact collection to fetch"
            },
            {
                "name": "source",
                "type": "string",
                "description": "An optional named source within the artifact"
            },
            {
                "name": "start_time",
                "type": "Any",
                "description": "Start return events from this date (for event sources)"
            },
            {
                "name": "end_time",
                "type": "Any",
                "description": "Stop end events reach this time (event sources)."
            },
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The notebook to read from (shoud also include cell id)"
            },
            {
                "name": "notebook_cell_id",
                "type": "string",
                "description": "The notebook cell read from (shoud also include notebook id)"
            },
            {
                "name": "notebook_cell_table",
                "type": "int64",
                "description": "A notebook cell can have multiple tables.)"
            },
            {
                "name": "start_row",
                "type": "int64",
                "description": "Start reading the result set from this row"
            },
            {
                "name": "count",
                "type": "int64",
                "description": "Maximum number of clients to fetch (default unlimited)'"
            }
        ],
        "category": "server"
    },
    {
        "name": "netstat",
        "description": "Collect network information.",
        "type": "Plugin",
        "category": "windows"
    },
    {
        "name": "notebook_delete",
        "description": "Delete a notebook with all its cells. ",
        "type": "Plugin",
        "args": [
            {
                "name": "notebook_id",
                "type": "string",
                "required": true
            },
            {
                "name": "really_do_it",
                "type": "bool"
            }
        ],
        "category": "server"
    },
    {
        "name": "now",
        "description": "Returns current time in seconds since epoch.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "Any",
                "description": "A string to convert to int",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "olevba",
        "description": "Extracts VBA Macros from Office documents.",
        "type": "Plugin",
        "args": [
            {
                "name": "file",
                "type": "string",
                "description": "A list of filenames to open as OLE files.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "max_size",
                "type": "int64",
                "description": "Maximum size of file we load into memory."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parallelize",
        "description": "Runs query on result batches in parallel.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "The query will be run in parallel over batches.",
                "required": true
            },
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to extract"
            },
            {
                "name": "flow_id",
                "type": "string",
                "description": "A flow ID (client or server artifacts)"
            },
            {
                "name": "hunt_id",
                "type": "string",
                "description": "Retrieve sources from this hunt (combines all results from all clients)"
            },
            {
                "name": "artifact",
                "type": "string",
                "description": "The name of the artifact collection to fetch"
            },
            {
                "name": "source",
                "type": "string",
                "description": "An optional named source within the artifact"
            },
            {
                "name": "start_time",
                "type": "int64",
                "description": "Start return events from this date (for event sources)"
            },
            {
                "name": "end_time",
                "type": "int64",
                "description": "Stop end events reach this time (event sources)."
            },
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The notebook to read from (shoud also include cell id)"
            },
            {
                "name": "notebook_cell_id",
                "type": "string",
                "description": "The notebook cell read from (shoud also include notebook id)"
            },
            {
                "name": "notebook_cell_table",
                "type": "int64",
                "description": "A notebook cell can have multiple tables.)"
            },
            {
                "name": "workers",
                "type": "int64",
                "description": "Number of workers to spawn.)"
            },
            {
                "name": "batch",
                "type": "int64",
                "description": "Number of rows in each batch.)"
            }
        ],
        "category": "server"
    },
    {
        "name": "parse_auditd",
        "description": "Parse log files generated by auditd.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "A list of log files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_binary",
        "description": "Parse a binary file into a datastructure using a profile.",
        "type": "Function",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "Binary file to open.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "profile",
                "type": "string",
                "description": "Profile to use (see https://github.com/Velocidex/vtypes)."
            },
            {
                "name": "struct",
                "type": "string",
                "description": "Name of the struct in the profile to instantiate.",
                "required": true
            },
            {
                "name": "offset",
                "type": "int64",
                "description": "Start parsing from this offset"
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_csv",
        "description": "Parses events from a CSV file.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "CSV files to open",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "auto_headers",
                "type": "bool",
                "description": "If unset the first row is headers"
            },
            {
                "name": "separator",
                "type": "string",
                "description": "Comma separator"
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_ese",
        "description": "Opens an ESE file and dump a table.",
        "type": "Plugin",
        "args": [
            {
                "name": "file",
                "type": "string",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "table",
                "type": "string",
                "description": "A table name to dump",
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_evtx",
        "description": "Parses events from an EVTX file.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "A list of event log files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "messagedb",
                "type": "string",
                "description": "A Message database from https://github.com/Velocidex/evtx-data."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_float",
        "description": "Convert a string to a float.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "Any",
                "description": "A string to convert to int",
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_json",
        "description": "Parse a JSON string into an object.",
        "type": "Function",
        "args": [
            {
                "name": "data",
                "type": "string",
                "description": "Json encoded string.",
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_json_array",
        "description": "Parse a JSON string into an array.",
        "type": "Function",
        "args": [
            {
                "name": "data",
                "type": "string",
                "description": "Json encoded string.",
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_json_array",
        "description": "Parses events from a line oriented json file.",
        "type": "Plugin",
        "args": [
            {
                "name": "data",
                "type": "string",
                "description": "Json encoded string.",
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_jsonl",
        "description": "Parses a line oriented json file.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "JSON file to open",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_lines",
        "description": "Parse a file separated into lines.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "A list of log files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_mft",
        "description": "Scan the $MFT from an NTFS volume.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "A list of event log files to parse.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_ntfs",
        "description": "Parse an NTFS image file.",
        "type": "Function",
        "args": [
            {
                "name": "device",
                "type": "string",
                "description": "The device file to open. This may be a full path - we will figure out the device automatically.",
                "required": true
            },
            {
                "name": "inode",
                "type": "string",
                "description": "The MFT entry to parse in inode notation (5-144-1)."
            },
            {
                "name": "mft",
                "type": "int64",
                "description": "The MFT entry to parse."
            },
            {
                "name": "mft_offset",
                "type": "int64",
                "description": "The offset to the MFT entry to parse."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_ntfs_i30",
        "description": "Scan the $I30 stream from an NTFS MFT entry.",
        "type": "Plugin",
        "args": [
            {
                "name": "device",
                "type": "string",
                "description": "The device file to open. This may be a full path - we will figure out the device automatically.",
                "required": true
            },
            {
                "name": "inode",
                "type": "string",
                "description": "The MFT entry to parse in inode notation (5-144-1)."
            },
            {
                "name": "mft",
                "type": "int64",
                "description": "The MFT entry to parse."
            },
            {
                "name": "mft_offset",
                "type": "int64",
                "description": "The offset to the MFT entry to parse."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_ntfs_ranges",
        "description": "Show the run ranges for an NTFS stream.",
        "type": "Plugin",
        "args": [
            {
                "name": "device",
                "type": "string",
                "description": "The device file to open. This may be a full path - we will figure out the device automatically.",
                "required": true
            },
            {
                "name": "inode",
                "type": "string",
                "description": "The MFT entry to parse in inode notation (5-144-1)."
            },
            {
                "name": "mft",
                "type": "int64",
                "description": "The MFT entry to parse."
            },
            {
                "name": "mft_offset",
                "type": "int64",
                "description": "The offset to the MFT entry to parse."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_pe",
        "description": "Parse a PE file.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "string",
                "description": "The PE file to open.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_pkcs7",
        "description": "Parse a DER encoded pkcs7 string into an object.",
        "type": "Function",
        "args": [
            {
                "name": "data",
                "type": "string",
                "description": "PKCS7 DER encoded string.",
                "required": true
            }
        ]
    },
    {
        "name": "parse_records_with_regex",
        "description": "Parses a file with a set of regexp and yields matches as records.  The\nfile is read into a large buffer. Then each regular expression is\napplied to the buffer, and all matches are emitted as rows.",
        "type": "Plugin",
        "args": [
            {
                "name": "file",
                "type": "string",
                "description": "A list of files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "regex",
                "type": "string",
                "description": "A list of regex to apply to the file data.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_recyclebin",
        "description": "Parses a $I file found in the $Recycle.Bin",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "Files to be parsed.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_string_with_regex",
        "description": "Parse a string with a set of regex and extract fields. Returns a dict with fields populated from all regex capture variables.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "A string to parse.",
                "required": true
            },
            {
                "name": "regex",
                "type": "string",
                "description": "The regex to apply.",
                "repeated": true,
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_usn",
        "description": "Parse the USN journal from a device.",
        "type": "Plugin",
        "args": [
            {
                "name": "device",
                "type": "string",
                "description": "The device file to open.",
                "required": true
            },
            {
                "name": "start_offset",
                "type": "int64",
                "description": "The starting offset of the first USN record to parse."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_x509",
        "description": "Parse a DER encoded x509 string into an object.",
        "type": "Function",
        "args": [
            {
                "name": "data",
                "type": "string",
                "description": "X509 DER encoded string.",
                "required": true
            }
        ]
    },
    {
        "name": "parse_xml",
        "description": "Parse an XML document into a dict like object.\n",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "string",
                "description": "XML file to open.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            }
        ],
        "category": "parsers"
    },
    {
        "name": "parse_yaml",
        "description": "Parse yaml into an object.",
        "type": "Function",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "Yaml Filename",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "File accessor"
            }
        ]
    },
    {
        "name": "partitions",
        "description": "List all partititions",
        "type": "Plugin",
        "args": [
            {
                "name": "all",
                "type": "bool",
                "description": "If specified list all Partitions"
            }
        ],
        "category": "windows"
    },
    {
        "name": "patch",
        "description": "Patch a JSON object with a json patch or merge.",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "Any",
                "description": "The item to path",
                "required": true
            },
            {
                "name": "patch",
                "type": "Any",
                "description": "A JSON Patch to apply"
            },
            {
                "name": "merge",
                "type": "Any",
                "description": "A merge-patch to apply"
            }
        ],
        "category": "server"
    },
    {
        "name": "path_join",
        "description": "Build a path by joining all components.",
        "type": "Function",
        "args": [
            {
                "name": "components",
                "type": "string",
                "description": "Path components to join.",
                "repeated": true,
                "required": true
            },
            {
                "name": "sep",
                "type": "string",
                "description": "Separator to use (default /)"
            }
        ],
        "category": "basic"
    },
    {
        "name": "path_split",
        "description": "Split a path into components. Note this is more complex than just split() because it takes into account path escaping.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "Path to split into components.",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "plist",
        "description": "Parse plist file",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "string",
                "description": "A list of files to parse.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "plist",
        "description": "Parses a plist file.",
        "type": "Plugin",
        "args": [
            {
                "name": "file",
                "type": "string",
                "description": "A list of files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "prefetch",
        "description": "Parses a prefetch file.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "A list of event log files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "proc_dump",
        "description": "Dumps process memory.",
        "type": "Plugin",
        "args": [
            {
                "name": "pid",
                "type": "int64",
                "description": "The PID to dump out.",
                "required": true
            }
        ],
        "category": "windows"
    },
    {
        "name": "proc_yara",
        "description": "Scan processes using yara rules.",
        "type": "Plugin",
        "args": [
            {
                "name": "rules",
                "type": "string",
                "description": "Yara rules",
                "required": true
            },
            {
                "name": "pid",
                "type": "int",
                "description": "The pid to scan",
                "required": true
            },
            {
                "name": "context",
                "type": "int",
                "description": "Return this many bytes either side of a hit"
            },
            {
                "name": "key",
                "type": "string",
                "description": "If set use this key to cache the  yara rules."
            }
        ],
        "category": "windows"
    },
    {
        "name": "profile",
        "description": "Returns a profile dump from the running process.",
        "type": "Plugin",
        "args": [
            {
                "name": "allocs",
                "type": "bool",
                "description": "A sampling of all past memory allocations"
            },
            {
                "name": "block",
                "type": "bool",
                "description": "Stack traces that led to blocking on synchronization primitives"
            },
            {
                "name": "goroutine",
                "type": "bool",
                "description": "Stack traces of all current goroutines"
            },
            {
                "name": "heap",
                "type": "bool",
                "description": "A sampling of memory allocations of live objects."
            },
            {
                "name": "mutex",
                "type": "bool",
                "description": "Stack traces of holders of contended mutexes"
            },
            {
                "name": "profile",
                "type": "bool",
                "description": "CPU profile."
            },
            {
                "name": "trace",
                "type": "bool",
                "description": "CPU trace."
            },
            {
                "name": "debug",
                "type": "int64",
                "description": "Debug level"
            },
            {
                "name": "logs",
                "type": "bool",
                "description": "Recent logs"
            },
            {
                "name": "queries",
                "type": "bool",
                "description": "Recent Queries run"
            },
            {
                "name": "metrics",
                "type": "bool",
                "description": "Collect metrics"
            },
            {
                "name": "duration",
                "type": "int64",
                "description": "Duration of samples (default 30 sec)"
            }
        ],
        "category": "plugins"
    },
    {
        "name": "pslist",
        "description": "Enumerate running processes.",
        "type": "Plugin",
        "args": [
            {
                "name": "pid",
                "type": "int64",
                "description": "A pid to list. If this is provided we are able to operate much faster by only opening a single process."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "query",
        "description": "Launch a subquery and materialize it into a list of rows.",
        "type": "Function",
        "args": [
            {
                "name": "vql",
                "type": "vfilter.StoredQuery",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "query",
        "description": "Evaluate a VQL query.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "string",
                "description": "A VQL Query to parse and execute.",
                "required": true
            },
            {
                "name": "env",
                "type": "ordereddict.Dict",
                "description": "A dict of args to insert into the scope."
            }
        ]
    },
    {
        "name": "rand",
        "description": "Selects a random number.",
        "type": "Function",
        "args": [
            {
                "name": "range",
                "type": "int64",
                "description": "Selects a random number up to this range."
            }
        ],
        "category": "basic"
    },
    {
        "name": "range",
        "description": "Iterate over range.",
        "type": "Plugin",
        "args": [
            {
                "name": "start",
                "type": "int64",
                "description": "Start index (0 based)",
                "required": true
            },
            {
                "name": "end",
                "type": "int64",
                "description": "End index (0 based)",
                "required": true
            },
            {
                "name": "step",
                "type": "int64",
                "description": "End index (0 based)",
                "required": true
            }
        ]
    },
    {
        "name": "rate",
        "description": "Calculates the rate (derivative) between two quantities.",
        "type": "Function",
        "args": [
            {
                "name": "x",
                "type": "float64",
                "description": "The X float",
                "required": true
            },
            {
                "name": "y",
                "type": "float64",
                "description": "The Y float",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "read_file",
        "description": "Read a file into a string.",
        "type": "Function",
        "args": [
            {
                "name": "length",
                "type": "int",
                "description": "Max length of the file to read."
            },
            {
                "name": "offset",
                "type": "int64",
                "description": "Where to read from the file."
            },
            {
                "name": "filename",
                "type": "string",
                "description": "One or more files to open.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "An accessor to use."
            }
        ],
        "category": "basic"
    },
    {
        "name": "read_file",
        "description": "Read files in chunks.",
        "type": "Plugin",
        "args": [
            {
                "name": "chunk",
                "type": "int",
                "description": "length of each chunk to read from the file."
            },
            {
                "name": "max_length",
                "type": "int",
                "description": "Max length of the file to read."
            },
            {
                "name": "filenames",
                "type": "string",
                "description": "One or more files to open.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "An accessor to use."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "read_reg_key",
        "description": "This is a convenience plugin which applies the globs to the registry\naccessor to find keys. For each key the plugin then lists all the\nvalues within it, and returns a row which has the value names as\ncolumns, while the cells contain the value's stat info (and data\ncontent available in the `Data` field).",
        "type": "Plugin",
        "args": [
            {
                "name": "globs",
                "type": "string",
                "description": "Glob expressions to apply.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "windows"
    },
    {
        "name": "reg_rm_key",
        "description": "Removes a key and all its values from the registry.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "Registry key path.",
                "required": true
            }
        ]
    },
    {
        "name": "reg_rm_value",
        "description": "Removes a value in the registry.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "Registry value path.",
                "required": true
            }
        ]
    },
    {
        "name": "reg_set_value",
        "description": "Set a value in the registry.",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "Registry value path.",
                "required": true
            },
            {
                "name": "value",
                "type": "LazyExpr",
                "description": "Value to set",
                "required": true
            },
            {
                "name": "type",
                "type": "string",
                "description": "Type to set (SZ, DWORD, QWORD)",
                "required": true
            },
            {
                "name": "create",
                "type": "bool",
                "description": "Set to create missing intermediate keys"
            }
        ]
    },
    {
        "name": "regex_replace",
        "description": "Search and replace a string with a regexp. Note you can use $1 to replace the capture string.",
        "type": "Function",
        "args": [
            {
                "name": "source",
                "type": "string",
                "description": "The source string to replace.",
                "required": true
            },
            {
                "name": "replace",
                "type": "string",
                "description": "The substitute string.",
                "required": true
            },
            {
                "name": "re",
                "type": "string",
                "description": "A regex to apply",
                "required": true
            }
        ],
        "category": "parsers"
    },
    {
        "name": "regex_transform",
        "description": "Search and replace a string with multiple regex. Note you can use $1\nto replace the capture string.",
        "type": "Function",
        "args": [
            {
                "name": "source",
                "type": "string",
                "description": "The source string to replace.",
                "required": true
            },
            {
                "name": "map",
                "type": "ordereddict.Dict",
                "description": "A dict with keys reg, values substitutions.",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "A key for caching"
            }
        ]
    },
    {
        "name": "relpath",
        "description": "Return the relative path of .",
        "type": "Function",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "Extract directory name of path",
                "required": true
            },
            {
                "name": "base",
                "type": "string",
                "description": "The base of the path",
                "required": true
            },
            {
                "name": "sep",
                "type": "string",
                "description": "Separator to use (default native)"
            }
        ]
    },
    {
        "name": "rm",
        "description": "Remove a file from the filesystem using the API.",
        "type": "Function",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "Filename to remove.",
                "required": true
            }
        ]
    },
    {
        "name": "rot13",
        "description": "Apply rot13 deobfuscation to the string.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string"
            }
        ],
        "category": "parsers"
    },
    {
        "name": "sample",
        "description": "Executes 'query' and samples every n'th row.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Source query.",
                "required": true
            },
            {
                "name": "n",
                "type": "int64",
                "description": "Pick every n row from query.",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "scope",
        "description": "return the scope.",
        "type": "Function",
        "category": "basic"
    },
    {
        "name": "scope",
        "description": "The scope plugin returns the current scope as a single row.",
        "type": "Plugin",
        "category": "plugin"
    },
    {
        "name": "send_event",
        "description": "Sends an event to a server event monitoring queue.",
        "type": "Function",
        "args": [
            {
                "name": "artifact",
                "type": "string",
                "description": "The artifact name to send the event to.",
                "required": true
            },
            {
                "name": "row",
                "type": "ordereddict.Dict",
                "description": "The row to send to the artifact",
                "required": true
            }
        ]
    },
    {
        "name": "sequence",
        "description": "Combines the output of many queries into an in memory fifo. After\neach row is received from any subquery runs the query specified in\nthe 'query' parameter to retrieve rows from the memory SEQUENCE\nobject.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Run this query to generator rows. The query should select from SEQUENCE which will contain the current set of rows in the sequence. The query will be run on each new row that is pushed to the sequence.",
                "required": true
            },
            {
                "name": "max_age",
                "type": "int64",
                "description": "Maximum number of seconds to hold rows in the sequence."
            }
        ]
    },
    {
        "name": "serialize",
        "description": "Encode an object as a string (csv or json).",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "Any",
                "description": "The item to encode",
                "required": true
            },
            {
                "name": "format",
                "type": "string",
                "description": "Encoding format (csv,json)"
            }
        ],
        "category": "basic"
    },
    {
        "name": "server_metadata",
        "description": "Returns client metadata from the datastore. Client metadata is a set of free form key/value data",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "server_set_metadata",
        "description": "Sets client metadata. Client metadata is a set of free form key/value data",
        "type": "Function",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "set",
        "description": "Sets the member field of the item. If item is omitted sets the scope.",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "Any",
                "required": true
            },
            {
                "name": "field",
                "type": "string",
                "required": true
            },
            {
                "name": "value",
                "type": "Any",
                "required": true
            }
        ]
    },
    {
        "name": "set_client_monitoring",
        "description": "Sets the current client monitoring state.",
        "type": "Function",
        "args": [
            {
                "name": "value",
                "type": "Any",
                "description": "The Value to set",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "set_server_monitoring",
        "description": "Sets the current server monitoring state.",
        "type": "Function",
        "args": [
            {
                "name": "value",
                "type": "Any",
                "description": "The Value to set",
                "required": true
            }
        ],
        "category": "server"
    },
    {
        "name": "sleep",
        "description": "Sleep for the specified number of seconds. Always returns true.",
        "type": "Function",
        "args": [
            {
                "name": "time",
                "type": "int64",
                "description": "The number of seconds to sleep"
            },
            {
                "name": "ms",
                "type": "int64",
                "description": "The number of ms to sleep"
            }
        ],
        "category": "basic"
    },
    {
        "name": "slice",
        "description": "Slice an array.",
        "type": "Function",
        "args": [
            {
                "name": "list",
                "type": "Any",
                "description": "A list of items to slice",
                "required": true
            },
            {
                "name": "start",
                "type": "uint64",
                "description": "Start index (0 based)",
                "required": true
            },
            {
                "name": "end",
                "type": "uint64",
                "description": "End index (0 based)",
                "required": true
            }
        ]
    },
    {
        "name": "source",
        "description": "Retrieve rows from an artifact's source.",
        "type": "Plugin",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to extract"
            },
            {
                "name": "flow_id",
                "type": "string",
                "description": "A flow ID (client or server artifacts)"
            },
            {
                "name": "hunt_id",
                "type": "string",
                "description": "Retrieve sources from this hunt (combines all results from all clients)"
            },
            {
                "name": "artifact",
                "type": "string",
                "description": "The name of the artifact collection to fetch"
            },
            {
                "name": "source",
                "type": "string",
                "description": "An optional named source within the artifact"
            },
            {
                "name": "start_time",
                "type": "Any",
                "description": "Start return events from this date (for event sources)"
            },
            {
                "name": "end_time",
                "type": "Any",
                "description": "Stop end events reach this time (event sources)."
            },
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The notebook to read from (shoud also include cell id)"
            },
            {
                "name": "notebook_cell_id",
                "type": "string",
                "description": "The notebook cell read from (shoud also include notebook id)"
            },
            {
                "name": "notebook_cell_table",
                "type": "int64",
                "description": "A notebook cell can have multiple tables.)"
            },
            {
                "name": "start_row",
                "type": "int64",
                "description": "Start reading the result set from this row"
            },
            {
                "name": "count",
                "type": "int64",
                "description": "Maximum number of clients to fetch (default unlimited)'"
            }
        ],
        "category": "server"
    },
    {
        "name": "split",
        "description": "Splits a string into an array based on a regexp separator.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "The value to split",
                "required": true
            },
            {
                "name": "sep",
                "type": "string",
                "description": "The serparator that will be used to split",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "split_records",
        "description": "Parses files by splitting lines into records.",
        "type": "Plugin",
        "args": [
            {
                "name": "filenames",
                "type": "string",
                "description": "Files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "regex",
                "type": "string",
                "description": "The split regular expression (e.g. a comma)",
                "required": true
            },
            {
                "name": "columns",
                "type": "string",
                "description": "If the first row is not the headers, this arg must provide a list of column names for each value.",
                "repeated": true
            },
            {
                "name": "first_row_is_headers",
                "type": "bool",
                "description": "A bool indicating if we should get column names from the first row."
            },
            {
                "name": "count",
                "type": "int",
                "description": "Only split into this many columns if possible."
            }
        ],
        "category": "parsers"
    },
    {
        "name": "splunk_upload",
        "description": "Upload rows to splunk.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Source for rows to upload.",
                "required": true
            },
            {
                "name": "threads",
                "type": "int64",
                "description": "How many threads to use."
            },
            {
                "name": "url",
                "type": "string",
                "description": "The Splunk Event Collector URL."
            },
            {
                "name": "token",
                "type": "string",
                "description": "Splunk HEC Token."
            },
            {
                "name": "index",
                "type": "string",
                "description": "The name of the index to upload to.",
                "required": true
            },
            {
                "name": "source",
                "type": "string",
                "description": "The source field for splunk. If not specified this will be 'velociraptor'."
            },
            {
                "name": "sourcetype",
                "type": "string",
                "description": "The sourcetype field for splunk. If not specified this will 'vql'"
            },
            {
                "name": "chunk_size",
                "type": "int64",
                "description": "The number of rows to send at the time."
            },
            {
                "name": "skip_verify",
                "type": "bool",
                "description": "Skip SSL verification(default: False)."
            },
            {
                "name": "wait_time",
                "type": "int64",
                "description": "Batch splunk upload this long (2 sec)."
            }
        ],
        "category": "server"
    },
    {
        "name": "sql",
        "description": "Run queries against sqlite, mysql, and postgres databases",
        "type": "Plugin",
        "args": [
            {
                "name": "driver",
                "type": "string",
                "description": "sqlite, mysql,or postgres",
                "required": true
            },
            {
                "name": "connstring",
                "type": "string",
                "description": "SQL Connection String"
            },
            {
                "name": "file",
                "type": "string",
                "description": "Required if using sqlite driver"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use if using sqlite"
            },
            {
                "name": "query",
                "type": "string",
                "required": true
            },
            {
                "name": "args",
                "type": "Any"
            }
        ]
    },
    {
        "name": "sqlite",
        "description": "Opens an SQLite file and run a query against it.",
        "type": "Plugin",
        "args": [
            {
                "name": "file",
                "type": "string",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "query",
                "type": "string",
                "required": true
            },
            {
                "name": "args",
                "type": "Any"
            }
        ],
        "category": "parsers"
    },
    {
        "name": "srum_lookup_id",
        "description": "Lookup a SRUM id.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "string",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "id",
                "type": "int64",
                "required": true
            }
        ],
        "category": "windows"
    },
    {
        "name": "starl",
        "description": "Compile a starlark code block - returns a module usable in VQL",
        "type": "Function",
        "args": [
            {
                "name": "code",
                "type": "string",
                "description": "The body of the starlark code.",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "If set use this key to cache the Starlark code block."
            },
            {
                "name": "globals",
                "type": "Any",
                "description": "Dictionary of values to feed into Starlark environment"
            }
        ]
    },
    {
        "name": "stat",
        "description": "Get file information. Unlike glob() this does not support wildcards.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "One or more files to open.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "An accessor to use."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "str",
        "description": "Normalize a String.",
        "type": "Function",
        "args": [
            {
                "name": "str",
                "type": "Any",
                "description": "The string to normalize",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "strip",
        "description": "Strip a prefix from a string.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "The string to strip",
                "required": true
            },
            {
                "name": "prefix",
                "type": "string",
                "description": "The prefix to strip"
            }
        ],
        "category": "basic"
    },
    {
        "name": "substr",
        "description": "Create a substring from a string",
        "type": "Function",
        "args": [
            {
                "name": "str",
                "type": "string",
                "description": "The string to shorten",
                "required": true
            },
            {
                "name": "start",
                "type": "int",
                "description": "Beginning index of substring"
            },
            {
                "name": "end",
                "type": "int",
                "description": "End index of substring"
            }
        ]
    },
    {
        "name": "sum",
        "description": "Sums the items.",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "int64",
                "required": true
            }
        ]
    },
    {
        "name": "switch",
        "description": "Executes each query. The first query to return any rows will be emitted.",
        "type": "Plugin",
        "category": "plugin"
    },
    {
        "name": "tempdir",
        "description": "Create a temporary directory. The directory will be removed when the query ends.",
        "type": "Function",
        "args": [
            {
                "name": "remove_last",
                "type": "bool",
                "description": "If set we delay removal as much as possible."
            }
        ],
        "category": "basic"
    },
    {
        "name": "tempfile",
        "description": "Create a temporary file and write some data into it.",
        "type": "Function",
        "args": [
            {
                "name": "data",
                "type": "string",
                "description": "Data to write in the tempfile.",
                "repeated": true
            },
            {
                "name": "extension",
                "type": "string",
                "description": "An extension to place in the tempfile."
            },
            {
                "name": "permissions",
                "type": "string",
                "description": "Required permissions (e.g. 'x')."
            },
            {
                "name": "remove_last",
                "type": "bool",
                "description": "If set we delay removal as much as possible."
            }
        ],
        "category": "plugin"
    },
    {
        "name": "timeline",
        "description": "Read a timeline. You can create a timeline with the timeline_add() function",
        "type": "Plugin",
        "args": [
            {
                "name": "timeline",
                "type": "string",
                "description": "Name of the timeline to read",
                "required": true
            },
            {
                "name": "skip",
                "type": "string",
                "description": "List of child components to skip",
                "repeated": true
            },
            {
                "name": "start",
                "type": "Any",
                "description": "First timestamp to fetch"
            },
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The notebook ID the timeline is stored in."
            }
        ]
    },
    {
        "name": "timeline_add",
        "description": "Add a new query to a timeline.",
        "type": "Function",
        "args": [
            {
                "name": "timeline",
                "type": "string",
                "description": "Supertimeline to add to",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "Name of child timeline",
                "required": true
            },
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "Run this query to generate the timeline.",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "The column representing the time.",
                "required": true
            },
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The notebook ID the timeline is stored in."
            }
        ]
    },
    {
        "name": "timestamp",
        "description": "Convert from different types to a time.Time.",
        "type": "Function",
        "args": [
            {
                "name": "epoch",
                "type": "Any"
            },
            {
                "name": "cocoatime",
                "type": "int64"
            },
            {
                "name": "mactime",
                "type": "int64",
                "description": "HFS+"
            },
            {
                "name": "winfiletime",
                "type": "int64"
            },
            {
                "name": "string",
                "type": "string",
                "description": "Guess a timestamp from a string"
            },
            {
                "name": "timezone",
                "type": "string",
                "description": "A default timezone (UTC)"
            },
            {
                "name": "format",
                "type": "string",
                "description": "A format specifier as per Golangs time.Parse"
            }
        ],
        "category": "basic"
    },
    {
        "name": "to_dict",
        "description": "Construct a dict from a query.",
        "type": "Function",
        "args": [
            {
                "name": "item",
                "type": "Any"
            }
        ],
        "category": "basic"
    },
    {
        "name": "token",
        "description": "Extract process token.",
        "type": "Function",
        "args": [
            {
                "name": "pid",
                "type": "int64",
                "description": "The PID to get the token for.",
                "required": true
            }
        ],
        "category": "windows"
    },
    {
        "name": "unhex",
        "description": "Apply hex decoding to the string.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "Hex string to decode"
            }
        ]
    },
    {
        "name": "unzip",
        "description": "Unzips a file into a directory",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "File to unzip.",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "filename_filter",
                "type": "string",
                "description": "Only extract members matching this filter."
            },
            {
                "name": "output_directory",
                "type": "string",
                "description": "Where to unzip to",
                "required": true
            }
        ]
    },
    {
        "name": "upcase",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "A string to lower",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "upload",
        "description": "Upload a file to the upload service. For a Velociraptor client this\nwill upload the file into the flow and store it in the server's file store.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "string",
                "description": "The file to upload",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the file that should be stored on the server"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "mtime",
                "type": "Any",
                "description": "Modified time to record"
            },
            {
                "name": "atime",
                "type": "Any",
                "description": "Access time to record"
            },
            {
                "name": "ctime",
                "type": "Any",
                "description": "Change time to record"
            },
            {
                "name": "btime",
                "type": "Any",
                "description": "Birth time to record"
            }
        ],
        "category": "plugin"
    },
    {
        "name": "upload",
        "description": "Upload files to the server.",
        "type": "Plugin",
        "args": [
            {
                "name": "files",
                "type": "string",
                "description": "A list of files to upload",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "mtime",
                "type": "Any",
                "description": "Modified time to record"
            }
        ],
        "category": "plugin"
    },
    {
        "name": "upload_directory",
        "description": "Upload a file to an upload directory. The final filename will be the output directory path followed by the filename path.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "string",
                "description": "The file to upload",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "Filename to be stored within the output directory"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "output",
                "type": "string",
                "description": "An output directory to store files in.",
                "required": true
            },
            {
                "name": "mtime",
                "type": "Any",
                "description": "Modified time to set the output file."
            },
            {
                "name": "atime",
                "type": "Any",
                "description": "Access time to set the output file."
            },
            {
                "name": "ctime",
                "type": "Any",
                "description": "Change time to set the output file."
            },
            {
                "name": "btime",
                "type": "Any",
                "description": "Birth time to set the output file."
            }
        ]
    },
    {
        "name": "upload_gcs",
        "description": "Upload files to GCS.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "string",
                "description": "The file to upload",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the file that should be stored on the server"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "bucket",
                "type": "string",
                "description": "The bucket to upload to",
                "required": true
            },
            {
                "name": "project",
                "type": "string",
                "description": "The project to upload to",
                "required": true
            },
            {
                "name": "credentials",
                "type": "string",
                "description": "The credentials to use",
                "required": true
            }
        ],
        "category": "plugin"
    },
    {
        "name": "upload_s3",
        "description": "Upload files to S3.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "string",
                "description": "The file to upload",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the file that should be stored on the server"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "bucket",
                "type": "string",
                "description": "The bucket to upload to",
                "required": true
            },
            {
                "name": "region",
                "type": "string",
                "description": "The region the bucket is in",
                "required": true
            },
            {
                "name": "credentialskey",
                "type": "string",
                "description": "The AWS key credentials to use"
            },
            {
                "name": "credentialssecret",
                "type": "string",
                "description": "The AWS secret credentials to use"
            },
            {
                "name": "endpoint",
                "type": "string",
                "description": "The Endpoint to use"
            },
            {
                "name": "serversideencryption",
                "type": "string",
                "description": "The server side encryption method to use"
            },
            {
                "name": "noverifycert",
                "type": "bool",
                "description": "Skip TLS Verification"
            }
        ],
        "category": "plugin"
    },
    {
        "name": "upload_sftp",
        "description": "Upload files to SFTP.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "string",
                "description": "The file to upload",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the file that should be stored on the server"
            },
            {
                "name": "user",
                "type": "string",
                "description": "The username to connect to the endpoint with",
                "required": true
            },
            {
                "name": "path",
                "type": "string",
                "description": "Path on server to upload file to",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "privatekey",
                "type": "string",
                "description": "The private key to use",
                "required": true
            },
            {
                "name": "endpoint",
                "type": "string",
                "description": "The Endpoint to use",
                "required": true
            },
            {
                "name": "hostkey",
                "type": "string",
                "description": "Host key to verify. Blank to disable"
            }
        ],
        "category": "basic"
    },
    {
        "name": "upload_webdav",
        "description": "Upload files to a WebDAV server.",
        "type": "Function",
        "args": [
            {
                "name": "file",
                "type": "string",
                "description": "The file to upload",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name that the file should have on the server"
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "url",
                "type": "string",
                "description": "The WebDAV url",
                "required": true
            },
            {
                "name": "basic_auth_user",
                "type": "string",
                "description": "The username to use in HTTP basic auth"
            },
            {
                "name": "basic_auth_password",
                "type": "string",
                "description": "The password to use in HTTP basic auth"
            },
            {
                "name": "noverifycert",
                "type": "bool",
                "description": "Skip TLS Verification"
            }
        ],
        "category": "basic"
    },
    {
        "name": "uploads",
        "description": "Retrieve information about a flow's uploads.",
        "type": "Plugin",
        "args": [
            {
                "name": "client_id",
                "type": "string",
                "description": "The client id to extract"
            },
            {
                "name": "flow_id",
                "type": "string",
                "description": "A flow ID (client or server artifacts)"
            }
        ],
        "category": "server"
    },
    {
        "name": "url",
        "description": "Construct a URL or parse one.",
        "type": "Function",
        "args": [
            {
                "name": "scheme",
                "type": "string",
                "description": "The scheme to use"
            },
            {
                "name": "host",
                "type": "string",
                "description": "The host component"
            },
            {
                "name": "path",
                "type": "string",
                "description": "The path component"
            },
            {
                "name": "fragment",
                "type": "string",
                "description": "The fragment"
            },
            {
                "name": "parse",
                "type": "string",
                "description": "A url to parse"
            }
        ],
        "category": "basic"
    },
    {
        "name": "user_create",
        "description": "Creates a new user from the server, or updates their permissions or reset their password.",
        "type": "Function",
        "args": [
            {
                "name": "user",
                "type": "string",
                "required": true
            },
            {
                "name": "roles",
                "type": "string",
                "repeated": true,
                "required": true
            },
            {
                "name": "password",
                "type": "string"
            }
        ]
    },
    {
        "name": "user_delete",
        "description": "Deletes a user from the server.",
        "type": "Function",
        "args": [
            {
                "name": "user",
                "type": "string",
                "required": true
            }
        ]
    },
    {
        "name": "users",
        "description": "Display information about workstation local users. This is obtained through the NetUserEnum() API.",
        "type": "Plugin",
        "category": "windows"
    },
    {
        "name": "utf16",
        "description": "Parse input from utf16.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "A string to decode",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "utf16_encode",
        "description": "Encode a string to utf16 bytes.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "A string to decode",
                "required": true
            }
        ],
        "category": "basic"
    },
    {
        "name": "uuid",
        "description": "Generate a UUID.",
        "type": "Function",
        "category": "basic"
    },
    {
        "name": "vad",
        "description": "Enumerate process memory regions.",
        "type": "Plugin",
        "args": [
            {
                "name": "pid",
                "type": "int64",
                "description": "The PID to dump out.",
                "required": true
            }
        ],
        "category": "windows"
    },
    {
        "name": "version",
        "description": "\nGets the version of a VQL plugin or function.",
        "type": "Function",
        "args": [
            {
                "name": "function",
                "type": "string"
            },
            {
                "name": "plugin",
                "type": "string"
            }
        ],
        "category": "basic"
    },
    {
        "name": "watch_auditd",
        "description": "Watch log files generated by auditd.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "A list of log files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "event"
    },
    {
        "name": "watch_csv",
        "description": "Watch a CSV file and stream events from it. Note: This is an event\nplugin which does not complete.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "CSV files to open",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "auto_headers",
                "type": "bool",
                "description": "If unset the first row is headers"
            },
            {
                "name": "separator",
                "type": "string",
                "description": "Comma separator"
            }
        ],
        "category": "event"
    },
    {
        "name": "watch_etw",
        "description": "Watch for events from an ETW provider.",
        "type": "Plugin",
        "args": [
            {
                "name": "name",
                "type": "string",
                "description": "A session name "
            },
            {
                "name": "guid",
                "type": "string",
                "description": "A Provider GUID to watch ",
                "required": true
            },
            {
                "name": "any",
                "type": "uint64",
                "description": "Any Keywords "
            },
            {
                "name": "all",
                "type": "uint64",
                "description": "All Keywords "
            },
            {
                "name": "level",
                "type": "int64",
                "description": "Log level (0-5)"
            }
        ],
        "category": "event"
    },
    {
        "name": "watch_evtx",
        "description": "Watch an EVTX file and stream events from it.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "A list of event log files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            },
            {
                "name": "messagedb",
                "type": "string",
                "description": "A Message database from https://github.com/Velocidex/evtx-data."
            }
        ],
        "category": "event"
    },
    {
        "name": "watch_monitoring",
        "description": "Watch clients' monitoring log. This is an event plugin. This\nplugin will produce events from all clients.\n",
        "type": "Plugin",
        "args": [
            {
                "name": "artifact",
                "type": "string",
                "description": "The artifact to watch"
            }
        ],
        "category": "event"
    },
    {
        "name": "watch_syslog",
        "description": "Watch a syslog file and stream events from it. ",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "A list of log files to parse.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use."
            }
        ],
        "category": "event"
    },
    {
        "name": "watch_usn",
        "description": "Watch the USN journal from a device.",
        "type": "Plugin",
        "args": [
            {
                "name": "device",
                "type": "string",
                "description": "The device file to open.",
                "required": true
            }
        ],
        "category": "event"
    },
    {
        "name": "whoami",
        "description": "Returns the username that is running the query.",
        "type": "Function"
    },
    {
        "name": "winobj",
        "description": "Enumerate The Windows Object Manager namespace.",
        "type": "Plugin",
        "args": [
            {
                "name": "path",
                "type": "string",
                "description": "Object namespace path."
            }
        ],
        "category": "windows"
    },
    {
        "name": "wmi",
        "description": "Execute simple WMI queries synchronously.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "string",
                "description": "The WMI query to issue.",
                "required": true
            },
            {
                "name": "namespace",
                "type": "string",
                "description": "The WMI namespace to use (ROOT/CIMV2)"
            }
        ],
        "category": "windows"
    },
    {
        "name": "wmi_events",
        "description": "Executes an evented WMI queries asynchronously.",
        "type": "Plugin",
        "args": [
            {
                "name": "query",
                "type": "string",
                "description": "WMI query to run.",
                "required": true
            },
            {
                "name": "namespace",
                "type": "string",
                "description": "WMI namespace",
                "required": true
            },
            {
                "name": "wait",
                "type": "int64",
                "description": "Wait this many seconds for events and then quit.",
                "required": true
            }
        ],
        "category": "event"
    },
    {
        "name": "write_csv",
        "description": "Write a query into a CSV file.",
        "type": "Plugin",
        "args": [
            {
                "name": "filename",
                "type": "string",
                "description": "CSV files to open",
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "The accessor to use"
            },
            {
                "name": "query",
                "type": "StoredQuery",
                "description": "query to write into the file.",
                "required": true
            }
        ],
        "category": "plugin"
    },
    {
        "name": "xor",
        "description": "Apply xor to the string and key.",
        "type": "Function",
        "args": [
            {
                "name": "string",
                "type": "string",
                "description": "String to apply Xor",
                "required": true
            },
            {
                "name": "key",
                "type": "string",
                "description": "Xor key.",
                "required": true
            }
        ]
    },
    {
        "name": "yara",
        "description": "Scan files using yara rules.",
        "type": "Plugin",
        "args": [
            {
                "name": "rules",
                "type": "string",
                "description": "Yara rules in the yara DSL.",
                "required": true
            },
            {
                "name": "files",
                "type": "string",
                "description": "The list of files to scan.",
                "repeated": true,
                "required": true
            },
            {
                "name": "accessor",
                "type": "string",
                "description": "Accessor (e.g. NTFS)"
            },
            {
                "name": "context",
                "type": "int",
                "description": "How many bytes to include around each hit"
            },
            {
                "name": "start",
                "type": "uint64",
                "description": "The start offset to scan"
            },
            {
                "name": "end",
                "type": "uint64",
                "description": "End scanning at this offset (100mb)"
            },
            {
                "name": "number",
                "type": "int64",
                "description": "Stop after this many hits (1)."
            },
            {
                "name": "blocksize",
                "type": "uint64",
                "description": "Blocksize for scanning (1mb)."
            },
            {
                "name": "key",
                "type": "string",
                "description": "If set use this key to cache the  yara rules."
            }
        ],
        "category": "plugin"
    }
]